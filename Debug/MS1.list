
MS1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000630c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000320  0800649c  0800649c  0001649c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067bc  080067bc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080067bc  080067bc  000167bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067c4  080067c4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067c8  080067c8  000167c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080067cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  20000070  0800683c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  0800683c  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151aa  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002acd  00000000  00000000  0003524a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d98  00000000  00000000  00037d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c90  00000000  00000000  00038ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000225af  00000000  00000000  00039740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010bf6  00000000  00000000  0005bcef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c649d  00000000  00000000  0006c8e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132d82  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004028  00000000  00000000  00132dd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006484 	.word	0x08006484

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08006484 	.word	0x08006484

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96e 	b.w	8000574 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468c      	mov	ip, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	f040 8083 	bne.w	80003c6 <__udivmoddi4+0x116>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d947      	bls.n	8000356 <__udivmoddi4+0xa6>
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	b142      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002cc:	f1c2 0020 	rsb	r0, r2, #32
 80002d0:	fa24 f000 	lsr.w	r0, r4, r0
 80002d4:	4091      	lsls	r1, r2
 80002d6:	4097      	lsls	r7, r2
 80002d8:	ea40 0c01 	orr.w	ip, r0, r1
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbbc f6f8 	udiv	r6, ip, r8
 80002e8:	fa1f fe87 	uxth.w	lr, r7
 80002ec:	fb08 c116 	mls	r1, r8, r6, ip
 80002f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f4:	fb06 f10e 	mul.w	r1, r6, lr
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18fb      	adds	r3, r7, r3
 80002fe:	f106 30ff 	add.w	r0, r6, #4294967295
 8000302:	f080 8119 	bcs.w	8000538 <__udivmoddi4+0x288>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8116 	bls.w	8000538 <__udivmoddi4+0x288>
 800030c:	3e02      	subs	r6, #2
 800030e:	443b      	add	r3, r7
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0f8 	udiv	r0, r3, r8
 8000318:	fb08 3310 	mls	r3, r8, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fe0e 	mul.w	lr, r0, lr
 8000324:	45a6      	cmp	lr, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	193c      	adds	r4, r7, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8105 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000332:	45a6      	cmp	lr, r4
 8000334:	f240 8102 	bls.w	800053c <__udivmoddi4+0x28c>
 8000338:	3802      	subs	r0, #2
 800033a:	443c      	add	r4, r7
 800033c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000340:	eba4 040e 	sub.w	r4, r4, lr
 8000344:	2600      	movs	r6, #0
 8000346:	b11d      	cbz	r5, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c5 4300 	strd	r4, r3, [r5]
 8000350:	4631      	mov	r1, r6
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	b902      	cbnz	r2, 800035a <__udivmoddi4+0xaa>
 8000358:	deff      	udf	#255	; 0xff
 800035a:	fab2 f282 	clz	r2, r2
 800035e:	2a00      	cmp	r2, #0
 8000360:	d150      	bne.n	8000404 <__udivmoddi4+0x154>
 8000362:	1bcb      	subs	r3, r1, r7
 8000364:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	2601      	movs	r6, #1
 800036e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000372:	0c21      	lsrs	r1, r4, #16
 8000374:	fb0e 331c 	mls	r3, lr, ip, r3
 8000378:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800037c:	fb08 f30c 	mul.w	r3, r8, ip
 8000380:	428b      	cmp	r3, r1
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0xe4>
 8000384:	1879      	adds	r1, r7, r1
 8000386:	f10c 30ff 	add.w	r0, ip, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0xe2>
 800038c:	428b      	cmp	r3, r1
 800038e:	f200 80e9 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 8000392:	4684      	mov	ip, r0
 8000394:	1ac9      	subs	r1, r1, r3
 8000396:	b2a3      	uxth	r3, r4
 8000398:	fbb1 f0fe 	udiv	r0, r1, lr
 800039c:	fb0e 1110 	mls	r1, lr, r0, r1
 80003a0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003a4:	fb08 f800 	mul.w	r8, r8, r0
 80003a8:	45a0      	cmp	r8, r4
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x10c>
 80003ac:	193c      	adds	r4, r7, r4
 80003ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x10a>
 80003b4:	45a0      	cmp	r8, r4
 80003b6:	f200 80d9 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003ba:	4618      	mov	r0, r3
 80003bc:	eba4 0408 	sub.w	r4, r4, r8
 80003c0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003c4:	e7bf      	b.n	8000346 <__udivmoddi4+0x96>
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0x12e>
 80003ca:	2d00      	cmp	r5, #0
 80003cc:	f000 80b1 	beq.w	8000532 <__udivmoddi4+0x282>
 80003d0:	2600      	movs	r6, #0
 80003d2:	e9c5 0100 	strd	r0, r1, [r5]
 80003d6:	4630      	mov	r0, r6
 80003d8:	4631      	mov	r1, r6
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f683 	clz	r6, r3
 80003e2:	2e00      	cmp	r6, #0
 80003e4:	d14a      	bne.n	800047c <__udivmoddi4+0x1cc>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0x140>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80b8 	bhi.w	8000560 <__udivmoddi4+0x2b0>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0103 	sbc.w	r1, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	468c      	mov	ip, r1
 80003fa:	2d00      	cmp	r5, #0
 80003fc:	d0a8      	beq.n	8000350 <__udivmoddi4+0xa0>
 80003fe:	e9c5 4c00 	strd	r4, ip, [r5]
 8000402:	e7a5      	b.n	8000350 <__udivmoddi4+0xa0>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f603 	lsr.w	r6, r0, r3
 800040c:	4097      	lsls	r7, r2
 800040e:	fa01 f002 	lsl.w	r0, r1, r2
 8000412:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000416:	40d9      	lsrs	r1, r3
 8000418:	4330      	orrs	r0, r6
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000420:	fa1f f887 	uxth.w	r8, r7
 8000424:	fb0e 1116 	mls	r1, lr, r6, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb06 f108 	mul.w	r1, r6, r8
 8000430:	4299      	cmp	r1, r3
 8000432:	fa04 f402 	lsl.w	r4, r4, r2
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x19c>
 8000438:	18fb      	adds	r3, r7, r3
 800043a:	f106 3cff 	add.w	ip, r6, #4294967295
 800043e:	f080 808d 	bcs.w	800055c <__udivmoddi4+0x2ac>
 8000442:	4299      	cmp	r1, r3
 8000444:	f240 808a 	bls.w	800055c <__udivmoddi4+0x2ac>
 8000448:	3e02      	subs	r6, #2
 800044a:	443b      	add	r3, r7
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b281      	uxth	r1, r0
 8000450:	fbb3 f0fe 	udiv	r0, r3, lr
 8000454:	fb0e 3310 	mls	r3, lr, r0, r3
 8000458:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045c:	fb00 f308 	mul.w	r3, r0, r8
 8000460:	428b      	cmp	r3, r1
 8000462:	d907      	bls.n	8000474 <__udivmoddi4+0x1c4>
 8000464:	1879      	adds	r1, r7, r1
 8000466:	f100 3cff 	add.w	ip, r0, #4294967295
 800046a:	d273      	bcs.n	8000554 <__udivmoddi4+0x2a4>
 800046c:	428b      	cmp	r3, r1
 800046e:	d971      	bls.n	8000554 <__udivmoddi4+0x2a4>
 8000470:	3802      	subs	r0, #2
 8000472:	4439      	add	r1, r7
 8000474:	1acb      	subs	r3, r1, r3
 8000476:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800047a:	e778      	b.n	800036e <__udivmoddi4+0xbe>
 800047c:	f1c6 0c20 	rsb	ip, r6, #32
 8000480:	fa03 f406 	lsl.w	r4, r3, r6
 8000484:	fa22 f30c 	lsr.w	r3, r2, ip
 8000488:	431c      	orrs	r4, r3
 800048a:	fa20 f70c 	lsr.w	r7, r0, ip
 800048e:	fa01 f306 	lsl.w	r3, r1, r6
 8000492:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000496:	fa21 f10c 	lsr.w	r1, r1, ip
 800049a:	431f      	orrs	r7, r3
 800049c:	0c3b      	lsrs	r3, r7, #16
 800049e:	fbb1 f9fe 	udiv	r9, r1, lr
 80004a2:	fa1f f884 	uxth.w	r8, r4
 80004a6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004aa:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ae:	fb09 fa08 	mul.w	sl, r9, r8
 80004b2:	458a      	cmp	sl, r1
 80004b4:	fa02 f206 	lsl.w	r2, r2, r6
 80004b8:	fa00 f306 	lsl.w	r3, r0, r6
 80004bc:	d908      	bls.n	80004d0 <__udivmoddi4+0x220>
 80004be:	1861      	adds	r1, r4, r1
 80004c0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c4:	d248      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 80004c6:	458a      	cmp	sl, r1
 80004c8:	d946      	bls.n	8000558 <__udivmoddi4+0x2a8>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4421      	add	r1, r4
 80004d0:	eba1 010a 	sub.w	r1, r1, sl
 80004d4:	b2bf      	uxth	r7, r7
 80004d6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004da:	fb0e 1110 	mls	r1, lr, r0, r1
 80004de:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004e2:	fb00 f808 	mul.w	r8, r0, r8
 80004e6:	45b8      	cmp	r8, r7
 80004e8:	d907      	bls.n	80004fa <__udivmoddi4+0x24a>
 80004ea:	19e7      	adds	r7, r4, r7
 80004ec:	f100 31ff 	add.w	r1, r0, #4294967295
 80004f0:	d22e      	bcs.n	8000550 <__udivmoddi4+0x2a0>
 80004f2:	45b8      	cmp	r8, r7
 80004f4:	d92c      	bls.n	8000550 <__udivmoddi4+0x2a0>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4427      	add	r7, r4
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	eba7 0708 	sub.w	r7, r7, r8
 8000502:	fba0 8902 	umull	r8, r9, r0, r2
 8000506:	454f      	cmp	r7, r9
 8000508:	46c6      	mov	lr, r8
 800050a:	4649      	mov	r1, r9
 800050c:	d31a      	bcc.n	8000544 <__udivmoddi4+0x294>
 800050e:	d017      	beq.n	8000540 <__udivmoddi4+0x290>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x27a>
 8000512:	ebb3 020e 	subs.w	r2, r3, lr
 8000516:	eb67 0701 	sbc.w	r7, r7, r1
 800051a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800051e:	40f2      	lsrs	r2, r6
 8000520:	ea4c 0202 	orr.w	r2, ip, r2
 8000524:	40f7      	lsrs	r7, r6
 8000526:	e9c5 2700 	strd	r2, r7, [r5]
 800052a:	2600      	movs	r6, #0
 800052c:	4631      	mov	r1, r6
 800052e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e70b      	b.n	8000350 <__udivmoddi4+0xa0>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e9      	b.n	8000310 <__udivmoddi4+0x60>
 800053c:	4618      	mov	r0, r3
 800053e:	e6fd      	b.n	800033c <__udivmoddi4+0x8c>
 8000540:	4543      	cmp	r3, r8
 8000542:	d2e5      	bcs.n	8000510 <__udivmoddi4+0x260>
 8000544:	ebb8 0e02 	subs.w	lr, r8, r2
 8000548:	eb69 0104 	sbc.w	r1, r9, r4
 800054c:	3801      	subs	r0, #1
 800054e:	e7df      	b.n	8000510 <__udivmoddi4+0x260>
 8000550:	4608      	mov	r0, r1
 8000552:	e7d2      	b.n	80004fa <__udivmoddi4+0x24a>
 8000554:	4660      	mov	r0, ip
 8000556:	e78d      	b.n	8000474 <__udivmoddi4+0x1c4>
 8000558:	4681      	mov	r9, r0
 800055a:	e7b9      	b.n	80004d0 <__udivmoddi4+0x220>
 800055c:	4666      	mov	r6, ip
 800055e:	e775      	b.n	800044c <__udivmoddi4+0x19c>
 8000560:	4630      	mov	r0, r6
 8000562:	e74a      	b.n	80003fa <__udivmoddi4+0x14a>
 8000564:	f1ac 0c02 	sub.w	ip, ip, #2
 8000568:	4439      	add	r1, r7
 800056a:	e713      	b.n	8000394 <__udivmoddi4+0xe4>
 800056c:	3802      	subs	r0, #2
 800056e:	443c      	add	r4, r7
 8000570:	e724      	b.n	80003bc <__udivmoddi4+0x10c>
 8000572:	bf00      	nop

08000574 <__aeabi_idiv0>:
 8000574:	4770      	bx	lr
 8000576:	bf00      	nop

08000578 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000578:	b5b0      	push	{r4, r5, r7, lr}
 800057a:	b08a      	sub	sp, #40	; 0x28
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]
 8000584:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000586:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800058a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800058e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000592:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000594:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000596:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000598:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800059a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800059c:	683b      	ldr	r3, [r7, #0]
 800059e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005a4:	68bb      	ldr	r3, [r7, #8]
 80005a6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005a8:	f107 0310 	add.w	r3, r7, #16
 80005ac:	4618      	mov	r0, r3
 80005ae:	f000 f80e 	bl	80005ce <Lcd_init>

	return lcd;
 80005b2:	68fb      	ldr	r3, [r7, #12]
 80005b4:	461d      	mov	r5, r3
 80005b6:	f107 0410 	add.w	r4, r7, #16
 80005ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005c2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005c6:	68f8      	ldr	r0, [r7, #12]
 80005c8:	3728      	adds	r7, #40	; 0x28
 80005ca:	46bd      	mov	sp, r7
 80005cc:	bdb0      	pop	{r4, r5, r7, pc}

080005ce <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005ce:	b580      	push	{r7, lr}
 80005d0:	b082      	sub	sp, #8
 80005d2:	af00      	add	r7, sp, #0
 80005d4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	7d9b      	ldrb	r3, [r3, #22]
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d10c      	bne.n	80005f8 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005de:	2133      	movs	r1, #51	; 0x33
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f000 f863 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005e6:	2132      	movs	r1, #50	; 0x32
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f000 f85f 	bl	80006ac <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005ee:	2128      	movs	r1, #40	; 0x28
 80005f0:	6878      	ldr	r0, [r7, #4]
 80005f2:	f000 f85b 	bl	80006ac <lcd_write_command>
 80005f6:	e003      	b.n	8000600 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 80005f8:	2138      	movs	r1, #56	; 0x38
 80005fa:	6878      	ldr	r0, [r7, #4]
 80005fc:	f000 f856 	bl	80006ac <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000600:	2101      	movs	r1, #1
 8000602:	6878      	ldr	r0, [r7, #4]
 8000604:	f000 f852 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000608:	210c      	movs	r1, #12
 800060a:	6878      	ldr	r0, [r7, #4]
 800060c:	f000 f84e 	bl	80006ac <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000610:	2106      	movs	r1, #6
 8000612:	6878      	ldr	r0, [r7, #4]
 8000614:	f000 f84a 	bl	80006ac <lcd_write_command>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b085      	sub	sp, #20
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]
 800062e:	e00a      	b.n	8000646 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000630:	7bfb      	ldrb	r3, [r7, #15]
 8000632:	683a      	ldr	r2, [r7, #0]
 8000634:	4413      	add	r3, r2
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	6878      	ldr	r0, [r7, #4]
 800063c:	f000 f864 	bl	8000708 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000640:	7bfb      	ldrb	r3, [r7, #15]
 8000642:	3301      	adds	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	7bfc      	ldrb	r4, [r7, #15]
 8000648:	6838      	ldr	r0, [r7, #0]
 800064a:	f7ff fdc1 	bl	80001d0 <strlen>
 800064e:	4603      	mov	r3, r0
 8000650:	429c      	cmp	r4, r3
 8000652:	d3ed      	bcc.n	8000630 <Lcd_string+0x10>
	}
}
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	3714      	adds	r7, #20
 800065a:	46bd      	mov	sp, r7
 800065c:	bd90      	pop	{r4, r7, pc}
	...

08000660 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
 8000668:	460b      	mov	r3, r1
 800066a:	70fb      	strb	r3, [r7, #3]
 800066c:	4613      	mov	r3, r2
 800066e:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000670:	78fb      	ldrb	r3, [r7, #3]
 8000672:	4a07      	ldr	r2, [pc, #28]	; (8000690 <Lcd_cursor+0x30>)
 8000674:	5cd2      	ldrb	r2, [r2, r3]
 8000676:	78bb      	ldrb	r3, [r7, #2]
 8000678:	4413      	add	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	3b80      	subs	r3, #128	; 0x80
 800067e:	b2db      	uxtb	r3, r3
 8000680:	4619      	mov	r1, r3
 8000682:	6878      	ldr	r0, [r7, #4]
 8000684:	f000 f812 	bl	80006ac <lcd_write_command>
	#endif
}
 8000688:	bf00      	nop
 800068a:	3708      	adds	r7, #8
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	080066d0 	.word	0x080066d0

08000694 <Lcd_clear>:

/**
 * Clear the screen
 */
void Lcd_clear(Lcd_HandleTypeDef * lcd) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
	lcd_write_command(lcd, CLEAR_DISPLAY);
 800069c:	2101      	movs	r1, #1
 800069e:	6878      	ldr	r0, [r7, #4]
 80006a0:	f000 f804 	bl	80006ac <lcd_write_command>
}
 80006a4:	bf00      	nop
 80006a6:	3708      	adds	r7, #8
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	460b      	mov	r3, r1
 80006b6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	6898      	ldr	r0, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	899b      	ldrh	r3, [r3, #12]
 80006c0:	2200      	movs	r2, #0
 80006c2:	4619      	mov	r1, r3
 80006c4:	f001 fd06 	bl	80020d4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	7d9b      	ldrb	r3, [r3, #22]
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d111      	bne.n	80006f4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	091b      	lsrs	r3, r3, #4
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	2204      	movs	r2, #4
 80006d8:	4619      	mov	r1, r3
 80006da:	6878      	ldr	r0, [r7, #4]
 80006dc:	f000 f842 	bl	8000764 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80006e0:	78fb      	ldrb	r3, [r7, #3]
 80006e2:	f003 030f 	and.w	r3, r3, #15
 80006e6:	b2db      	uxtb	r3, r3
 80006e8:	2204      	movs	r2, #4
 80006ea:	4619      	mov	r1, r3
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f839 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80006f2:	e005      	b.n	8000700 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	2208      	movs	r2, #8
 80006f8:	4619      	mov	r1, r3
 80006fa:	6878      	ldr	r0, [r7, #4]
 80006fc:	f000 f832 	bl	8000764 <lcd_write>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	6898      	ldr	r0, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	899b      	ldrh	r3, [r3, #12]
 800071c:	2201      	movs	r2, #1
 800071e:	4619      	mov	r1, r3
 8000720:	f001 fcd8 	bl	80020d4 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	7d9b      	ldrb	r3, [r3, #22]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d111      	bne.n	8000750 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 800072c:	78fb      	ldrb	r3, [r7, #3]
 800072e:	091b      	lsrs	r3, r3, #4
 8000730:	b2db      	uxtb	r3, r3
 8000732:	2204      	movs	r2, #4
 8000734:	4619      	mov	r1, r3
 8000736:	6878      	ldr	r0, [r7, #4]
 8000738:	f000 f814 	bl	8000764 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800073c:	78fb      	ldrb	r3, [r7, #3]
 800073e:	f003 030f 	and.w	r3, r3, #15
 8000742:	b2db      	uxtb	r3, r3
 8000744:	2204      	movs	r2, #4
 8000746:	4619      	mov	r1, r3
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f000 f80b 	bl	8000764 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800074e:	e005      	b.n	800075c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	2208      	movs	r2, #8
 8000754:	4619      	mov	r1, r3
 8000756:	6878      	ldr	r0, [r7, #4]
 8000758:	f000 f804 	bl	8000764 <lcd_write>
}
 800075c:	bf00      	nop
 800075e:	3708      	adds	r7, #8
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}

08000764 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
 8000770:	4613      	mov	r3, r2
 8000772:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000774:	2300      	movs	r3, #0
 8000776:	73fb      	strb	r3, [r7, #15]
 8000778:	e019      	b.n	80007ae <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681a      	ldr	r2, [r3, #0]
 800077e:	7bfb      	ldrb	r3, [r7, #15]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	4413      	add	r3, r2
 8000784:	6818      	ldr	r0, [r3, #0]
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	685a      	ldr	r2, [r3, #4]
 800078a:	7bfb      	ldrb	r3, [r7, #15]
 800078c:	005b      	lsls	r3, r3, #1
 800078e:	4413      	add	r3, r2
 8000790:	8819      	ldrh	r1, [r3, #0]
 8000792:	78fa      	ldrb	r2, [r7, #3]
 8000794:	7bfb      	ldrb	r3, [r7, #15]
 8000796:	fa42 f303 	asr.w	r3, r2, r3
 800079a:	b2db      	uxtb	r3, r3
 800079c:	f003 0301 	and.w	r3, r3, #1
 80007a0:	b2db      	uxtb	r3, r3
 80007a2:	461a      	mov	r2, r3
 80007a4:	f001 fc96 	bl	80020d4 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007a8:	7bfb      	ldrb	r3, [r7, #15]
 80007aa:	3301      	adds	r3, #1
 80007ac:	73fb      	strb	r3, [r7, #15]
 80007ae:	7bfa      	ldrb	r2, [r7, #15]
 80007b0:	78bb      	ldrb	r3, [r7, #2]
 80007b2:	429a      	cmp	r2, r3
 80007b4:	d3e1      	bcc.n	800077a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	6918      	ldr	r0, [r3, #16]
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	8a9b      	ldrh	r3, [r3, #20]
 80007be:	2201      	movs	r2, #1
 80007c0:	4619      	mov	r1, r3
 80007c2:	f001 fc87 	bl	80020d4 <HAL_GPIO_WritePin>
	DELAY(1);
 80007c6:	2001      	movs	r0, #1
 80007c8:	f001 f966 	bl	8001a98 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6918      	ldr	r0, [r3, #16]
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	8a9b      	ldrh	r3, [r3, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	4619      	mov	r1, r3
 80007d8:	f001 fc7c 	bl	80020d4 <HAL_GPIO_WritePin>
}
 80007dc:	bf00      	nop
 80007de:	3710      	adds	r7, #16
 80007e0:	46bd      	mov	sp, r7
 80007e2:	bd80      	pop	{r7, pc}

080007e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e4:	b5b0      	push	{r4, r5, r7, lr}
 80007e6:	b0a4      	sub	sp, #144	; 0x90
 80007e8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ea:	f001 f8e0 	bl	80019ae <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007ee:	f000 f8ed 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f2:	f000 f9db 	bl	8000bac <MX_GPIO_Init>
  MX_SPI3_Init();
 80007f6:	f000 f93b 	bl	8000a70 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80007fa:	f000 f9a7 	bl	8000b4c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80007fe:	f000 f975 	bl	8000aec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //NFC config
  PN532 pn532;
  PN532_SPI_Init(&pn532);
 8000802:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8000806:	4618      	mov	r0, r3
 8000808:	f000 fe8c 	bl	8001524 <PN532_SPI_Init>
//  {
//	HAL_UART_Transmit(&huart2,"\rCould not connect to the RFID sensor\r\n",sizeof("\rCould not connect to the RFID sensor\r\n"), 10000);
//	HAL_Delay(1000);
//  }

  HAL_UART_Transmit(&huart2,"\rConnected to sensor successfully\n\r",sizeof("\rConnected to sensor successfully\n\r"), 10000);
 800080c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000810:	2224      	movs	r2, #36	; 0x24
 8000812:	4960      	ldr	r1, [pc, #384]	; (8000994 <main+0x1b0>)
 8000814:	4860      	ldr	r0, [pc, #384]	; (8000998 <main+0x1b4>)
 8000816:	f003 fa5d 	bl	8003cd4 <HAL_UART_Transmit>

  PN532_SamConfiguration(&pn532);
 800081a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800081e:	4618      	mov	r0, r3
 8000820:	f000 fcb8 	bl	8001194 <PN532_SamConfiguration>

  //Enable IT receive
  HAL_UART_Receive_IT (&huart1, Buffer, 1);
 8000824:	2201      	movs	r2, #1
 8000826:	495d      	ldr	r1, [pc, #372]	; (800099c <main+0x1b8>)
 8000828:	485d      	ldr	r0, [pc, #372]	; (80009a0 <main+0x1bc>)
 800082a:	f003 fae7 	bl	8003dfc <HAL_UART_Receive_IT>
  // LCD Configs
    // { D4_GPIO_Port, D5_GPIO_Port, D6_GPIO_Port, D7_GPIO_Port };
    Lcd_PortType ports[] = { GPIOA, GPIOA, GPIOA, GPIOA };
 800082e:	4b5d      	ldr	r3, [pc, #372]	; (80009a4 <main+0x1c0>)
 8000830:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000834:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000836:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // Lcd_PinType pins[] = {D4_Pin, D5_Pin, D6_Pin, D7_Pin};
    Lcd_PinType pins[] = {GPIO_PIN_4, GPIO_PIN_5, GPIO_PIN_6, GPIO_PIN_7};
 800083a:	4a5b      	ldr	r2, [pc, #364]	; (80009a8 <main+0x1c4>)
 800083c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000840:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000844:	e883 0003 	stmia.w	r3, {r0, r1}
    Lcd_HandleTypeDef lcd;
    // Lcd_create(ports, pins, RS_GPIO_Port, RS_Pin, EN_GPIO_Port, EN_Pin, LCD_4_BIT_MODE);
    lcd = Lcd_create(ports, pins, GPIOB, GPIO_PIN_0, GPIOA, GPIO_PIN_1, LCD_4_BIT_MODE);
 8000848:	4638      	mov	r0, r7
 800084a:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800084e:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8000852:	2300      	movs	r3, #0
 8000854:	9303      	str	r3, [sp, #12]
 8000856:	2302      	movs	r3, #2
 8000858:	9302      	str	r3, [sp, #8]
 800085a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800085e:	9301      	str	r3, [sp, #4]
 8000860:	2301      	movs	r3, #1
 8000862:	9300      	str	r3, [sp, #0]
 8000864:	4b51      	ldr	r3, [pc, #324]	; (80009ac <main+0x1c8>)
 8000866:	f7ff fe87 	bl	8000578 <Lcd_create>
 800086a:	f107 0430 	add.w	r4, r7, #48	; 0x30
 800086e:	463d      	mov	r5, r7
 8000870:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000872:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000874:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000878:	e884 0003 	stmia.w	r4, {r0, r1}
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  Lcd_cursor(&lcd, 0,1);
 800087c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000880:	2201      	movs	r2, #1
 8000882:	2100      	movs	r1, #0
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff feeb 	bl	8000660 <Lcd_cursor>


	  if (status == 1)
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <main+0x1cc>)
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	2b01      	cmp	r3, #1
 8000890:	d10e      	bne.n	80008b0 <main+0xcc>
	  {
		  Lcd_clear(&lcd);
 8000892:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000896:	4618      	mov	r0, r3
 8000898:	f7ff fefc 	bl	8000694 <Lcd_clear>
		  Lcd_string(&lcd, "User Found");
 800089c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008a0:	4944      	ldr	r1, [pc, #272]	; (80009b4 <main+0x1d0>)
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff febc 	bl	8000620 <Lcd_string>
		  status=0;
 80008a8:	4b41      	ldr	r3, [pc, #260]	; (80009b0 <main+0x1cc>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	e01d      	b.n	80008ec <main+0x108>
	  }
	  else if(status == 2)
 80008b0:	4b3f      	ldr	r3, [pc, #252]	; (80009b0 <main+0x1cc>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	2b02      	cmp	r3, #2
 80008b6:	d10e      	bne.n	80008d6 <main+0xf2>
	  {
		  Lcd_clear(&lcd);
 80008b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008bc:	4618      	mov	r0, r3
 80008be:	f7ff fee9 	bl	8000694 <Lcd_clear>
		  Lcd_string(&lcd, "User Not Found");
 80008c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008c6:	493c      	ldr	r1, [pc, #240]	; (80009b8 <main+0x1d4>)
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fea9 	bl	8000620 <Lcd_string>
		  status=0;
 80008ce:	4b38      	ldr	r3, [pc, #224]	; (80009b0 <main+0x1cc>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	601a      	str	r2, [r3, #0]
 80008d4:	e00a      	b.n	80008ec <main+0x108>
	  }
	  else
	  {
		  Lcd_clear(&lcd);
 80008d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff feda 	bl	8000694 <Lcd_clear>
		  Lcd_string(&lcd, "Please Scan ID");
 80008e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80008e4:	4935      	ldr	r1, [pc, #212]	; (80009bc <main+0x1d8>)
 80008e6:	4618      	mov	r0, r3
 80008e8:	f7ff fe9a 	bl	8000620 <Lcd_string>
	  }

	    HAL_Delay(1000);
 80008ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008f0:	f001 f8d2 	bl	8001a98 <HAL_Delay>

		uint8_t Buffer[MIFARE_UID_MAX_LENGTH] = {0};
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
 80008f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	809a      	strh	r2, [r3, #4]
		int32_t Buffer_Size = 0;
 8000902:	2300      	movs	r3, #0
 8000904:	67bb      	str	r3, [r7, #120]	; 0x78

	    Buffer_Size = PN532_ReadPassiveTarget(&pn532, Buffer, PN532_MIFARE_ISO14443A, 1000);
 8000906:	f107 0124 	add.w	r1, r7, #36	; 0x24
 800090a:	f107 0060 	add.w	r0, r7, #96	; 0x60
 800090e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000912:	2200      	movs	r2, #0
 8000914:	f000 fc60 	bl	80011d8 <PN532_ReadPassiveTarget>
 8000918:	67b8      	str	r0, [r7, #120]	; 0x78

	    if (Buffer_Size != -1)
 800091a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800091c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000920:	d0ac      	beq.n	800087c <main+0x98>
	    {
			unsigned char ID[8];

			for (int i = 0; i<Buffer_Size; i++)
 8000922:	2300      	movs	r3, #0
 8000924:	67fb      	str	r3, [r7, #124]	; 0x7c
 8000926:	e011      	b.n	800094c <main+0x168>
				sprintf(ID + 2*i, "%02X ", (unsigned char)Buffer[i]);
 8000928:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800092a:	005b      	lsls	r3, r3, #1
 800092c:	461a      	mov	r2, r3
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	1898      	adds	r0, r3, r2
 8000934:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8000938:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800093a:	4413      	add	r3, r2
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	491f      	ldr	r1, [pc, #124]	; (80009c0 <main+0x1dc>)
 8000942:	f004 fc8f 	bl	8005264 <siprintf>
			for (int i = 0; i<Buffer_Size; i++)
 8000946:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8000948:	3301      	adds	r3, #1
 800094a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800094c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800094e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000950:	429a      	cmp	r2, r3
 8000952:	dbe9      	blt.n	8000928 <main+0x144>



			HAL_UART_Transmit(&huart2, "ID Detected: ",sizeof("ID Detected: "), 10000);
 8000954:	f242 7310 	movw	r3, #10000	; 0x2710
 8000958:	220e      	movs	r2, #14
 800095a:	491a      	ldr	r1, [pc, #104]	; (80009c4 <main+0x1e0>)
 800095c:	480e      	ldr	r0, [pc, #56]	; (8000998 <main+0x1b4>)
 800095e:	f003 f9b9 	bl	8003cd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2,ID,sizeof(ID), 10000);
 8000962:	f107 011c 	add.w	r1, r7, #28
 8000966:	f242 7310 	movw	r3, #10000	; 0x2710
 800096a:	2208      	movs	r2, #8
 800096c:	480a      	ldr	r0, [pc, #40]	; (8000998 <main+0x1b4>)
 800096e:	f003 f9b1 	bl	8003cd4 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart2, "\r\n",sizeof("\r\n"), 10000);
 8000972:	f242 7310 	movw	r3, #10000	; 0x2710
 8000976:	2203      	movs	r2, #3
 8000978:	4913      	ldr	r1, [pc, #76]	; (80009c8 <main+0x1e4>)
 800097a:	4807      	ldr	r0, [pc, #28]	; (8000998 <main+0x1b4>)
 800097c:	f003 f9aa 	bl	8003cd4 <HAL_UART_Transmit>

			HAL_UART_Transmit(&huart1,ID,sizeof(ID), 10000);
 8000980:	f107 011c 	add.w	r1, r7, #28
 8000984:	f242 7310 	movw	r3, #10000	; 0x2710
 8000988:	2208      	movs	r2, #8
 800098a:	4805      	ldr	r0, [pc, #20]	; (80009a0 <main+0x1bc>)
 800098c:	f003 f9a2 	bl	8003cd4 <HAL_UART_Transmit>
  {
 8000990:	e774      	b.n	800087c <main+0x98>
 8000992:	bf00      	nop
 8000994:	0800649c 	.word	0x0800649c
 8000998:	20000188 	.word	0x20000188
 800099c:	20000184 	.word	0x20000184
 80009a0:	20000100 	.word	0x20000100
 80009a4:	08006508 	.word	0x08006508
 80009a8:	08006518 	.word	0x08006518
 80009ac:	48000400 	.word	0x48000400
 80009b0:	2000008c 	.word	0x2000008c
 80009b4:	080064c0 	.word	0x080064c0
 80009b8:	080064cc 	.word	0x080064cc
 80009bc:	080064dc 	.word	0x080064dc
 80009c0:	080064ec 	.word	0x080064ec
 80009c4:	080064f4 	.word	0x080064f4
 80009c8:	08006504 	.word	0x08006504

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b096      	sub	sp, #88	; 0x58
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	2244      	movs	r2, #68	; 0x44
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f004 fc22 	bl	8005224 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	463b      	mov	r3, r7
 80009e2:	2200      	movs	r2, #0
 80009e4:	601a      	str	r2, [r3, #0]
 80009e6:	605a      	str	r2, [r3, #4]
 80009e8:	609a      	str	r2, [r3, #8]
 80009ea:	60da      	str	r2, [r3, #12]
 80009ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80009ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80009f2:	f001 fb95 	bl	8002120 <HAL_PWREx_ControlVoltageScaling>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80009fc:	f000 f962 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000a00:	2310      	movs	r3, #16
 8000a02:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000a04:	2301      	movs	r3, #1
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000a0c:	2360      	movs	r3, #96	; 0x60
 8000a0e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a10:	2302      	movs	r3, #2
 8000a12:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000a14:	2301      	movs	r3, #1
 8000a16:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 36;
 8000a1c:	2324      	movs	r3, #36	; 0x24
 8000a1e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a20:	2307      	movs	r3, #7
 8000a22:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a2c:	f107 0314 	add.w	r3, r7, #20
 8000a30:	4618      	mov	r0, r3
 8000a32:	f001 fbcb 	bl	80021cc <HAL_RCC_OscConfig>
 8000a36:	4603      	mov	r3, r0
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000a3c:	f000 f942 	bl	8000cc4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a40:	230f      	movs	r3, #15
 8000a42:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a44:	2303      	movs	r3, #3
 8000a46:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a54:	463b      	mov	r3, r7
 8000a56:	2104      	movs	r1, #4
 8000a58:	4618      	mov	r0, r3
 8000a5a:	f001 ffc9 	bl	80029f0 <HAL_RCC_ClockConfig>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d001      	beq.n	8000a68 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000a64:	f000 f92e 	bl	8000cc4 <Error_Handler>
  }
}
 8000a68:	bf00      	nop
 8000a6a:	3758      	adds	r7, #88	; 0x58
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	bd80      	pop	{r7, pc}

08000a70 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000a74:	4b1b      	ldr	r3, [pc, #108]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a76:	4a1c      	ldr	r2, [pc, #112]	; (8000ae8 <MX_SPI3_Init+0x78>)
 8000a78:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000a7a:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a7c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a80:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a88:	4b16      	ldr	r3, [pc, #88]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a8a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000a8e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a96:	4b13      	ldr	r3, [pc, #76]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a9c:	4b11      	ldr	r3, [pc, #68]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000a9e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000aa6:	2230      	movs	r2, #48	; 0x30
 8000aa8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_LSB;
 8000aaa:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000aac:	2280      	movs	r2, #128	; 0x80
 8000aae:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ab0:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ab6:	4b0b      	ldr	r3, [pc, #44]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000abc:	4b09      	ldr	r3, [pc, #36]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000abe:	2207      	movs	r2, #7
 8000ac0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000ac2:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000ac8:	4b06      	ldr	r3, [pc, #24]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000aca:	2208      	movs	r2, #8
 8000acc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ace:	4805      	ldr	r0, [pc, #20]	; (8000ae4 <MX_SPI3_Init+0x74>)
 8000ad0:	f002 fc98 	bl	8003404 <HAL_SPI_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f8f3 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	2000009c 	.word	0x2000009c
 8000ae8:	40003c00 	.word	0x40003c00

08000aec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART1_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART1_UART_Init+0x58>)
 8000b30:	f003 f882 	bl	8003c38 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f000 f8c3 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	20000100 	.word	0x20000100
 8000b48:	40013800 	.word	0x40013800

08000b4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b50:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b52:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <MX_USART2_UART_Init+0x5c>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000b56:	4b13      	ldr	r3, [pc, #76]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b58:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000b5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b11      	ldr	r3, [pc, #68]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0f      	ldr	r3, [pc, #60]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b0c      	ldr	r3, [pc, #48]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b09      	ldr	r3, [pc, #36]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b82:	4b08      	ldr	r3, [pc, #32]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b8e:	4805      	ldr	r0, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x58>)
 8000b90:	f003 f852 	bl	8003c38 <HAL_UART_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b9a:	f000 f893 	bl	8000cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9e:	bf00      	nop
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	20000188 	.word	0x20000188
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b088      	sub	sp, #32
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	f107 030c 	add.w	r3, r7, #12
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	601a      	str	r2, [r3, #0]
 8000bba:	605a      	str	r2, [r3, #4]
 8000bbc:	609a      	str	r2, [r3, #8]
 8000bbe:	60da      	str	r2, [r3, #12]
 8000bc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b23      	ldr	r3, [pc, #140]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a22      	ldr	r2, [pc, #136]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b20      	ldr	r3, [pc, #128]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_GPIO_Init+0xa4>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f241 01f3 	movw	r1, #4339	; 0x10f3
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f001 fa6a 	bl	80020d4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2101      	movs	r1, #1
 8000c04:	4813      	ldr	r0, [pc, #76]	; (8000c54 <MX_GPIO_Init+0xa8>)
 8000c06:	f001 fa65 	bl	80020d4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA4 PA5
                           PA6 PA7 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5
 8000c0a:	f241 03f3 	movw	r3, #4339	; 0x10f3
 8000c0e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c10:	2301      	movs	r3, #1
 8000c12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1c:	f107 030c 	add.w	r3, r7, #12
 8000c20:	4619      	mov	r1, r3
 8000c22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c26:	f001 f8eb 	bl	8001e00 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c36:	2300      	movs	r3, #0
 8000c38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c3a:	f107 030c 	add.w	r3, r7, #12
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4804      	ldr	r0, [pc, #16]	; (8000c54 <MX_GPIO_Init+0xa8>)
 8000c42:	f001 f8dd 	bl	8001e00 <HAL_GPIO_Init>

}
 8000c46:	bf00      	nop
 8000c48:	3720      	adds	r7, #32
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40021000 	.word	0x40021000
 8000c54:	48000400 	.word	0x48000400

08000c58 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if (Buffer [0] == '1'){
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	2b31      	cmp	r3, #49	; 0x31
 8000c66:	d10a      	bne.n	8000c7e <HAL_UART_RxCpltCallback+0x26>
		HAL_UART_Transmit(&huart2,"User Found\r\n",sizeof("User Found\r\n"), 10000);
 8000c68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c6c:	220d      	movs	r2, #13
 8000c6e:	4910      	ldr	r1, [pc, #64]	; (8000cb0 <HAL_UART_RxCpltCallback+0x58>)
 8000c70:	4810      	ldr	r0, [pc, #64]	; (8000cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8000c72:	f003 f82f 	bl	8003cd4 <HAL_UART_Transmit>
		status=1;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <HAL_UART_RxCpltCallback+0x60>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	601a      	str	r2, [r3, #0]
 8000c7c:	e00d      	b.n	8000c9a <HAL_UART_RxCpltCallback+0x42>
	}
	else if (Buffer[0] == '0'){
 8000c7e:	4b0b      	ldr	r3, [pc, #44]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	2b30      	cmp	r3, #48	; 0x30
 8000c84:	d109      	bne.n	8000c9a <HAL_UART_RxCpltCallback+0x42>
		HAL_UART_Transmit(&huart2,"User Not Found\r\n",sizeof("User Not Found\r\n"), 10000);
 8000c86:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c8a:	2211      	movs	r2, #17
 8000c8c:	490b      	ldr	r1, [pc, #44]	; (8000cbc <HAL_UART_RxCpltCallback+0x64>)
 8000c8e:	4809      	ldr	r0, [pc, #36]	; (8000cb4 <HAL_UART_RxCpltCallback+0x5c>)
 8000c90:	f003 f820 	bl	8003cd4 <HAL_UART_Transmit>
		status=2;
 8000c94:	4b08      	ldr	r3, [pc, #32]	; (8000cb8 <HAL_UART_RxCpltCallback+0x60>)
 8000c96:	2202      	movs	r2, #2
 8000c98:	601a      	str	r2, [r3, #0]
	}


	HAL_UART_Receive_IT (&huart1, Buffer, 1);
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	4903      	ldr	r1, [pc, #12]	; (8000cac <HAL_UART_RxCpltCallback+0x54>)
 8000c9e:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <HAL_UART_RxCpltCallback+0x68>)
 8000ca0:	f003 f8ac 	bl	8003dfc <HAL_UART_Receive_IT>
}
 8000ca4:	bf00      	nop
 8000ca6:	3708      	adds	r7, #8
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	20000184 	.word	0x20000184
 8000cb0:	08006520 	.word	0x08006520
 8000cb4:	20000188 	.word	0x20000188
 8000cb8:	2000008c 	.word	0x2000008c
 8000cbc:	08006530 	.word	0x08006530
 8000cc0:	20000100 	.word	0x20000100

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <Error_Handler+0x8>

08000cce <PN532_WriteFrame>:
/**
  * @brief: Write a frame to the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns -1 if there is an error parsing the frame.  
  */
int PN532_WriteFrame(PN532* pn532, uint8_t* data, uint16_t length) {
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b0c8      	sub	sp, #288	; 0x120
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	f107 030c 	add.w	r3, r7, #12
 8000cd8:	6018      	str	r0, [r3, #0]
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	6019      	str	r1, [r3, #0]
 8000ce0:	1dbb      	adds	r3, r7, #6
 8000ce2:	801a      	strh	r2, [r3, #0]
    if (length > PN532_FRAME_MAX_LENGTH || length < 1) {
 8000ce4:	1dbb      	adds	r3, r7, #6
 8000ce6:	881b      	ldrh	r3, [r3, #0]
 8000ce8:	2bff      	cmp	r3, #255	; 0xff
 8000cea:	d803      	bhi.n	8000cf4 <PN532_WriteFrame+0x26>
 8000cec:	1dbb      	adds	r3, r7, #6
 8000cee:	881b      	ldrh	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <PN532_WriteFrame+0x2c>
        return PN532_STATUS_ERROR; // Data must be array of 1 to 255 bytes.
 8000cf4:	f04f 33ff 	mov.w	r3, #4294967295
 8000cf8:	e080      	b.n	8000dfc <PN532_WriteFrame+0x12e>
    // - Command bytes
    // - Checksum
    // - Postamble (0x00)

    uint8_t frame[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    frame[0] = PN532_PREAMBLE;
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	701a      	strb	r2, [r3, #0]
    frame[1] = PN532_STARTCODE1;
 8000d08:	f107 0314 	add.w	r3, r7, #20
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	705a      	strb	r2, [r3, #1]
    frame[2] = PN532_STARTCODE2;
 8000d10:	f107 0314 	add.w	r3, r7, #20
 8000d14:	22ff      	movs	r2, #255	; 0xff
 8000d16:	709a      	strb	r2, [r3, #2]
    for (uint8_t i = 0; i < 3; i++) {
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000d1e:	e00e      	b.n	8000d3e <PN532_WriteFrame+0x70>
        checksum += frame[i];
 8000d20:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000d24:	f107 0214 	add.w	r2, r7, #20
 8000d28:	5cd2      	ldrb	r2, [r2, r3]
 8000d2a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d2e:	4413      	add	r3, r2
 8000d30:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < 3; i++) {
 8000d34:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000d38:	3301      	adds	r3, #1
 8000d3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8000d3e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d9ec      	bls.n	8000d20 <PN532_WriteFrame+0x52>
    }
    frame[3] = length & 0xFF;
 8000d46:	1dbb      	adds	r3, r7, #6
 8000d48:	881b      	ldrh	r3, [r3, #0]
 8000d4a:	b2da      	uxtb	r2, r3
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	70da      	strb	r2, [r3, #3]
    frame[4] = (~length + 1) & 0xFF;
 8000d52:	1dbb      	adds	r3, r7, #6
 8000d54:	881b      	ldrh	r3, [r3, #0]
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	425b      	negs	r3, r3
 8000d5a:	b2da      	uxtb	r2, r3
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	711a      	strb	r2, [r3, #4]
    for (uint8_t i = 0; i < length; i++) {
 8000d62:	2300      	movs	r3, #0
 8000d64:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000d68:	e01d      	b.n	8000da6 <PN532_WriteFrame+0xd8>
        frame[5 + i] = data[i];
 8000d6a:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d6e:	f107 0208 	add.w	r2, r7, #8
 8000d72:	6812      	ldr	r2, [r2, #0]
 8000d74:	441a      	add	r2, r3
 8000d76:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d7a:	3305      	adds	r3, #5
 8000d7c:	7811      	ldrb	r1, [r2, #0]
 8000d7e:	f107 0214 	add.w	r2, r7, #20
 8000d82:	54d1      	strb	r1, [r2, r3]
        checksum += data[i];
 8000d84:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000d88:	f107 0208 	add.w	r2, r7, #8
 8000d8c:	6812      	ldr	r2, [r2, #0]
 8000d8e:	4413      	add	r3, r2
 8000d90:	781a      	ldrb	r2, [r3, #0]
 8000d92:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000d96:	4413      	add	r3, r2
 8000d98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < length; i++) {
 8000d9c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000da0:	3301      	adds	r3, #1
 8000da2:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000da6:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000daa:	b29b      	uxth	r3, r3
 8000dac:	1dba      	adds	r2, r7, #6
 8000dae:	8812      	ldrh	r2, [r2, #0]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	d8da      	bhi.n	8000d6a <PN532_WriteFrame+0x9c>
    }
    frame[length + 5] = ~checksum & 0xFF;
 8000db4:	1dbb      	adds	r3, r7, #6
 8000db6:	881b      	ldrh	r3, [r3, #0]
 8000db8:	3305      	adds	r3, #5
 8000dba:	f897 211f 	ldrb.w	r2, [r7, #287]	; 0x11f
 8000dbe:	43d2      	mvns	r2, r2
 8000dc0:	b2d1      	uxtb	r1, r2
 8000dc2:	f107 0214 	add.w	r2, r7, #20
 8000dc6:	54d1      	strb	r1, [r2, r3]
    frame[length + 6] = PN532_POSTAMBLE;
 8000dc8:	1dbb      	adds	r3, r7, #6
 8000dca:	881b      	ldrh	r3, [r3, #0]
 8000dcc:	3306      	adds	r3, #6
 8000dce:	f107 0214 	add.w	r2, r7, #20
 8000dd2:	2100      	movs	r1, #0
 8000dd4:	54d1      	strb	r1, [r2, r3]
    if (pn532->write_data(frame, length + 7) != PN532_STATUS_OK) {
 8000dd6:	f107 030c 	add.w	r3, r7, #12
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	1dba      	adds	r2, r7, #6
 8000de0:	8812      	ldrh	r2, [r2, #0]
 8000de2:	3207      	adds	r2, #7
 8000de4:	b291      	uxth	r1, r2
 8000de6:	f107 0214 	add.w	r2, r7, #20
 8000dea:	4610      	mov	r0, r2
 8000dec:	4798      	blx	r3
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d002      	beq.n	8000dfa <PN532_WriteFrame+0x12c>
        return PN532_STATUS_ERROR;
 8000df4:	f04f 33ff 	mov.w	r3, #4294967295
 8000df8:	e000      	b.n	8000dfc <PN532_WriteFrame+0x12e>
    }
    return PN532_STATUS_OK;
 8000dfa:	2300      	movs	r3, #0
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
	...

08000e08 <PN532_ReadFrame>:
/**
  * @brief: Read a response frame from the PN532 of at most length bytes in size.
  *     Note that less than length bytes might be returned!
  * @retval: Returns frame length or -1 if there is an error parsing the frame.  
  */
int PN532_ReadFrame(PN532* pn532, uint8_t* response, uint16_t length) {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b0c8      	sub	sp, #288	; 0x120
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	f107 030c 	add.w	r3, r7, #12
 8000e12:	6018      	str	r0, [r3, #0]
 8000e14:	f107 0308 	add.w	r3, r7, #8
 8000e18:	6019      	str	r1, [r3, #0]
 8000e1a:	1dbb      	adds	r3, r7, #6
 8000e1c:	801a      	strh	r2, [r3, #0]
    uint8_t buff[PN532_FRAME_MAX_LENGTH + 7];
    uint8_t checksum = 0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    // Read frame with expected length of data.
    pn532->read_data(buff, length + 7);
 8000e24:	f107 030c 	add.w	r3, r7, #12
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	685b      	ldr	r3, [r3, #4]
 8000e2c:	1dba      	adds	r2, r7, #6
 8000e2e:	8812      	ldrh	r2, [r2, #0]
 8000e30:	3207      	adds	r2, #7
 8000e32:	b291      	uxth	r1, r2
 8000e34:	f107 0214 	add.w	r2, r7, #20
 8000e38:	4610      	mov	r0, r2
 8000e3a:	4798      	blx	r3
    // Swallow all the 0x00 values that preceed 0xFF.
    uint8_t offset = 0;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    while (buff[offset] == 0x00) {
 8000e42:	e014      	b.n	8000e6e <PN532_ReadFrame+0x66>
        offset += 1;
 8000e44:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e48:	3301      	adds	r3, #1
 8000e4a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
        if (offset >= length + 8){
 8000e4e:	1dbb      	adds	r3, r7, #6
 8000e50:	881b      	ldrh	r3, [r3, #0]
 8000e52:	1dda      	adds	r2, r3, #7
 8000e54:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	da08      	bge.n	8000e6e <PN532_ReadFrame+0x66>
            pn532->log("Response frame preamble does not contain 0x00FF!");
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	695b      	ldr	r3, [r3, #20]
 8000e64:	484e      	ldr	r0, [pc, #312]	; (8000fa0 <PN532_ReadFrame+0x198>)
 8000e66:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 8000e68:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6c:	e092      	b.n	8000f94 <PN532_ReadFrame+0x18c>
    while (buff[offset] == 0x00) {
 8000e6e:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e72:	f107 0214 	add.w	r2, r7, #20
 8000e76:	5cd3      	ldrb	r3, [r2, r3]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d0e3      	beq.n	8000e44 <PN532_ReadFrame+0x3c>
        }
    }
    if (buff[offset] != 0xFF) {
 8000e7c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000e80:	f107 0214 	add.w	r2, r7, #20
 8000e84:	5cd3      	ldrb	r3, [r2, r3]
 8000e86:	2bff      	cmp	r3, #255	; 0xff
 8000e88:	d008      	beq.n	8000e9c <PN532_ReadFrame+0x94>
        pn532->log("Response frame preamble does not contain 0x00FF!");
 8000e8a:	f107 030c 	add.w	r3, r7, #12
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	695b      	ldr	r3, [r3, #20]
 8000e92:	4843      	ldr	r0, [pc, #268]	; (8000fa0 <PN532_ReadFrame+0x198>)
 8000e94:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295
 8000e9a:	e07b      	b.n	8000f94 <PN532_ReadFrame+0x18c>
    }
    offset += 1;
 8000e9c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    if (offset >= length + 8) {
 8000ea6:	1dbb      	adds	r3, r7, #6
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	1dda      	adds	r2, r3, #7
 8000eac:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000eb0:	429a      	cmp	r2, r3
 8000eb2:	da08      	bge.n	8000ec6 <PN532_ReadFrame+0xbe>
        pn532->log("Response contains no data!");
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	695b      	ldr	r3, [r3, #20]
 8000ebc:	4839      	ldr	r0, [pc, #228]	; (8000fa4 <PN532_ReadFrame+0x19c>)
 8000ebe:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ec0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ec4:	e066      	b.n	8000f94 <PN532_ReadFrame+0x18c>
    }
    // Check length & length checksum match.
    uint8_t frame_len = buff[offset];
 8000ec6:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000eca:	f107 0214 	add.w	r2, r7, #20
 8000ece:	5cd3      	ldrb	r3, [r2, r3]
 8000ed0:	f887 311b 	strb.w	r3, [r7, #283]	; 0x11b
    if (((frame_len + buff[offset+1]) & 0xFF) != 0) {
 8000ed4:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000ed8:	3301      	adds	r3, #1
 8000eda:	f107 0214 	add.w	r2, r7, #20
 8000ede:	5cd2      	ldrb	r2, [r2, r3]
 8000ee0:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000ee4:	4413      	add	r3, r2
 8000ee6:	b2db      	uxtb	r3, r3
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d008      	beq.n	8000efe <PN532_ReadFrame+0xf6>
        pn532->log("Response length checksum did not match length!");
 8000eec:	f107 030c 	add.w	r3, r7, #12
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	695b      	ldr	r3, [r3, #20]
 8000ef4:	482c      	ldr	r0, [pc, #176]	; (8000fa8 <PN532_ReadFrame+0x1a0>)
 8000ef6:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8000efc:	e04a      	b.n	8000f94 <PN532_ReadFrame+0x18c>
    }
    // Check frame checksum value matches bytes.
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000f04:	e012      	b.n	8000f2c <PN532_ReadFrame+0x124>
        checksum += buff[offset + 2 + i];
 8000f06:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000f0a:	1c9a      	adds	r2, r3, #2
 8000f0c:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000f10:	4413      	add	r3, r2
 8000f12:	f107 0214 	add.w	r2, r7, #20
 8000f16:	5cd2      	ldrb	r2, [r2, r3]
 8000f18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    for (uint8_t i = 0; i < frame_len + 1; i++) {
 8000f22:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000f26:	3301      	adds	r3, #1
 8000f28:	f887 311d 	strb.w	r3, [r7, #285]	; 0x11d
 8000f2c:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 8000f30:	f897 311d 	ldrb.w	r3, [r7, #285]	; 0x11d
 8000f34:	429a      	cmp	r2, r3
 8000f36:	d2e6      	bcs.n	8000f06 <PN532_ReadFrame+0xfe>
    }
    checksum &= 0xFF;
    if (checksum != 0) {
 8000f38:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d008      	beq.n	8000f52 <PN532_ReadFrame+0x14a>
        pn532->log("Response checksum did not match expected checksum");
 8000f40:	f107 030c 	add.w	r3, r7, #12
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	695b      	ldr	r3, [r3, #20]
 8000f48:	4818      	ldr	r0, [pc, #96]	; (8000fac <PN532_ReadFrame+0x1a4>)
 8000f4a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295
 8000f50:	e020      	b.n	8000f94 <PN532_ReadFrame+0x18c>
    }
    // Return frame data.
    for (uint8_t i = 0; i < frame_len; i++) {
 8000f52:	2300      	movs	r3, #0
 8000f54:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000f58:	e014      	b.n	8000f84 <PN532_ReadFrame+0x17c>
        response[i] = buff[offset + 2 + i];
 8000f5a:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8000f5e:	1c9a      	adds	r2, r3, #2
 8000f60:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000f64:	441a      	add	r2, r3
 8000f66:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000f6a:	f107 0108 	add.w	r1, r7, #8
 8000f6e:	6809      	ldr	r1, [r1, #0]
 8000f70:	440b      	add	r3, r1
 8000f72:	f107 0114 	add.w	r1, r7, #20
 8000f76:	5c8a      	ldrb	r2, [r1, r2]
 8000f78:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < frame_len; i++) {
 8000f7a:	f897 311c 	ldrb.w	r3, [r7, #284]	; 0x11c
 8000f7e:	3301      	adds	r3, #1
 8000f80:	f887 311c 	strb.w	r3, [r7, #284]	; 0x11c
 8000f84:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 8000f88:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
 8000f8c:	429a      	cmp	r2, r3
 8000f8e:	d3e4      	bcc.n	8000f5a <PN532_ReadFrame+0x152>
    }
    return frame_len;
 8000f90:	f897 311b 	ldrb.w	r3, [r7, #283]	; 0x11b
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	08006544 	.word	0x08006544
 8000fa4:	08006578 	.word	0x08006578
 8000fa8:	08006594 	.word	0x08006594
 8000fac:	080065c4 	.word	0x080065c4

08000fb0 <PN532_CallFunction>:
    uint8_t* response,
    uint16_t response_length,
    uint8_t* params,
    uint16_t params_length,
    uint32_t timeout
) {
 8000fb0:	b590      	push	{r4, r7, lr}
 8000fb2:	b0c7      	sub	sp, #284	; 0x11c
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	f107 040c 	add.w	r4, r7, #12
 8000fba:	6020      	str	r0, [r4, #0]
 8000fbc:	4608      	mov	r0, r1
 8000fbe:	1d39      	adds	r1, r7, #4
 8000fc0:	600a      	str	r2, [r1, #0]
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	f107 030b 	add.w	r3, r7, #11
 8000fc8:	4602      	mov	r2, r0
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	f107 0308 	add.w	r3, r7, #8
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	801a      	strh	r2, [r3, #0]
    // Build frame data with command and parameters.
    uint8_t buff[PN532_FRAME_MAX_LENGTH];
    buff[0] = PN532_HOSTTOPN532;
 8000fd4:	f107 0310 	add.w	r3, r7, #16
 8000fd8:	22d4      	movs	r2, #212	; 0xd4
 8000fda:	701a      	strb	r2, [r3, #0]
    buff[1] = command & 0xFF;
 8000fdc:	f107 0310 	add.w	r3, r7, #16
 8000fe0:	f107 020b 	add.w	r2, r7, #11
 8000fe4:	7812      	ldrb	r2, [r2, #0]
 8000fe6:	705a      	strb	r2, [r3, #1]
    for (uint8_t i = 0; i < params_length; i++) {
 8000fe8:	2300      	movs	r3, #0
 8000fea:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8000fee:	e010      	b.n	8001012 <PN532_CallFunction+0x62>
        buff[2 + i] = params[i];
 8000ff0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000ff4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8000ff8:	441a      	add	r2, r3
 8000ffa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000ffe:	3302      	adds	r3, #2
 8001000:	7811      	ldrb	r1, [r2, #0]
 8001002:	f107 0210 	add.w	r2, r7, #16
 8001006:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < params_length; i++) {
 8001008:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800100c:	3301      	adds	r3, #1
 800100e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 8001012:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8001016:	b29b      	uxth	r3, r3
 8001018:	f8b7 212c 	ldrh.w	r2, [r7, #300]	; 0x12c
 800101c:	429a      	cmp	r2, r3
 800101e:	d8e7      	bhi.n	8000ff0 <PN532_CallFunction+0x40>
    }
    // Send frame and wait for response.
    if (PN532_WriteFrame(pn532, buff, params_length + 2) != PN532_STATUS_OK) {
 8001020:	f8b7 312c 	ldrh.w	r3, [r7, #300]	; 0x12c
 8001024:	3302      	adds	r3, #2
 8001026:	b29a      	uxth	r2, r3
 8001028:	f107 0110 	add.w	r1, r7, #16
 800102c:	f107 030c 	add.w	r3, r7, #12
 8001030:	6818      	ldr	r0, [r3, #0]
 8001032:	f7ff fe4c 	bl	8000cce <PN532_WriteFrame>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d00d      	beq.n	8001058 <PN532_CallFunction+0xa8>
        pn532->wakeup();
 800103c:	f107 030c 	add.w	r3, r7, #12
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	691b      	ldr	r3, [r3, #16]
 8001044:	4798      	blx	r3
        pn532->log("Trying to wakeup");
 8001046:	f107 030c 	add.w	r3, r7, #12
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	484d      	ldr	r0, [pc, #308]	; (8001184 <PN532_CallFunction+0x1d4>)
 8001050:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e08f      	b.n	8001178 <PN532_CallFunction+0x1c8>
    }
    if (!pn532->wait_ready(timeout)) {
 8001058:	f107 030c 	add.w	r3, r7, #12
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 8001064:	4798      	blx	r3
 8001066:	4603      	mov	r3, r0
 8001068:	f083 0301 	eor.w	r3, r3, #1
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2b00      	cmp	r3, #0
 8001070:	d002      	beq.n	8001078 <PN532_CallFunction+0xc8>
        return PN532_STATUS_ERROR;
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	e07f      	b.n	8001178 <PN532_CallFunction+0x1c8>
    }
    // Verify ACK response and wait to be ready for function response.
    pn532->read_data(buff, sizeof(PN532_ACK));
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f107 0210 	add.w	r2, r7, #16
 8001084:	2106      	movs	r1, #6
 8001086:	4610      	mov	r0, r2
 8001088:	4798      	blx	r3
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 800108a:	2300      	movs	r3, #0
 800108c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 8001090:	e018      	b.n	80010c4 <PN532_CallFunction+0x114>
        if (PN532_ACK[i] != buff[i]) {
 8001092:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8001096:	4a3c      	ldr	r2, [pc, #240]	; (8001188 <PN532_CallFunction+0x1d8>)
 8001098:	5cd2      	ldrb	r2, [r2, r3]
 800109a:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 800109e:	f107 0110 	add.w	r1, r7, #16
 80010a2:	5ccb      	ldrb	r3, [r1, r3]
 80010a4:	429a      	cmp	r2, r3
 80010a6:	d008      	beq.n	80010ba <PN532_CallFunction+0x10a>
            pn532->log("Did not receive expected ACK from PN532!");
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	695b      	ldr	r3, [r3, #20]
 80010b0:	4836      	ldr	r0, [pc, #216]	; (800118c <PN532_CallFunction+0x1dc>)
 80010b2:	4798      	blx	r3
            return PN532_STATUS_ERROR;
 80010b4:	f04f 33ff 	mov.w	r3, #4294967295
 80010b8:	e05e      	b.n	8001178 <PN532_CallFunction+0x1c8>
    for (uint8_t i = 0; i < sizeof(PN532_ACK); i++) {
 80010ba:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80010be:	3301      	adds	r3, #1
 80010c0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80010c4:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 80010c8:	2b05      	cmp	r3, #5
 80010ca:	d9e2      	bls.n	8001092 <PN532_CallFunction+0xe2>
        }
    }
    if (!pn532->wait_ready(timeout)) {
 80010cc:	f107 030c 	add.w	r3, r7, #12
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f8d7 0130 	ldr.w	r0, [r7, #304]	; 0x130
 80010d8:	4798      	blx	r3
 80010da:	4603      	mov	r3, r0
 80010dc:	f083 0301 	eor.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d002      	beq.n	80010ec <PN532_CallFunction+0x13c>
        return PN532_STATUS_ERROR;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ea:	e045      	b.n	8001178 <PN532_CallFunction+0x1c8>
    }
    // Read response bytes.
    int frame_len = PN532_ReadFrame(pn532, buff, response_length + 2);
 80010ec:	f107 0308 	add.w	r3, r7, #8
 80010f0:	881b      	ldrh	r3, [r3, #0]
 80010f2:	3302      	adds	r3, #2
 80010f4:	b29a      	uxth	r2, r3
 80010f6:	f107 0110 	add.w	r1, r7, #16
 80010fa:	f107 030c 	add.w	r3, r7, #12
 80010fe:	6818      	ldr	r0, [r3, #0]
 8001100:	f7ff fe82 	bl	8000e08 <PN532_ReadFrame>
 8001104:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    // Check that response is for the called function.
    if (! ((buff[0] == PN532_PN532TOHOST) && (buff[1] == (command+1)))) {
 8001108:	f107 0310 	add.w	r3, r7, #16
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	2bd5      	cmp	r3, #213	; 0xd5
 8001110:	d109      	bne.n	8001126 <PN532_CallFunction+0x176>
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	785b      	ldrb	r3, [r3, #1]
 8001118:	461a      	mov	r2, r3
 800111a:	f107 030b 	add.w	r3, r7, #11
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	3301      	adds	r3, #1
 8001122:	429a      	cmp	r2, r3
 8001124:	d008      	beq.n	8001138 <PN532_CallFunction+0x188>
        pn532->log("Received unexpected command response!");
 8001126:	f107 030c 	add.w	r3, r7, #12
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	695b      	ldr	r3, [r3, #20]
 800112e:	4818      	ldr	r0, [pc, #96]	; (8001190 <PN532_CallFunction+0x1e0>)
 8001130:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
 8001136:	e01f      	b.n	8001178 <PN532_CallFunction+0x1c8>
    }
    // Return response data.
    for (uint8_t i = 0; i < response_length; i++) {
 8001138:	2300      	movs	r3, #0
 800113a:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 800113e:	e010      	b.n	8001162 <PN532_CallFunction+0x1b2>
        response[i] = buff[i + 2];
 8001140:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001144:	1c9a      	adds	r2, r3, #2
 8001146:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800114a:	1d39      	adds	r1, r7, #4
 800114c:	6809      	ldr	r1, [r1, #0]
 800114e:	440b      	add	r3, r1
 8001150:	f107 0110 	add.w	r1, r7, #16
 8001154:	5c8a      	ldrb	r2, [r1, r2]
 8001156:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < response_length; i++) {
 8001158:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800115c:	3301      	adds	r3, #1
 800115e:	f887 3115 	strb.w	r3, [r7, #277]	; 0x115
 8001162:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 8001166:	b29b      	uxth	r3, r3
 8001168:	f107 0208 	add.w	r2, r7, #8
 800116c:	8812      	ldrh	r2, [r2, #0]
 800116e:	429a      	cmp	r2, r3
 8001170:	d8e6      	bhi.n	8001140 <PN532_CallFunction+0x190>
    }
    // The the number of bytes read
    return frame_len - 2;
 8001172:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8001176:	3b02      	subs	r3, #2
}
 8001178:	4618      	mov	r0, r3
 800117a:	f507 778e 	add.w	r7, r7, #284	; 0x11c
 800117e:	46bd      	mov	sp, r7
 8001180:	bd90      	pop	{r4, r7, pc}
 8001182:	bf00      	nop
 8001184:	080065f8 	.word	0x080065f8
 8001188:	080066d4 	.word	0x080066d4
 800118c:	0800660c 	.word	0x0800660c
 8001190:	08006638 	.word	0x08006638

08001194 <PN532_SamConfiguration>:
}

/**
  * @brief: Configure the PN532 to read MiFare cards.
  */
int PN532_SamConfiguration(PN532* pn532) {
 8001194:	b580      	push	{r7, lr}
 8001196:	b088      	sub	sp, #32
 8001198:	af04      	add	r7, sp, #16
 800119a:	6078      	str	r0, [r7, #4]
    // - 0x01, normal mode
    // - 0x14, timeout 50ms * 20 = 1 second
    // - 0x01, use IRQ pin
    // Note that no other verification is necessary as call_function will
    // check the command was executed as expected.
    uint8_t params[] = {0x01, 0x14, 0x01};
 800119c:	4a0d      	ldr	r2, [pc, #52]	; (80011d4 <PN532_SamConfiguration+0x40>)
 800119e:	f107 030c 	add.w	r3, r7, #12
 80011a2:	6812      	ldr	r2, [r2, #0]
 80011a4:	4611      	mov	r1, r2
 80011a6:	8019      	strh	r1, [r3, #0]
 80011a8:	3302      	adds	r3, #2
 80011aa:	0c12      	lsrs	r2, r2, #16
 80011ac:	701a      	strb	r2, [r3, #0]
    PN532_CallFunction(pn532, PN532_COMMAND_SAMCONFIGURATION,
 80011ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011b2:	9302      	str	r3, [sp, #8]
 80011b4:	2303      	movs	r3, #3
 80011b6:	9301      	str	r3, [sp, #4]
 80011b8:	f107 030c 	add.w	r3, r7, #12
 80011bc:	9300      	str	r3, [sp, #0]
 80011be:	2300      	movs	r3, #0
 80011c0:	2200      	movs	r2, #0
 80011c2:	2114      	movs	r1, #20
 80011c4:	6878      	ldr	r0, [r7, #4]
 80011c6:	f7ff fef3 	bl	8000fb0 <PN532_CallFunction>
                       NULL, 0, params, sizeof(params), PN532_DEFAULT_TIMEOUT);
    return PN532_STATUS_OK;
 80011ca:	2300      	movs	r3, #0
}
 80011cc:	4618      	mov	r0, r3
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	0800667c 	.word	0x0800667c

080011d8 <PN532_ReadPassiveTarget>:
int PN532_ReadPassiveTarget(
    PN532* pn532,
    uint8_t* response,
    uint8_t card_baud,
    uint32_t timeout
) {
 80011d8:	b580      	push	{r7, lr}
 80011da:	b090      	sub	sp, #64	; 0x40
 80011dc:	af04      	add	r7, sp, #16
 80011de:	60f8      	str	r0, [r7, #12]
 80011e0:	60b9      	str	r1, [r7, #8]
 80011e2:	603b      	str	r3, [r7, #0]
 80011e4:	4613      	mov	r3, r2
 80011e6:	71fb      	strb	r3, [r7, #7]
    // Send passive read command for 1 card.  Expect at most a 7 byte UUID.
    uint8_t params[] = {0x01, card_baud};
 80011e8:	2301      	movs	r3, #1
 80011ea:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80011ee:	79fb      	ldrb	r3, [r7, #7]
 80011f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
    uint8_t buff[19];
    int length = PN532_CallFunction(pn532, PN532_COMMAND_INLISTPASSIVETARGET,
 80011f4:	f107 0210 	add.w	r2, r7, #16
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	9302      	str	r3, [sp, #8]
 80011fc:	2302      	movs	r3, #2
 80011fe:	9301      	str	r3, [sp, #4]
 8001200:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001204:	9300      	str	r3, [sp, #0]
 8001206:	2313      	movs	r3, #19
 8001208:	214a      	movs	r1, #74	; 0x4a
 800120a:	68f8      	ldr	r0, [r7, #12]
 800120c:	f7ff fed0 	bl	8000fb0 <PN532_CallFunction>
 8001210:	62b8      	str	r0, [r7, #40]	; 0x28
                        buff, sizeof(buff), params, sizeof(params), timeout);
    if (length < 0) {
 8001212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001214:	2b00      	cmp	r3, #0
 8001216:	da02      	bge.n	800121e <PN532_ReadPassiveTarget+0x46>
        return PN532_STATUS_ERROR; // No card found
 8001218:	f04f 33ff 	mov.w	r3, #4294967295
 800121c:	e02f      	b.n	800127e <PN532_ReadPassiveTarget+0xa6>
    }
    // Check only 1 card with up to a 7 byte UID is present.
    if (buff[0] != 0x01) {
 800121e:	7c3b      	ldrb	r3, [r7, #16]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d006      	beq.n	8001232 <PN532_ReadPassiveTarget+0x5a>
        pn532->log("More than one card detected!");
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	695b      	ldr	r3, [r3, #20]
 8001228:	4817      	ldr	r0, [pc, #92]	; (8001288 <PN532_ReadPassiveTarget+0xb0>)
 800122a:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 800122c:	f04f 33ff 	mov.w	r3, #4294967295
 8001230:	e025      	b.n	800127e <PN532_ReadPassiveTarget+0xa6>
    }
    if (buff[5] > 7) {
 8001232:	7d7b      	ldrb	r3, [r7, #21]
 8001234:	2b07      	cmp	r3, #7
 8001236:	d906      	bls.n	8001246 <PN532_ReadPassiveTarget+0x6e>
        pn532->log("Found card with unexpectedly long UID!");
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	4813      	ldr	r0, [pc, #76]	; (800128c <PN532_ReadPassiveTarget+0xb4>)
 800123e:	4798      	blx	r3
        return PN532_STATUS_ERROR;
 8001240:	f04f 33ff 	mov.w	r3, #4294967295
 8001244:	e01b      	b.n	800127e <PN532_ReadPassiveTarget+0xa6>
    }
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001246:	2300      	movs	r3, #0
 8001248:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800124c:	e011      	b.n	8001272 <PN532_ReadPassiveTarget+0x9a>
        response[i] = buff[6 + i];
 800124e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001252:	1d9a      	adds	r2, r3, #6
 8001254:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	440b      	add	r3, r1
 800125c:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8001260:	440a      	add	r2, r1
 8001262:	f812 2c20 	ldrb.w	r2, [r2, #-32]
 8001266:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < buff[5]; i++) {
 8001268:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800126c:	3301      	adds	r3, #1
 800126e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001272:	7d7b      	ldrb	r3, [r7, #21]
 8001274:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001278:	429a      	cmp	r2, r3
 800127a:	d3e8      	bcc.n	800124e <PN532_ReadPassiveTarget+0x76>
    }
    return buff[5];
 800127c:	7d7b      	ldrb	r3, [r7, #21]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3730      	adds	r7, #48	; 0x30
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	08006680 	.word	0x08006680
 800128c:	080066a0 	.word	0x080066a0

08001290 <PN532_Reset>:
//extern I2C_HandleTypeDef hi2c1;

/**************************************************************************
 * Reset and Log implements
 **************************************************************************/
int PN532_Reset(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 8001294:	2201      	movs	r2, #1
 8001296:	2101      	movs	r1, #1
 8001298:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800129c:	f000 ff1a 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80012a0:	2064      	movs	r0, #100	; 0x64
 80012a2:	f000 fbf9 	bl	8001a98 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_RESET);
 80012a6:	2200      	movs	r2, #0
 80012a8:	2101      	movs	r1, #1
 80012aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ae:	f000 ff11 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80012b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80012b6:	f000 fbef 	bl	8001a98 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_Reset_GPIO_Port, RFID_Reset_Pin, GPIO_PIN_SET);
 80012ba:	2201      	movs	r2, #1
 80012bc:	2101      	movs	r1, #1
 80012be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012c2:	f000 ff07 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(100);
 80012c6:	2064      	movs	r0, #100	; 0x64
 80012c8:	f000 fbe6 	bl	8001a98 <HAL_Delay>
    return PN532_STATUS_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <PN532_Log>:

void PN532_Log(const char* log) {
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", log);
 80012dc:	6879      	ldr	r1, [r7, #4]
 80012de:	4803      	ldr	r0, [pc, #12]	; (80012ec <PN532_Log+0x18>)
 80012e0:	f003 ffa8 	bl	8005234 <iprintf>
}
 80012e4:	bf00      	nop
 80012e6:	3708      	adds	r7, #8
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}
 80012ec:	080066c8 	.word	0x080066c8

080012f0 <spi_rw>:
        num >>= 1;
    }
    return result;
}

void spi_rw(uint8_t* data, uint8_t count) {
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af02      	add	r7, sp, #8
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	460b      	mov	r3, r1
 80012fa:	70fb      	strb	r3, [r7, #3]
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 80012fc:	2200      	movs	r2, #0
 80012fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001302:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001306:	f000 fee5 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800130a:	2001      	movs	r0, #1
 800130c:	f000 fbc4 	bl	8001a98 <HAL_Delay>
    HAL_SPI_TransmitReceive(&hspi3, data, data, count, _SPI_TIMEOUT);
    for (uint8_t i = 0; i < count; i++) {
        data[i] = reverse_bit(data[i]);
    }
#else
    HAL_SPI_TransmitReceive(&hspi3, data, data, count, _SPI_TIMEOUT);
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	b29b      	uxth	r3, r3
 8001314:	220a      	movs	r2, #10
 8001316:	9200      	str	r2, [sp, #0]
 8001318:	687a      	ldr	r2, [r7, #4]
 800131a:	6879      	ldr	r1, [r7, #4]
 800131c:	4808      	ldr	r0, [pc, #32]	; (8001340 <spi_rw+0x50>)
 800131e:	f002 f914 	bl	800354a <HAL_SPI_TransmitReceive>
#endif
    HAL_Delay(1);
 8001322:	2001      	movs	r0, #1
 8001324:	f000 fbb8 	bl	8001a98 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_SET);
 8001328:	2201      	movs	r2, #1
 800132a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800132e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001332:	f000 fecf 	bl	80020d4 <HAL_GPIO_WritePin>
}
 8001336:	bf00      	nop
 8001338:	3708      	adds	r7, #8
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000009c 	.word	0x2000009c

08001344 <PN532_SPI_ReadData>:

int PN532_SPI_ReadData(uint8_t* data, uint16_t count) {
 8001344:	b5b0      	push	{r4, r5, r7, lr}
 8001346:	b086      	sub	sp, #24
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
 8001350:	466b      	mov	r3, sp
 8001352:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	1c5c      	adds	r4, r3, #1
 8001358:	1e63      	subs	r3, r4, #1
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	4623      	mov	r3, r4
 800135e:	4618      	mov	r0, r3
 8001360:	f04f 0100 	mov.w	r1, #0
 8001364:	f04f 0200 	mov.w	r2, #0
 8001368:	f04f 0300 	mov.w	r3, #0
 800136c:	00cb      	lsls	r3, r1, #3
 800136e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001372:	00c2      	lsls	r2, r0, #3
 8001374:	4623      	mov	r3, r4
 8001376:	4618      	mov	r0, r3
 8001378:	f04f 0100 	mov.w	r1, #0
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	f04f 0300 	mov.w	r3, #0
 8001384:	00cb      	lsls	r3, r1, #3
 8001386:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800138a:	00c2      	lsls	r2, r0, #3
 800138c:	4623      	mov	r3, r4
 800138e:	3307      	adds	r3, #7
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	ebad 0d03 	sub.w	sp, sp, r3
 8001398:	466b      	mov	r3, sp
 800139a:	3300      	adds	r3, #0
 800139c:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAREAD;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2203      	movs	r2, #3
 80013a2:	701a      	strb	r2, [r3, #0]
    HAL_Delay(5);
 80013a4:	2005      	movs	r0, #5
 80013a6:	f000 fb77 	bl	8001a98 <HAL_Delay>
    spi_rw(frame, count + 1);
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	3301      	adds	r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	4619      	mov	r1, r3
 80013b6:	4610      	mov	r0, r2
 80013b8:	f7ff ff9a 	bl	80012f0 <spi_rw>
    for (uint8_t i = 0; i < count; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	75fb      	strb	r3, [r7, #23]
 80013c0:	e00a      	b.n	80013d8 <PN532_SPI_ReadData+0x94>
        data[i] = frame[i + 1];
 80013c2:	7dfb      	ldrb	r3, [r7, #23]
 80013c4:	1c5a      	adds	r2, r3, #1
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	6879      	ldr	r1, [r7, #4]
 80013ca:	440b      	add	r3, r1
 80013cc:	68f9      	ldr	r1, [r7, #12]
 80013ce:	5c8a      	ldrb	r2, [r1, r2]
 80013d0:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 80013d2:	7dfb      	ldrb	r3, [r7, #23]
 80013d4:	3301      	adds	r3, #1
 80013d6:	75fb      	strb	r3, [r7, #23]
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	b29b      	uxth	r3, r3
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d8ef      	bhi.n	80013c2 <PN532_SPI_ReadData+0x7e>
    }
    return PN532_STATUS_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	46ad      	mov	sp, r5
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bdb0      	pop	{r4, r5, r7, pc}

080013ee <PN532_SPI_WriteData>:

int PN532_SPI_WriteData(uint8_t *data, uint16_t count) {
 80013ee:	b5b0      	push	{r4, r5, r7, lr}
 80013f0:	b086      	sub	sp, #24
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
 80013f6:	460b      	mov	r3, r1
 80013f8:	807b      	strh	r3, [r7, #2]
 80013fa:	466b      	mov	r3, sp
 80013fc:	461d      	mov	r5, r3
    uint8_t frame[count + 1];
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	1c5c      	adds	r4, r3, #1
 8001402:	1e63      	subs	r3, r4, #1
 8001404:	613b      	str	r3, [r7, #16]
 8001406:	4623      	mov	r3, r4
 8001408:	4618      	mov	r0, r3
 800140a:	f04f 0100 	mov.w	r1, #0
 800140e:	f04f 0200 	mov.w	r2, #0
 8001412:	f04f 0300 	mov.w	r3, #0
 8001416:	00cb      	lsls	r3, r1, #3
 8001418:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800141c:	00c2      	lsls	r2, r0, #3
 800141e:	4623      	mov	r3, r4
 8001420:	4618      	mov	r0, r3
 8001422:	f04f 0100 	mov.w	r1, #0
 8001426:	f04f 0200 	mov.w	r2, #0
 800142a:	f04f 0300 	mov.w	r3, #0
 800142e:	00cb      	lsls	r3, r1, #3
 8001430:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001434:	00c2      	lsls	r2, r0, #3
 8001436:	4623      	mov	r3, r4
 8001438:	3307      	adds	r3, #7
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	00db      	lsls	r3, r3, #3
 800143e:	ebad 0d03 	sub.w	sp, sp, r3
 8001442:	466b      	mov	r3, sp
 8001444:	3300      	adds	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
    frame[0] = _SPI_DATAWRITE;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	2201      	movs	r2, #1
 800144c:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < count; i++) {
 800144e:	2300      	movs	r3, #0
 8001450:	75fb      	strb	r3, [r7, #23]
 8001452:	e00a      	b.n	800146a <PN532_SPI_WriteData+0x7c>
        frame[i + 1] = data[i];
 8001454:	7dfb      	ldrb	r3, [r7, #23]
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	441a      	add	r2, r3
 800145a:	7dfb      	ldrb	r3, [r7, #23]
 800145c:	3301      	adds	r3, #1
 800145e:	7811      	ldrb	r1, [r2, #0]
 8001460:	68fa      	ldr	r2, [r7, #12]
 8001462:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 0; i < count; i++) {
 8001464:	7dfb      	ldrb	r3, [r7, #23]
 8001466:	3301      	adds	r3, #1
 8001468:	75fb      	strb	r3, [r7, #23]
 800146a:	7dfb      	ldrb	r3, [r7, #23]
 800146c:	b29b      	uxth	r3, r3
 800146e:	887a      	ldrh	r2, [r7, #2]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8ef      	bhi.n	8001454 <PN532_SPI_WriteData+0x66>
    }
    spi_rw(frame, count + 1);
 8001474:	68fa      	ldr	r2, [r7, #12]
 8001476:	887b      	ldrh	r3, [r7, #2]
 8001478:	b2db      	uxtb	r3, r3
 800147a:	3301      	adds	r3, #1
 800147c:	b2db      	uxtb	r3, r3
 800147e:	4619      	mov	r1, r3
 8001480:	4610      	mov	r0, r2
 8001482:	f7ff ff35 	bl	80012f0 <spi_rw>
    return PN532_STATUS_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	46ad      	mov	sp, r5
}
 800148a:	4618      	mov	r0, r3
 800148c:	3718      	adds	r7, #24
 800148e:	46bd      	mov	sp, r7
 8001490:	bdb0      	pop	{r4, r5, r7, pc}

08001492 <PN532_SPI_WaitReady>:

bool PN532_SPI_WaitReady(uint32_t timeout) {
 8001492:	b580      	push	{r7, lr}
 8001494:	b084      	sub	sp, #16
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
    uint8_t status[] = {_SPI_STATREAD, 0x00};
 800149a:	2302      	movs	r3, #2
 800149c:	813b      	strh	r3, [r7, #8]
    uint32_t tickstart = HAL_GetTick();
 800149e:	f000 faef 	bl	8001a80 <HAL_GetTick>
 80014a2:	60f8      	str	r0, [r7, #12]
    while (HAL_GetTick() - tickstart < timeout) {
 80014a4:	e010      	b.n	80014c8 <PN532_SPI_WaitReady+0x36>
        HAL_Delay(10);
 80014a6:	200a      	movs	r0, #10
 80014a8:	f000 faf6 	bl	8001a98 <HAL_Delay>
        spi_rw(status, sizeof(status));
 80014ac:	f107 0308 	add.w	r3, r7, #8
 80014b0:	2102      	movs	r1, #2
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff1c 	bl	80012f0 <spi_rw>
        if (status[1] == _SPI_READY) {
 80014b8:	7a7b      	ldrb	r3, [r7, #9]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d101      	bne.n	80014c2 <PN532_SPI_WaitReady+0x30>
            return true;
 80014be:	2301      	movs	r3, #1
 80014c0:	e00b      	b.n	80014da <PN532_SPI_WaitReady+0x48>
        } else {
            HAL_Delay(5);
 80014c2:	2005      	movs	r0, #5
 80014c4:	f000 fae8 	bl	8001a98 <HAL_Delay>
    while (HAL_GetTick() - tickstart < timeout) {
 80014c8:	f000 fada 	bl	8001a80 <HAL_GetTick>
 80014cc:	4602      	mov	r2, r0
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	1ad3      	subs	r3, r2, r3
 80014d2:	687a      	ldr	r2, [r7, #4]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d8e6      	bhi.n	80014a6 <PN532_SPI_WaitReady+0x14>
        }
    }
    return false;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <PN532_SPI_Wakeup>:

int PN532_SPI_Wakeup(void) {
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b082      	sub	sp, #8
 80014e6:	af00      	add	r7, sp, #0
    // Send any special commands/data to wake up PN532
    uint8_t data[] = {0x00};
 80014e8:	2300      	movs	r3, #0
 80014ea:	713b      	strb	r3, [r7, #4]
    HAL_Delay(1000);
 80014ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80014f0:	f000 fad2 	bl	8001a98 <HAL_Delay>
    HAL_GPIO_WritePin(RFID_SS_GPIO_Port, RFID_SS_Pin, GPIO_PIN_RESET);
 80014f4:	2200      	movs	r2, #0
 80014f6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80014fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014fe:	f000 fde9 	bl	80020d4 <HAL_GPIO_WritePin>
    HAL_Delay(2); // T_osc_start
 8001502:	2002      	movs	r0, #2
 8001504:	f000 fac8 	bl	8001a98 <HAL_Delay>
    spi_rw(data, 1);
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2101      	movs	r1, #1
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff feef 	bl	80012f0 <spi_rw>
    HAL_Delay(1000);
 8001512:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001516:	f000 fabf 	bl	8001a98 <HAL_Delay>
    return PN532_STATUS_OK;
 800151a:	2300      	movs	r3, #0
}
 800151c:	4618      	mov	r0, r3
 800151e:	3708      	adds	r7, #8
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <PN532_SPI_Init>:

void PN532_SPI_Init(PN532* pn532) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
    // init the pn532 functions
    pn532->reset =  PN532_Reset;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a0c      	ldr	r2, [pc, #48]	; (8001560 <PN532_SPI_Init+0x3c>)
 8001530:	601a      	str	r2, [r3, #0]
    pn532->read_data = PN532_SPI_ReadData;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <PN532_SPI_Init+0x40>)
 8001536:	605a      	str	r2, [r3, #4]
    pn532->write_data = PN532_SPI_WriteData;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a0b      	ldr	r2, [pc, #44]	; (8001568 <PN532_SPI_Init+0x44>)
 800153c:	609a      	str	r2, [r3, #8]
    pn532->wait_ready = PN532_SPI_WaitReady;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a0a      	ldr	r2, [pc, #40]	; (800156c <PN532_SPI_Init+0x48>)
 8001542:	60da      	str	r2, [r3, #12]
    pn532->wakeup = PN532_SPI_Wakeup;
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <PN532_SPI_Init+0x4c>)
 8001548:	611a      	str	r2, [r3, #16]
    pn532->log = PN532_Log;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	4a09      	ldr	r2, [pc, #36]	; (8001574 <PN532_SPI_Init+0x50>)
 800154e:	615a      	str	r2, [r3, #20]

    // hardware wakeup
    pn532->wakeup();
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	4798      	blx	r3
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	08001291 	.word	0x08001291
 8001564:	08001345 	.word	0x08001345
 8001568:	080013ef 	.word	0x080013ef
 800156c:	08001493 	.word	0x08001493
 8001570:	080014e3 	.word	0x080014e3
 8001574:	080012d5 	.word	0x080012d5

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b0f      	ldr	r3, [pc, #60]	; (80015bc <HAL_MspInit+0x44>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	4a0e      	ldr	r2, [pc, #56]	; (80015bc <HAL_MspInit+0x44>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6613      	str	r3, [r2, #96]	; 0x60
 800158a:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <HAL_MspInit+0x44>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <HAL_MspInit+0x44>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a08      	ldr	r2, [pc, #32]	; (80015bc <HAL_MspInit+0x44>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b06      	ldr	r3, [pc, #24]	; (80015bc <HAL_MspInit+0x44>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b08a      	sub	sp, #40	; 0x28
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015c8:	f107 0314 	add.w	r3, r7, #20
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]
 80015d6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_SPI_MspInit+0x7c>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d127      	bne.n	8001632 <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <HAL_SPI_MspInit+0x80>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	4a16      	ldr	r2, [pc, #88]	; (8001640 <HAL_SPI_MspInit+0x80>)
 80015e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80015ec:	6593      	str	r3, [r2, #88]	; 0x58
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <HAL_SPI_MspInit+0x80>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <HAL_SPI_MspInit+0x80>)
 80015fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015fe:	4a10      	ldr	r2, [pc, #64]	; (8001640 <HAL_SPI_MspInit+0x80>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001606:	4b0e      	ldr	r3, [pc, #56]	; (8001640 <HAL_SPI_MspInit+0x80>)
 8001608:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001612:	2338      	movs	r3, #56	; 0x38
 8001614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001616:	2302      	movs	r3, #2
 8001618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161a:	2300      	movs	r3, #0
 800161c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161e:	2303      	movs	r3, #3
 8001620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001622:	2306      	movs	r3, #6
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001626:	f107 0314 	add.w	r3, r7, #20
 800162a:	4619      	mov	r1, r3
 800162c:	4805      	ldr	r0, [pc, #20]	; (8001644 <HAL_SPI_MspInit+0x84>)
 800162e:	f000 fbe7 	bl	8001e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40003c00 	.word	0x40003c00
 8001640:	40021000 	.word	0x40021000
 8001644:	48000400 	.word	0x48000400

08001648 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b0a0      	sub	sp, #128	; 0x80
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001660:	f107 0318 	add.w	r3, r7, #24
 8001664:	2254      	movs	r2, #84	; 0x54
 8001666:	2100      	movs	r1, #0
 8001668:	4618      	mov	r0, r3
 800166a:	f003 fddb 	bl	8005224 <memset>
  if(huart->Instance==USART1)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a42      	ldr	r2, [pc, #264]	; (800177c <HAL_UART_MspInit+0x134>)
 8001674:	4293      	cmp	r3, r2
 8001676:	d140      	bne.n	80016fa <HAL_UART_MspInit+0xb2>
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001678:	2301      	movs	r3, #1
 800167a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	f107 0318 	add.w	r3, r7, #24
 8001684:	4618      	mov	r0, r3
 8001686:	f001 fbd7 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001690:	f7ff fb18 	bl	8000cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001694:	4b3a      	ldr	r3, [pc, #232]	; (8001780 <HAL_UART_MspInit+0x138>)
 8001696:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001698:	4a39      	ldr	r2, [pc, #228]	; (8001780 <HAL_UART_MspInit+0x138>)
 800169a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169e:	6613      	str	r3, [r2, #96]	; 0x60
 80016a0:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_UART_MspInit+0x138>)
 80016a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a8:	617b      	str	r3, [r7, #20]
 80016aa:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_UART_MspInit+0x138>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a33      	ldr	r2, [pc, #204]	; (8001780 <HAL_UART_MspInit+0x138>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_UART_MspInit+0x138>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	613b      	str	r3, [r7, #16]
 80016c2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80016c4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80016c8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80016d6:	2307      	movs	r3, #7
 80016d8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80016de:	4619      	mov	r1, r3
 80016e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016e4:	f000 fb8c 	bl	8001e00 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80016e8:	2200      	movs	r2, #0
 80016ea:	2100      	movs	r1, #0
 80016ec:	2025      	movs	r0, #37	; 0x25
 80016ee:	f000 fad2 	bl	8001c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80016f2:	2025      	movs	r0, #37	; 0x25
 80016f4:	f000 faeb 	bl	8001cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80016f8:	e03b      	b.n	8001772 <HAL_UART_MspInit+0x12a>
  else if(huart->Instance==USART2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a21      	ldr	r2, [pc, #132]	; (8001784 <HAL_UART_MspInit+0x13c>)
 8001700:	4293      	cmp	r3, r2
 8001702:	d136      	bne.n	8001772 <HAL_UART_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001704:	2302      	movs	r3, #2
 8001706:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001708:	2300      	movs	r3, #0
 800170a:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fb91 	bl	8002e38 <HAL_RCCEx_PeriphCLKConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <HAL_UART_MspInit+0xd8>
      Error_Handler();
 800171c:	f7ff fad2 	bl	8000cc4 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001720:	4b17      	ldr	r3, [pc, #92]	; (8001780 <HAL_UART_MspInit+0x138>)
 8001722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001724:	4a16      	ldr	r2, [pc, #88]	; (8001780 <HAL_UART_MspInit+0x138>)
 8001726:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800172a:	6593      	str	r3, [r2, #88]	; 0x58
 800172c:	4b14      	ldr	r3, [pc, #80]	; (8001780 <HAL_UART_MspInit+0x138>)
 800172e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001730:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001734:	60fb      	str	r3, [r7, #12]
 8001736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_UART_MspInit+0x138>)
 800173a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173c:	4a10      	ldr	r2, [pc, #64]	; (8001780 <HAL_UART_MspInit+0x138>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001744:	4b0e      	ldr	r3, [pc, #56]	; (8001780 <HAL_UART_MspInit+0x138>)
 8001746:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001748:	f003 0301 	and.w	r3, r3, #1
 800174c:	60bb      	str	r3, [r7, #8]
 800174e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001750:	230c      	movs	r3, #12
 8001752:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800175c:	2303      	movs	r3, #3
 800175e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001760:	2307      	movs	r3, #7
 8001762:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001764:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001768:	4619      	mov	r1, r3
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f000 fb47 	bl	8001e00 <HAL_GPIO_Init>
}
 8001772:	bf00      	nop
 8001774:	3780      	adds	r7, #128	; 0x80
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	40013800 	.word	0x40013800
 8001780:	40021000 	.word	0x40021000
 8001784:	40004400 	.word	0x40004400

08001788 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800178c:	e7fe      	b.n	800178c <NMI_Handler+0x4>

0800178e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001792:	e7fe      	b.n	8001792 <HardFault_Handler+0x4>

08001794 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001798:	e7fe      	b.n	8001798 <MemManage_Handler+0x4>

0800179a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800179a:	b480      	push	{r7}
 800179c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800179e:	e7fe      	b.n	800179e <BusFault_Handler+0x4>

080017a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017a4:	e7fe      	b.n	80017a4 <UsageFault_Handler+0x4>

080017a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017a6:	b480      	push	{r7}
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017aa:	bf00      	nop
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr

080017c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017d4:	f000 f940 	bl	8001a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	bd80      	pop	{r7, pc}

080017dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <USART1_IRQHandler+0x10>)
 80017e2:	f002 fb61 	bl	8003ea8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	20000100 	.word	0x20000100

080017f0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80017fc:	2300      	movs	r3, #0
 80017fe:	617b      	str	r3, [r7, #20]
 8001800:	e00a      	b.n	8001818 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001802:	f3af 8000 	nop.w
 8001806:	4601      	mov	r1, r0
 8001808:	68bb      	ldr	r3, [r7, #8]
 800180a:	1c5a      	adds	r2, r3, #1
 800180c:	60ba      	str	r2, [r7, #8]
 800180e:	b2ca      	uxtb	r2, r1
 8001810:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	3301      	adds	r3, #1
 8001816:	617b      	str	r3, [r7, #20]
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	dbf0      	blt.n	8001802 <_read+0x12>
	}

return len;
 8001820:	687b      	ldr	r3, [r7, #4]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3718      	adds	r7, #24
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}

0800182a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800182a:	b580      	push	{r7, lr}
 800182c:	b086      	sub	sp, #24
 800182e:	af00      	add	r7, sp, #0
 8001830:	60f8      	str	r0, [r7, #12]
 8001832:	60b9      	str	r1, [r7, #8]
 8001834:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001836:	2300      	movs	r3, #0
 8001838:	617b      	str	r3, [r7, #20]
 800183a:	e009      	b.n	8001850 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	1c5a      	adds	r2, r3, #1
 8001840:	60ba      	str	r2, [r7, #8]
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	3301      	adds	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
 8001850:	697a      	ldr	r2, [r7, #20]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	429a      	cmp	r2, r3
 8001856:	dbf1      	blt.n	800183c <_write+0x12>
	}
	return len;
 8001858:	687b      	ldr	r3, [r7, #4]
}
 800185a:	4618      	mov	r0, r3
 800185c:	3718      	adds	r7, #24
 800185e:	46bd      	mov	sp, r7
 8001860:	bd80      	pop	{r7, pc}

08001862 <_close>:

int _close(int file)
{
 8001862:	b480      	push	{r7}
 8001864:	b083      	sub	sp, #12
 8001866:	af00      	add	r7, sp, #0
 8001868:	6078      	str	r0, [r7, #4]
	return -1;
 800186a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800186e:	4618      	mov	r0, r3
 8001870:	370c      	adds	r7, #12
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800187a:	b480      	push	{r7}
 800187c:	b083      	sub	sp, #12
 800187e:	af00      	add	r7, sp, #0
 8001880:	6078      	str	r0, [r7, #4]
 8001882:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800188a:	605a      	str	r2, [r3, #4]
	return 0;
 800188c:	2300      	movs	r3, #0
}
 800188e:	4618      	mov	r0, r3
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr

0800189a <_isatty>:

int _isatty(int file)
{
 800189a:	b480      	push	{r7}
 800189c:	b083      	sub	sp, #12
 800189e:	af00      	add	r7, sp, #0
 80018a0:	6078      	str	r0, [r7, #4]
	return 1;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b085      	sub	sp, #20
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	return 0;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
	...

080018cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b086      	sub	sp, #24
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80018d4:	4a14      	ldr	r2, [pc, #80]	; (8001928 <_sbrk+0x5c>)
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <_sbrk+0x60>)
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80018e0:	4b13      	ldr	r3, [pc, #76]	; (8001930 <_sbrk+0x64>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d102      	bne.n	80018ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80018e8:	4b11      	ldr	r3, [pc, #68]	; (8001930 <_sbrk+0x64>)
 80018ea:	4a12      	ldr	r2, [pc, #72]	; (8001934 <_sbrk+0x68>)
 80018ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <_sbrk+0x64>)
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4413      	add	r3, r2
 80018f6:	693a      	ldr	r2, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d207      	bcs.n	800190c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018fc:	f003 fc68 	bl	80051d0 <__errno>
 8001900:	4603      	mov	r3, r0
 8001902:	220c      	movs	r2, #12
 8001904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001906:	f04f 33ff 	mov.w	r3, #4294967295
 800190a:	e009      	b.n	8001920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800190c:	4b08      	ldr	r3, [pc, #32]	; (8001930 <_sbrk+0x64>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001912:	4b07      	ldr	r3, [pc, #28]	; (8001930 <_sbrk+0x64>)
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4413      	add	r3, r2
 800191a:	4a05      	ldr	r2, [pc, #20]	; (8001930 <_sbrk+0x64>)
 800191c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800191e:	68fb      	ldr	r3, [r7, #12]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	20010000 	.word	0x20010000
 800192c:	00000400 	.word	0x00000400
 8001930:	20000090 	.word	0x20000090
 8001934:	20000220 	.word	0x20000220

08001938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800193c:	4b06      	ldr	r3, [pc, #24]	; (8001958 <SystemInit+0x20>)
 800193e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001942:	4a05      	ldr	r2, [pc, #20]	; (8001958 <SystemInit+0x20>)
 8001944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800194c:	bf00      	nop
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800195c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001960:	f7ff ffea 	bl	8001938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001964:	480c      	ldr	r0, [pc, #48]	; (8001998 <LoopForever+0x6>)
  ldr r1, =_edata
 8001966:	490d      	ldr	r1, [pc, #52]	; (800199c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001968:	4a0d      	ldr	r2, [pc, #52]	; (80019a0 <LoopForever+0xe>)
  movs r3, #0
 800196a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800196c:	e002      	b.n	8001974 <LoopCopyDataInit>

0800196e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800196e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001972:	3304      	adds	r3, #4

08001974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001978:	d3f9      	bcc.n	800196e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800197a:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800197c:	4c0a      	ldr	r4, [pc, #40]	; (80019a8 <LoopForever+0x16>)
  movs r3, #0
 800197e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001980:	e001      	b.n	8001986 <LoopFillZerobss>

08001982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001984:	3204      	adds	r2, #4

08001986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001988:	d3fb      	bcc.n	8001982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800198a:	f003 fc27 	bl	80051dc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800198e:	f7fe ff29 	bl	80007e4 <main>

08001992 <LoopForever>:

LoopForever:
    b LoopForever
 8001992:	e7fe      	b.n	8001992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001994:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800199c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80019a0:	080067cc 	.word	0x080067cc
  ldr r2, =_sbss
 80019a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80019a8:	20000220 	.word	0x20000220

080019ac <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019ac:	e7fe      	b.n	80019ac <ADC1_IRQHandler>

080019ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b8:	2003      	movs	r0, #3
 80019ba:	f000 f961 	bl	8001c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80019be:	200f      	movs	r0, #15
 80019c0:	f000 f80e 	bl	80019e0 <HAL_InitTick>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	71fb      	strb	r3, [r7, #7]
 80019ce:	e001      	b.n	80019d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80019d0:	f7ff fdd2 	bl	8001578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80019d4:	79fb      	ldrb	r3, [r7, #7]
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b084      	sub	sp, #16
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019e8:	2300      	movs	r3, #0
 80019ea:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80019ec:	4b17      	ldr	r3, [pc, #92]	; (8001a4c <HAL_InitTick+0x6c>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d023      	beq.n	8001a3c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80019f4:	4b16      	ldr	r3, [pc, #88]	; (8001a50 <HAL_InitTick+0x70>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	4b14      	ldr	r3, [pc, #80]	; (8001a4c <HAL_InitTick+0x6c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	4619      	mov	r1, r3
 80019fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a02:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f000 f96d 	bl	8001cea <HAL_SYSTICK_Config>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d10f      	bne.n	8001a36 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	2b0f      	cmp	r3, #15
 8001a1a:	d809      	bhi.n	8001a30 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	6879      	ldr	r1, [r7, #4]
 8001a20:	f04f 30ff 	mov.w	r0, #4294967295
 8001a24:	f000 f937 	bl	8001c96 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a28:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_InitTick+0x74>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
 8001a2e:	e007      	b.n	8001a40 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001a30:	2301      	movs	r3, #1
 8001a32:	73fb      	strb	r3, [r7, #15]
 8001a34:	e004      	b.n	8001a40 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	73fb      	strb	r3, [r7, #15]
 8001a3a:	e001      	b.n	8001a40 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a40:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a42:	4618      	mov	r0, r3
 8001a44:	3710      	adds	r7, #16
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000000 	.word	0x20000000
 8001a54:	20000004 	.word	0x20000004

08001a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a5c:	4b06      	ldr	r3, [pc, #24]	; (8001a78 <HAL_IncTick+0x20>)
 8001a5e:	781b      	ldrb	r3, [r3, #0]
 8001a60:	461a      	mov	r2, r3
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_IncTick+0x24>)
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4413      	add	r3, r2
 8001a68:	4a04      	ldr	r2, [pc, #16]	; (8001a7c <HAL_IncTick+0x24>)
 8001a6a:	6013      	str	r3, [r2, #0]
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	20000008 	.word	0x20000008
 8001a7c:	2000020c 	.word	0x2000020c

08001a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	af00      	add	r7, sp, #0
  return uwTick;
 8001a84:	4b03      	ldr	r3, [pc, #12]	; (8001a94 <HAL_GetTick+0x14>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	2000020c 	.word	0x2000020c

08001a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001aa0:	f7ff ffee 	bl	8001a80 <HAL_GetTick>
 8001aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ab0:	d005      	beq.n	8001abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001ab2:	4b0a      	ldr	r3, [pc, #40]	; (8001adc <HAL_Delay+0x44>)
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	4413      	add	r3, r2
 8001abc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001abe:	bf00      	nop
 8001ac0:	f7ff ffde 	bl	8001a80 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	68fa      	ldr	r2, [r7, #12]
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d8f7      	bhi.n	8001ac0 <HAL_Delay+0x28>
  {
  }
}
 8001ad0:	bf00      	nop
 8001ad2:	bf00      	nop
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20000008 	.word	0x20000008

08001ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b085      	sub	sp, #20
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001af0:	4b0c      	ldr	r3, [pc, #48]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001af2:	68db      	ldr	r3, [r3, #12]
 8001af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001af6:	68ba      	ldr	r2, [r7, #8]
 8001af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001afc:	4013      	ands	r3, r2
 8001afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b04:	68bb      	ldr	r3, [r7, #8]
 8001b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b12:	4a04      	ldr	r2, [pc, #16]	; (8001b24 <__NVIC_SetPriorityGrouping+0x44>)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	60d3      	str	r3, [r2, #12]
}
 8001b18:	bf00      	nop
 8001b1a:	3714      	adds	r7, #20
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr
 8001b24:	e000ed00 	.word	0xe000ed00

08001b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b28:	b480      	push	{r7}
 8001b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <__NVIC_GetPriorityGrouping+0x18>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	0a1b      	lsrs	r3, r3, #8
 8001b32:	f003 0307 	and.w	r3, r3, #7
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	db0b      	blt.n	8001b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b56:	79fb      	ldrb	r3, [r7, #7]
 8001b58:	f003 021f 	and.w	r2, r3, #31
 8001b5c:	4907      	ldr	r1, [pc, #28]	; (8001b7c <__NVIC_EnableIRQ+0x38>)
 8001b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b62:	095b      	lsrs	r3, r3, #5
 8001b64:	2001      	movs	r0, #1
 8001b66:	fa00 f202 	lsl.w	r2, r0, r2
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	e000e100 	.word	0xe000e100

08001b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	6039      	str	r1, [r7, #0]
 8001b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	db0a      	blt.n	8001baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	b2da      	uxtb	r2, r3
 8001b98:	490c      	ldr	r1, [pc, #48]	; (8001bcc <__NVIC_SetPriority+0x4c>)
 8001b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9e:	0112      	lsls	r2, r2, #4
 8001ba0:	b2d2      	uxtb	r2, r2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ba8:	e00a      	b.n	8001bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	b2da      	uxtb	r2, r3
 8001bae:	4908      	ldr	r1, [pc, #32]	; (8001bd0 <__NVIC_SetPriority+0x50>)
 8001bb0:	79fb      	ldrb	r3, [r7, #7]
 8001bb2:	f003 030f 	and.w	r3, r3, #15
 8001bb6:	3b04      	subs	r3, #4
 8001bb8:	0112      	lsls	r2, r2, #4
 8001bba:	b2d2      	uxtb	r2, r2
 8001bbc:	440b      	add	r3, r1
 8001bbe:	761a      	strb	r2, [r3, #24]
}
 8001bc0:	bf00      	nop
 8001bc2:	370c      	adds	r7, #12
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	e000e100 	.word	0xe000e100
 8001bd0:	e000ed00 	.word	0xe000ed00

08001bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	60f8      	str	r0, [r7, #12]
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	f003 0307 	and.w	r3, r3, #7
 8001be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001be8:	69fb      	ldr	r3, [r7, #28]
 8001bea:	f1c3 0307 	rsb	r3, r3, #7
 8001bee:	2b04      	cmp	r3, #4
 8001bf0:	bf28      	it	cs
 8001bf2:	2304      	movcs	r3, #4
 8001bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	2b06      	cmp	r3, #6
 8001bfc:	d902      	bls.n	8001c04 <NVIC_EncodePriority+0x30>
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	3b03      	subs	r3, #3
 8001c02:	e000      	b.n	8001c06 <NVIC_EncodePriority+0x32>
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c08:	f04f 32ff 	mov.w	r2, #4294967295
 8001c0c:	69bb      	ldr	r3, [r7, #24]
 8001c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c12:	43da      	mvns	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	401a      	ands	r2, r3
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c1c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	fa01 f303 	lsl.w	r3, r1, r3
 8001c26:	43d9      	mvns	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c2c:	4313      	orrs	r3, r2
         );
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3724      	adds	r7, #36	; 0x24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b082      	sub	sp, #8
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3b01      	subs	r3, #1
 8001c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c4c:	d301      	bcc.n	8001c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c4e:	2301      	movs	r3, #1
 8001c50:	e00f      	b.n	8001c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c52:	4a0a      	ldr	r2, [pc, #40]	; (8001c7c <SysTick_Config+0x40>)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5a:	210f      	movs	r1, #15
 8001c5c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c60:	f7ff ff8e 	bl	8001b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c64:	4b05      	ldr	r3, [pc, #20]	; (8001c7c <SysTick_Config+0x40>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <SysTick_Config+0x40>)
 8001c6c:	2207      	movs	r2, #7
 8001c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3708      	adds	r7, #8
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	e000e010 	.word	0xe000e010

08001c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c88:	6878      	ldr	r0, [r7, #4]
 8001c8a:	f7ff ff29 	bl	8001ae0 <__NVIC_SetPriorityGrouping>
}
 8001c8e:	bf00      	nop
 8001c90:	3708      	adds	r7, #8
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}

08001c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c96:	b580      	push	{r7, lr}
 8001c98:	b086      	sub	sp, #24
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	60b9      	str	r1, [r7, #8]
 8001ca0:	607a      	str	r2, [r7, #4]
 8001ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff3e 	bl	8001b28 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff8e 	bl	8001bd4 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5d 	bl	8001b80 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <__NVIC_EnableIRQ>
}
 8001ce2:	bf00      	nop
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b082      	sub	sp, #8
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f7ff ffa2 	bl	8001c3c <SysTick_Config>
 8001cf8:	4603      	mov	r3, r0
}
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	3708      	adds	r7, #8
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bd80      	pop	{r7, pc}

08001d02 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001d02:	b480      	push	{r7}
 8001d04:	b085      	sub	sp, #20
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d008      	beq.n	8001d2c <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	e022      	b.n	8001d72 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f022 020e 	bic.w	r2, r2, #14
 8001d3a:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f022 0201 	bic.w	r2, r2, #1
 8001d4a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d50:	f003 021c 	and.w	r2, r3, #28
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d58:	2101      	movs	r1, #1
 8001d5a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d5e:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3714      	adds	r7, #20
 8001d76:	46bd      	mov	sp, r7
 8001d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7c:	4770      	bx	lr

08001d7e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001d86:	2300      	movs	r3, #0
 8001d88:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d005      	beq.n	8001da2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2204      	movs	r2, #4
 8001d9a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	73fb      	strb	r3, [r7, #15]
 8001da0:	e029      	b.n	8001df6 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f022 020e 	bic.w	r2, r2, #14
 8001db0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f003 021c 	and.w	r2, r3, #28
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	2101      	movs	r1, #1
 8001dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8001dd4:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2200      	movs	r2, #0
 8001de2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	4798      	blx	r3
    }
  }
  return status;
 8001df6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001df8:	4618      	mov	r0, r3
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b087      	sub	sp, #28
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e0e:	e148      	b.n	80020a2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	2101      	movs	r1, #1
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	fa01 f303 	lsl.w	r3, r1, r3
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	f000 813a 	beq.w	800209c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	f003 0303 	and.w	r3, r3, #3
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d005      	beq.n	8001e40 <HAL_GPIO_Init+0x40>
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 0303 	and.w	r3, r3, #3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d130      	bne.n	8001ea2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689b      	ldr	r3, [r3, #8]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001e46:	697b      	ldr	r3, [r7, #20]
 8001e48:	005b      	lsls	r3, r3, #1
 8001e4a:	2203      	movs	r2, #3
 8001e4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e50:	43db      	mvns	r3, r3
 8001e52:	693a      	ldr	r2, [r7, #16]
 8001e54:	4013      	ands	r3, r2
 8001e56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	68da      	ldr	r2, [r3, #12]
 8001e5c:	697b      	ldr	r3, [r7, #20]
 8001e5e:	005b      	lsls	r3, r3, #1
 8001e60:	fa02 f303 	lsl.w	r3, r2, r3
 8001e64:	693a      	ldr	r2, [r7, #16]
 8001e66:	4313      	orrs	r3, r2
 8001e68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e76:	2201      	movs	r2, #1
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	693a      	ldr	r2, [r7, #16]
 8001e82:	4013      	ands	r3, r2
 8001e84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	091b      	lsrs	r3, r3, #4
 8001e8c:	f003 0201 	and.w	r2, r3, #1
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 0303 	and.w	r3, r3, #3
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d017      	beq.n	8001ede <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	005b      	lsls	r3, r3, #1
 8001eb8:	2203      	movs	r2, #3
 8001eba:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebe:	43db      	mvns	r3, r3
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	689a      	ldr	r2, [r3, #8]
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	693a      	ldr	r2, [r7, #16]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f003 0303 	and.w	r3, r3, #3
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d123      	bne.n	8001f32 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	08da      	lsrs	r2, r3, #3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	3208      	adds	r2, #8
 8001ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f003 0307 	and.w	r3, r3, #7
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	220f      	movs	r2, #15
 8001f02:	fa02 f303 	lsl.w	r3, r2, r3
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	691a      	ldr	r2, [r3, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	f003 0307 	and.w	r3, r3, #7
 8001f18:	009b      	lsls	r3, r3, #2
 8001f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	08da      	lsrs	r2, r3, #3
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3208      	adds	r2, #8
 8001f2c:	6939      	ldr	r1, [r7, #16]
 8001f2e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	693a      	ldr	r2, [r7, #16]
 8001f46:	4013      	ands	r3, r2
 8001f48:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	685b      	ldr	r3, [r3, #4]
 8001f4e:	f003 0203 	and.w	r2, r3, #3
 8001f52:	697b      	ldr	r3, [r7, #20]
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 8094 	beq.w	800209c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f74:	4b52      	ldr	r3, [pc, #328]	; (80020c0 <HAL_GPIO_Init+0x2c0>)
 8001f76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f78:	4a51      	ldr	r2, [pc, #324]	; (80020c0 <HAL_GPIO_Init+0x2c0>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6613      	str	r3, [r2, #96]	; 0x60
 8001f80:	4b4f      	ldr	r3, [pc, #316]	; (80020c0 <HAL_GPIO_Init+0x2c0>)
 8001f82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f8c:	4a4d      	ldr	r2, [pc, #308]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	693a      	ldr	r2, [r7, #16]
 8001fac:	4013      	ands	r3, r2
 8001fae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001fb6:	d00d      	beq.n	8001fd4 <HAL_GPIO_Init+0x1d4>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a43      	ldr	r2, [pc, #268]	; (80020c8 <HAL_GPIO_Init+0x2c8>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d007      	beq.n	8001fd0 <HAL_GPIO_Init+0x1d0>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a42      	ldr	r2, [pc, #264]	; (80020cc <HAL_GPIO_Init+0x2cc>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d101      	bne.n	8001fcc <HAL_GPIO_Init+0x1cc>
 8001fc8:	2302      	movs	r3, #2
 8001fca:	e004      	b.n	8001fd6 <HAL_GPIO_Init+0x1d6>
 8001fcc:	2307      	movs	r3, #7
 8001fce:	e002      	b.n	8001fd6 <HAL_GPIO_Init+0x1d6>
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e000      	b.n	8001fd6 <HAL_GPIO_Init+0x1d6>
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	697a      	ldr	r2, [r7, #20]
 8001fd8:	f002 0203 	and.w	r2, r2, #3
 8001fdc:	0092      	lsls	r2, r2, #2
 8001fde:	4093      	lsls	r3, r2
 8001fe0:	693a      	ldr	r2, [r7, #16]
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001fe6:	4937      	ldr	r1, [pc, #220]	; (80020c4 <HAL_GPIO_Init+0x2c4>)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	089b      	lsrs	r3, r3, #2
 8001fec:	3302      	adds	r3, #2
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ff4:	4b36      	ldr	r3, [pc, #216]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	693a      	ldr	r2, [r7, #16]
 8002000:	4013      	ands	r3, r2
 8002002:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8002010:	693a      	ldr	r2, [r7, #16]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	4313      	orrs	r3, r2
 8002016:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002018:	4a2d      	ldr	r2, [pc, #180]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800201e:	4b2c      	ldr	r3, [pc, #176]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	43db      	mvns	r3, r3
 8002028:	693a      	ldr	r2, [r7, #16]
 800202a:	4013      	ands	r3, r2
 800202c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002036:	2b00      	cmp	r3, #0
 8002038:	d003      	beq.n	8002042 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800203a:	693a      	ldr	r2, [r7, #16]
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	4313      	orrs	r3, r2
 8002040:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002042:	4a23      	ldr	r2, [pc, #140]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002048:	4b21      	ldr	r3, [pc, #132]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	43db      	mvns	r3, r3
 8002052:	693a      	ldr	r2, [r7, #16]
 8002054:	4013      	ands	r3, r2
 8002056:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8002064:	693a      	ldr	r2, [r7, #16]
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	4313      	orrs	r3, r2
 800206a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800206c:	4a18      	ldr	r2, [pc, #96]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	43db      	mvns	r3, r3
 800207c:	693a      	ldr	r2, [r7, #16]
 800207e:	4013      	ands	r3, r2
 8002080:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d003      	beq.n	8002096 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	4313      	orrs	r3, r2
 8002094:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002096:	4a0e      	ldr	r2, [pc, #56]	; (80020d0 <HAL_GPIO_Init+0x2d0>)
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	3301      	adds	r3, #1
 80020a0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	fa22 f303 	lsr.w	r3, r2, r3
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	f47f aeaf 	bne.w	8001e10 <HAL_GPIO_Init+0x10>
  }
}
 80020b2:	bf00      	nop
 80020b4:	bf00      	nop
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	40010000 	.word	0x40010000
 80020c8:	48000400 	.word	0x48000400
 80020cc:	48000800 	.word	0x48000800
 80020d0:	40010400 	.word	0x40010400

080020d4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	460b      	mov	r3, r1
 80020de:	807b      	strh	r3, [r7, #2]
 80020e0:	4613      	mov	r3, r2
 80020e2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020e4:	787b      	ldrb	r3, [r7, #1]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d003      	beq.n	80020f2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80020ea:	887a      	ldrh	r2, [r7, #2]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80020f0:	e002      	b.n	80020f8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80020f2:	887a      	ldrh	r2, [r7, #2]
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002108:	4b04      	ldr	r3, [pc, #16]	; (800211c <HAL_PWREx_GetVoltageRange+0x18>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8002110:	4618      	mov	r0, r3
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000

08002120 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002120:	b480      	push	{r7}
 8002122:	b085      	sub	sp, #20
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800212e:	d130      	bne.n	8002192 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002130:	4b23      	ldr	r3, [pc, #140]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002138:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800213c:	d038      	beq.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800213e:	4b20      	ldr	r3, [pc, #128]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002146:	4a1e      	ldr	r2, [pc, #120]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002148:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800214c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800214e:	4b1d      	ldr	r3, [pc, #116]	; (80021c4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2232      	movs	r2, #50	; 0x32
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800215a:	fba2 2303 	umull	r2, r3, r2, r3
 800215e:	0c9b      	lsrs	r3, r3, #18
 8002160:	3301      	adds	r3, #1
 8002162:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002164:	e002      	b.n	800216c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	3b01      	subs	r3, #1
 800216a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800216c:	4b14      	ldr	r3, [pc, #80]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800216e:	695b      	ldr	r3, [r3, #20]
 8002170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002178:	d102      	bne.n	8002180 <HAL_PWREx_ControlVoltageScaling+0x60>
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d1f2      	bne.n	8002166 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002188:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800218c:	d110      	bne.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e00f      	b.n	80021b2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002192:	4b0b      	ldr	r3, [pc, #44]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800219a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800219e:	d007      	beq.n	80021b0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80021a8:	4a05      	ldr	r2, [pc, #20]	; (80021c0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80021aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80021ae:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3714      	adds	r7, #20
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	40007000 	.word	0x40007000
 80021c4:	20000000 	.word	0x20000000
 80021c8:	431bde83 	.word	0x431bde83

080021cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b088      	sub	sp, #32
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d101      	bne.n	80021de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e3fe      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021de:	4ba1      	ldr	r3, [pc, #644]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e8:	4b9e      	ldr	r3, [pc, #632]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f003 0303 	and.w	r3, r3, #3
 80021f0:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0310 	and.w	r3, r3, #16
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	f000 80e4 	beq.w	80023c8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002200:	69bb      	ldr	r3, [r7, #24]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d007      	beq.n	8002216 <HAL_RCC_OscConfig+0x4a>
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b0c      	cmp	r3, #12
 800220a:	f040 808b 	bne.w	8002324 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	2b01      	cmp	r3, #1
 8002212:	f040 8087 	bne.w	8002324 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002216:	4b93      	ldr	r3, [pc, #588]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d005      	beq.n	800222e <HAL_RCC_OscConfig+0x62>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d101      	bne.n	800222e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	e3d6      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f003 0308 	and.w	r3, r3, #8
 800223a:	2b00      	cmp	r3, #0
 800223c:	d004      	beq.n	8002248 <HAL_RCC_OscConfig+0x7c>
 800223e:	4b89      	ldr	r3, [pc, #548]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002246:	e005      	b.n	8002254 <HAL_RCC_OscConfig+0x88>
 8002248:	4b86      	ldr	r3, [pc, #536]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800224a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800224e:	091b      	lsrs	r3, r3, #4
 8002250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002254:	4293      	cmp	r3, r2
 8002256:	d223      	bcs.n	80022a0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4618      	mov	r0, r3
 800225e:	f000 fd8b 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 8002262:	4603      	mov	r3, r0
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002268:	2301      	movs	r3, #1
 800226a:	e3b7      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800226c:	4b7d      	ldr	r3, [pc, #500]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a7c      	ldr	r2, [pc, #496]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6013      	str	r3, [r2, #0]
 8002278:	4b7a      	ldr	r3, [pc, #488]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6a1b      	ldr	r3, [r3, #32]
 8002284:	4977      	ldr	r1, [pc, #476]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002286:	4313      	orrs	r3, r2
 8002288:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800228a:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	021b      	lsls	r3, r3, #8
 8002298:	4972      	ldr	r1, [pc, #456]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	e025      	b.n	80022ec <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80022a0:	4b70      	ldr	r3, [pc, #448]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a6f      	ldr	r2, [pc, #444]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022a6:	f043 0308 	orr.w	r3, r3, #8
 80022aa:	6013      	str	r3, [r2, #0]
 80022ac:	4b6d      	ldr	r3, [pc, #436]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6a1b      	ldr	r3, [r3, #32]
 80022b8:	496a      	ldr	r1, [pc, #424]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80022be:	4b69      	ldr	r3, [pc, #420]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69db      	ldr	r3, [r3, #28]
 80022ca:	021b      	lsls	r3, r3, #8
 80022cc:	4965      	ldr	r1, [pc, #404]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d2:	69bb      	ldr	r3, [r7, #24]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d109      	bne.n	80022ec <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	4618      	mov	r0, r3
 80022de:	f000 fd4b 	bl	8002d78 <RCC_SetFlashLatencyFromMSIRange>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e377      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80022ec:	f000 fc80 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 80022f0:	4602      	mov	r2, r0
 80022f2:	4b5c      	ldr	r3, [pc, #368]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	091b      	lsrs	r3, r3, #4
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	495a      	ldr	r1, [pc, #360]	; (8002468 <HAL_RCC_OscConfig+0x29c>)
 80022fe:	5ccb      	ldrb	r3, [r1, r3]
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	fa22 f303 	lsr.w	r3, r2, r3
 8002308:	4a58      	ldr	r2, [pc, #352]	; (800246c <HAL_RCC_OscConfig+0x2a0>)
 800230a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800230c:	4b58      	ldr	r3, [pc, #352]	; (8002470 <HAL_RCC_OscConfig+0x2a4>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff fb65 	bl	80019e0 <HAL_InitTick>
 8002316:	4603      	mov	r3, r0
 8002318:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800231a:	7bfb      	ldrb	r3, [r7, #15]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d052      	beq.n	80023c6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002320:	7bfb      	ldrb	r3, [r7, #15]
 8002322:	e35b      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d032      	beq.n	8002392 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800232c:	4b4d      	ldr	r3, [pc, #308]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a4c      	ldr	r2, [pc, #304]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002332:	f043 0301 	orr.w	r3, r3, #1
 8002336:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002338:	f7ff fba2 	bl	8001a80 <HAL_GetTick>
 800233c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800233e:	e008      	b.n	8002352 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002340:	f7ff fb9e 	bl	8001a80 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d901      	bls.n	8002352 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 800234e:	2303      	movs	r3, #3
 8002350:	e344      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002352:	4b44      	ldr	r3, [pc, #272]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0302 	and.w	r3, r3, #2
 800235a:	2b00      	cmp	r3, #0
 800235c:	d0f0      	beq.n	8002340 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800235e:	4b41      	ldr	r3, [pc, #260]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a40      	ldr	r2, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002364:	f043 0308 	orr.w	r3, r3, #8
 8002368:	6013      	str	r3, [r2, #0]
 800236a:	4b3e      	ldr	r3, [pc, #248]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	493b      	ldr	r1, [pc, #236]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002378:	4313      	orrs	r3, r2
 800237a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800237c:	4b39      	ldr	r3, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800237e:	685b      	ldr	r3, [r3, #4]
 8002380:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	69db      	ldr	r3, [r3, #28]
 8002388:	021b      	lsls	r3, r3, #8
 800238a:	4936      	ldr	r1, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800238c:	4313      	orrs	r3, r2
 800238e:	604b      	str	r3, [r1, #4]
 8002390:	e01a      	b.n	80023c8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002392:	4b34      	ldr	r3, [pc, #208]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4a33      	ldr	r2, [pc, #204]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002398:	f023 0301 	bic.w	r3, r3, #1
 800239c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800239e:	f7ff fb6f 	bl	8001a80 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023a4:	e008      	b.n	80023b8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80023a6:	f7ff fb6b 	bl	8001a80 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d901      	bls.n	80023b8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80023b4:	2303      	movs	r3, #3
 80023b6:	e311      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80023b8:	4b2a      	ldr	r3, [pc, #168]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1f0      	bne.n	80023a6 <HAL_RCC_OscConfig+0x1da>
 80023c4:	e000      	b.n	80023c8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80023c6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0301 	and.w	r3, r3, #1
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d074      	beq.n	80024be <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d005      	beq.n	80023e6 <HAL_RCC_OscConfig+0x21a>
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	2b0c      	cmp	r3, #12
 80023de:	d10e      	bne.n	80023fe <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b03      	cmp	r3, #3
 80023e4:	d10b      	bne.n	80023fe <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d064      	beq.n	80024bc <HAL_RCC_OscConfig+0x2f0>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d160      	bne.n	80024bc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e2ee      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002406:	d106      	bne.n	8002416 <HAL_RCC_OscConfig+0x24a>
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800240e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002412:	6013      	str	r3, [r2, #0]
 8002414:	e01d      	b.n	8002452 <HAL_RCC_OscConfig+0x286>
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800241e:	d10c      	bne.n	800243a <HAL_RCC_OscConfig+0x26e>
 8002420:	4b10      	ldr	r3, [pc, #64]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a0f      	ldr	r2, [pc, #60]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002426:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242a:	6013      	str	r3, [r2, #0]
 800242c:	4b0d      	ldr	r3, [pc, #52]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a0c      	ldr	r2, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002432:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002436:	6013      	str	r3, [r2, #0]
 8002438:	e00b      	b.n	8002452 <HAL_RCC_OscConfig+0x286>
 800243a:	4b0a      	ldr	r3, [pc, #40]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a09      	ldr	r2, [pc, #36]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	4b07      	ldr	r3, [pc, #28]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	4a06      	ldr	r2, [pc, #24]	; (8002464 <HAL_RCC_OscConfig+0x298>)
 800244c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002450:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d01c      	beq.n	8002494 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245a:	f7ff fb11 	bl	8001a80 <HAL_GetTick>
 800245e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002460:	e011      	b.n	8002486 <HAL_RCC_OscConfig+0x2ba>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	080066dc 	.word	0x080066dc
 800246c:	20000000 	.word	0x20000000
 8002470:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002474:	f7ff fb04 	bl	8001a80 <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b64      	cmp	r3, #100	; 0x64
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e2aa      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4baf      	ldr	r3, [pc, #700]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x2a8>
 8002492:	e014      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002494:	f7ff faf4 	bl	8001a80 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800249c:	f7ff faf0 	bl	8001a80 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b64      	cmp	r3, #100	; 0x64
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e296      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80024ae:	4ba5      	ldr	r3, [pc, #660]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d1f0      	bne.n	800249c <HAL_RCC_OscConfig+0x2d0>
 80024ba:	e000      	b.n	80024be <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d060      	beq.n	800258c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d005      	beq.n	80024dc <HAL_RCC_OscConfig+0x310>
 80024d0:	69bb      	ldr	r3, [r7, #24]
 80024d2:	2b0c      	cmp	r3, #12
 80024d4:	d119      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d116      	bne.n	800250a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024dc:	4b99      	ldr	r3, [pc, #612]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d005      	beq.n	80024f4 <HAL_RCC_OscConfig+0x328>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80024f0:	2301      	movs	r3, #1
 80024f2:	e273      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b93      	ldr	r3, [pc, #588]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	4990      	ldr	r1, [pc, #576]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002508:	e040      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	2b00      	cmp	r3, #0
 8002510:	d023      	beq.n	800255a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002512:	4b8c      	ldr	r3, [pc, #560]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4a8b      	ldr	r2, [pc, #556]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251e:	f7ff faaf 	bl	8001a80 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002526:	f7ff faab 	bl	8001a80 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e251      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002538:	4b82      	ldr	r3, [pc, #520]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002540:	2b00      	cmp	r3, #0
 8002542:	d0f0      	beq.n	8002526 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002544:	4b7f      	ldr	r3, [pc, #508]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	691b      	ldr	r3, [r3, #16]
 8002550:	061b      	lsls	r3, r3, #24
 8002552:	497c      	ldr	r1, [pc, #496]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002554:	4313      	orrs	r3, r2
 8002556:	604b      	str	r3, [r1, #4]
 8002558:	e018      	b.n	800258c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800255a:	4b7a      	ldr	r3, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a79      	ldr	r2, [pc, #484]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002560:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002566:	f7ff fa8b 	bl	8001a80 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800256c:	e008      	b.n	8002580 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800256e:	f7ff fa87 	bl	8001a80 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	2b02      	cmp	r3, #2
 800257a:	d901      	bls.n	8002580 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800257c:	2303      	movs	r3, #3
 800257e:	e22d      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002580:	4b70      	ldr	r3, [pc, #448]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1f0      	bne.n	800256e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0308 	and.w	r3, r3, #8
 8002594:	2b00      	cmp	r3, #0
 8002596:	d03c      	beq.n	8002612 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	695b      	ldr	r3, [r3, #20]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d01c      	beq.n	80025da <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025a0:	4b68      	ldr	r3, [pc, #416]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80025a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025a6:	4a67      	ldr	r2, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80025a8:	f043 0301 	orr.w	r3, r3, #1
 80025ac:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025b0:	f7ff fa66 	bl	8001a80 <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025b8:	f7ff fa62 	bl	8001a80 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e208      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80025ca:	4b5e      	ldr	r3, [pc, #376]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80025cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025d0:	f003 0302 	and.w	r3, r3, #2
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d0ef      	beq.n	80025b8 <HAL_RCC_OscConfig+0x3ec>
 80025d8:	e01b      	b.n	8002612 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025da:	4b5a      	ldr	r3, [pc, #360]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80025dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025e0:	4a58      	ldr	r2, [pc, #352]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80025e2:	f023 0301 	bic.w	r3, r3, #1
 80025e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ea:	f7ff fa49 	bl	8001a80 <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f2:	f7ff fa45 	bl	8001a80 <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1eb      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002604:	4b4f      	ldr	r3, [pc, #316]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800260a:	f003 0302 	and.w	r3, r3, #2
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1ef      	bne.n	80025f2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f003 0304 	and.w	r3, r3, #4
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 80a6 	beq.w	800276c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002620:	2300      	movs	r3, #0
 8002622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002624:	4b47      	ldr	r3, [pc, #284]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10d      	bne.n	800264c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002630:	4b44      	ldr	r3, [pc, #272]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002632:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002634:	4a43      	ldr	r2, [pc, #268]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002636:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263a:	6593      	str	r3, [r2, #88]	; 0x58
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002644:	60bb      	str	r3, [r7, #8]
 8002646:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002648:	2301      	movs	r3, #1
 800264a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264c:	4b3e      	ldr	r3, [pc, #248]	; (8002748 <HAL_RCC_OscConfig+0x57c>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002654:	2b00      	cmp	r3, #0
 8002656:	d118      	bne.n	800268a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002658:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <HAL_RCC_OscConfig+0x57c>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a3a      	ldr	r2, [pc, #232]	; (8002748 <HAL_RCC_OscConfig+0x57c>)
 800265e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002662:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002664:	f7ff fa0c 	bl	8001a80 <HAL_GetTick>
 8002668:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266a:	e008      	b.n	800267e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266c:	f7ff fa08 	bl	8001a80 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d901      	bls.n	800267e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	e1ae      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800267e:	4b32      	ldr	r3, [pc, #200]	; (8002748 <HAL_RCC_OscConfig+0x57c>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002686:	2b00      	cmp	r3, #0
 8002688:	d0f0      	beq.n	800266c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d108      	bne.n	80026a4 <HAL_RCC_OscConfig+0x4d8>
 8002692:	4b2c      	ldr	r3, [pc, #176]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002698:	4a2a      	ldr	r2, [pc, #168]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026a2:	e024      	b.n	80026ee <HAL_RCC_OscConfig+0x522>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b05      	cmp	r3, #5
 80026aa:	d110      	bne.n	80026ce <HAL_RCC_OscConfig+0x502>
 80026ac:	4b25      	ldr	r3, [pc, #148]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026b2:	4a24      	ldr	r2, [pc, #144]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026b4:	f043 0304 	orr.w	r3, r3, #4
 80026b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026bc:	4b21      	ldr	r3, [pc, #132]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c2:	4a20      	ldr	r2, [pc, #128]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026c4:	f043 0301 	orr.w	r3, r3, #1
 80026c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026cc:	e00f      	b.n	80026ee <HAL_RCC_OscConfig+0x522>
 80026ce:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d4:	4a1b      	ldr	r2, [pc, #108]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80026de:	4b19      	ldr	r3, [pc, #100]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e4:	4a17      	ldr	r2, [pc, #92]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 80026e6:	f023 0304 	bic.w	r3, r3, #4
 80026ea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d016      	beq.n	8002724 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026f6:	f7ff f9c3 	bl	8001a80 <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff f9bf 	bl	8001a80 <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	; 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e163      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_OscConfig+0x578>)
 8002716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0ed      	beq.n	80026fe <HAL_RCC_OscConfig+0x532>
 8002722:	e01a      	b.n	800275a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff f9ac 	bl	8001a80 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800272a:	e00f      	b.n	800274c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff f9a8 	bl	8001a80 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d906      	bls.n	800274c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e14c      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
 8002742:	bf00      	nop
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800274c:	4ba5      	ldr	r3, [pc, #660]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1e8      	bne.n	800272c <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275a:	7ffb      	ldrb	r3, [r7, #31]
 800275c:	2b01      	cmp	r3, #1
 800275e:	d105      	bne.n	800276c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002760:	4ba0      	ldr	r3, [pc, #640]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a9f      	ldr	r2, [pc, #636]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0320 	and.w	r3, r3, #32
 8002774:	2b00      	cmp	r3, #0
 8002776:	d03c      	beq.n	80027f2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d01c      	beq.n	80027ba <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002780:	4b98      	ldr	r3, [pc, #608]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002786:	4a97      	ldr	r2, [pc, #604]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002788:	f043 0301 	orr.w	r3, r3, #1
 800278c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7ff f976 	bl	8001a80 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002798:	f7ff f972 	bl	8001a80 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e118      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80027aa:	4b8e      	ldr	r3, [pc, #568]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80027ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d0ef      	beq.n	8002798 <HAL_RCC_OscConfig+0x5cc>
 80027b8:	e01b      	b.n	80027f2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80027ba:	4b8a      	ldr	r3, [pc, #552]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80027bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027c0:	4a88      	ldr	r2, [pc, #544]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80027c2:	f023 0301 	bic.w	r3, r3, #1
 80027c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027ca:	f7ff f959 	bl	8001a80 <HAL_GetTick>
 80027ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027d0:	e008      	b.n	80027e4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80027d2:	f7ff f955 	bl	8001a80 <HAL_GetTick>
 80027d6:	4602      	mov	r2, r0
 80027d8:	693b      	ldr	r3, [r7, #16]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	2b02      	cmp	r3, #2
 80027de:	d901      	bls.n	80027e4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80027e0:	2303      	movs	r3, #3
 80027e2:	e0fb      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80027e4:	4b7f      	ldr	r3, [pc, #508]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80027e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d1ef      	bne.n	80027d2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	f000 80ef 	beq.w	80029da <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002800:	2b02      	cmp	r3, #2
 8002802:	f040 80c5 	bne.w	8002990 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002806:	4b77      	ldr	r3, [pc, #476]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002808:	68db      	ldr	r3, [r3, #12]
 800280a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800280c:	697b      	ldr	r3, [r7, #20]
 800280e:	f003 0203 	and.w	r2, r3, #3
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002816:	429a      	cmp	r2, r3
 8002818:	d12c      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002824:	3b01      	subs	r3, #1
 8002826:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002828:	429a      	cmp	r2, r3
 800282a:	d123      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002836:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d11b      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002846:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002848:	429a      	cmp	r2, r3
 800284a:	d113      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800284c:	697b      	ldr	r3, [r7, #20]
 800284e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	3b01      	subs	r3, #1
 800285a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800285c:	429a      	cmp	r2, r3
 800285e:	d109      	bne.n	8002874 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002860:	697b      	ldr	r3, [r7, #20]
 8002862:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	085b      	lsrs	r3, r3, #1
 800286c:	3b01      	subs	r3, #1
 800286e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d067      	beq.n	8002944 <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	2b0c      	cmp	r3, #12
 8002878:	d062      	beq.n	8002940 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800287a:	4b5a      	ldr	r3, [pc, #360]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d001      	beq.n	800288a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0a8      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800288a:	4b56      	ldr	r3, [pc, #344]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a55      	ldr	r2, [pc, #340]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002890:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002894:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002896:	f7ff f8f3 	bl	8001a80 <HAL_GetTick>
 800289a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800289c:	e008      	b.n	80028b0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800289e:	f7ff f8ef 	bl	8001a80 <HAL_GetTick>
 80028a2:	4602      	mov	r2, r0
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1ad3      	subs	r3, r2, r3
 80028a8:	2b02      	cmp	r3, #2
 80028aa:	d901      	bls.n	80028b0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e095      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80028b0:	4b4c      	ldr	r3, [pc, #304]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d1f0      	bne.n	800289e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028bc:	4b49      	ldr	r3, [pc, #292]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80028be:	68da      	ldr	r2, [r3, #12]
 80028c0:	4b49      	ldr	r3, [pc, #292]	; (80029e8 <HAL_RCC_OscConfig+0x81c>)
 80028c2:	4013      	ands	r3, r2
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80028cc:	3a01      	subs	r2, #1
 80028ce:	0112      	lsls	r2, r2, #4
 80028d0:	4311      	orrs	r1, r2
 80028d2:	687a      	ldr	r2, [r7, #4]
 80028d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80028d6:	0212      	lsls	r2, r2, #8
 80028d8:	4311      	orrs	r1, r2
 80028da:	687a      	ldr	r2, [r7, #4]
 80028dc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80028de:	0852      	lsrs	r2, r2, #1
 80028e0:	3a01      	subs	r2, #1
 80028e2:	0552      	lsls	r2, r2, #21
 80028e4:	4311      	orrs	r1, r2
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80028ea:	0852      	lsrs	r2, r2, #1
 80028ec:	3a01      	subs	r2, #1
 80028ee:	0652      	lsls	r2, r2, #25
 80028f0:	4311      	orrs	r1, r2
 80028f2:	687a      	ldr	r2, [r7, #4]
 80028f4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80028f6:	06d2      	lsls	r2, r2, #27
 80028f8:	430a      	orrs	r2, r1
 80028fa:	493a      	ldr	r1, [pc, #232]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80028fc:	4313      	orrs	r3, r2
 80028fe:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002900:	4b38      	ldr	r3, [pc, #224]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a37      	ldr	r2, [pc, #220]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b35      	ldr	r3, [pc, #212]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a34      	ldr	r2, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002918:	f7ff f8b2 	bl	8001a80 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f8ae 	bl	8001a80 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e054      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b2c      	ldr	r3, [pc, #176]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800293e:	e04c      	b.n	80029da <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	e04b      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002944:	4b27      	ldr	r3, [pc, #156]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d144      	bne.n	80029da <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002950:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002956:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800295a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800295c:	4b21      	ldr	r3, [pc, #132]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4a20      	ldr	r2, [pc, #128]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002962:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002966:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002968:	f7ff f88a 	bl	8001a80 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7ff f886 	bl	8001a80 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e02c      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002982:	4b18      	ldr	r3, [pc, #96]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x7a4>
 800298e:	e024      	b.n	80029da <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b0c      	cmp	r3, #12
 8002994:	d01f      	beq.n	80029d6 <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002996:	4b13      	ldr	r3, [pc, #76]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a12      	ldr	r2, [pc, #72]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 800299c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029a2:	f7ff f86d 	bl	8001a80 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029a8:	e008      	b.n	80029bc <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029aa:	f7ff f869 	bl	8001a80 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d901      	bls.n	80029bc <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80029b8:	2303      	movs	r3, #3
 80029ba:	e00f      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80029bc:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1f0      	bne.n	80029aa <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80029c8:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80029ca:	68da      	ldr	r2, [r3, #12]
 80029cc:	4905      	ldr	r1, [pc, #20]	; (80029e4 <HAL_RCC_OscConfig+0x818>)
 80029ce:	4b07      	ldr	r3, [pc, #28]	; (80029ec <HAL_RCC_OscConfig+0x820>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	60cb      	str	r3, [r1, #12]
 80029d4:	e001      	b.n	80029da <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e000      	b.n	80029dc <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40021000 	.word	0x40021000
 80029e8:	019d808c 	.word	0x019d808c
 80029ec:	feeefffc 	.word	0xfeeefffc

080029f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	b084      	sub	sp, #16
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d101      	bne.n	8002a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e0e7      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a04:	4b75      	ldr	r3, [pc, #468]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0307 	and.w	r3, r3, #7
 8002a0c:	683a      	ldr	r2, [r7, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d910      	bls.n	8002a34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a12:	4b72      	ldr	r3, [pc, #456]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f023 0207 	bic.w	r2, r3, #7
 8002a1a:	4970      	ldr	r1, [pc, #448]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b6e      	ldr	r3, [pc, #440]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e0cf      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d010      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	4b66      	ldr	r3, [pc, #408]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d908      	bls.n	8002a62 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a50:	4b63      	ldr	r3, [pc, #396]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	4960      	ldr	r1, [pc, #384]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d04c      	beq.n	8002b08 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	685b      	ldr	r3, [r3, #4]
 8002a72:	2b03      	cmp	r3, #3
 8002a74:	d107      	bne.n	8002a86 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a76:	4b5a      	ldr	r3, [pc, #360]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d121      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e0a6      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d107      	bne.n	8002a9e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a8e:	4b54      	ldr	r3, [pc, #336]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d115      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	e09a      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d107      	bne.n	8002ab6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002aa6:	4b4e      	ldr	r3, [pc, #312]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d109      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	e08e      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ab6:	4b4a      	ldr	r3, [pc, #296]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d101      	bne.n	8002ac6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e086      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ac6:	4b46      	ldr	r3, [pc, #280]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f023 0203 	bic.w	r2, r3, #3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	4943      	ldr	r1, [pc, #268]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ad8:	f7fe ffd2 	bl	8001a80 <HAL_GetTick>
 8002adc:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ade:	e00a      	b.n	8002af6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ae0:	f7fe ffce 	bl	8001a80 <HAL_GetTick>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1ad3      	subs	r3, r2, r3
 8002aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d901      	bls.n	8002af6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002af2:	2303      	movs	r3, #3
 8002af4:	e06e      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002af6:	4b3a      	ldr	r3, [pc, #232]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f003 020c 	and.w	r2, r3, #12
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	009b      	lsls	r3, r3, #2
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d1eb      	bne.n	8002ae0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d010      	beq.n	8002b36 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	689a      	ldr	r2, [r3, #8]
 8002b18:	4b31      	ldr	r3, [pc, #196]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d208      	bcs.n	8002b36 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b24:	4b2e      	ldr	r3, [pc, #184]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	492b      	ldr	r1, [pc, #172]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b36:	4b29      	ldr	r3, [pc, #164]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d210      	bcs.n	8002b66 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b44:	4b25      	ldr	r3, [pc, #148]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 0207 	bic.w	r2, r3, #7
 8002b4c:	4923      	ldr	r1, [pc, #140]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b54:	4b21      	ldr	r3, [pc, #132]	; (8002bdc <HAL_RCC_ClockConfig+0x1ec>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e036      	b.n	8002bd4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d008      	beq.n	8002b84 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
 8002b7e:	4918      	ldr	r1, [pc, #96]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b80:	4313      	orrs	r3, r2
 8002b82:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d009      	beq.n	8002ba4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b90:	4b13      	ldr	r3, [pc, #76]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	00db      	lsls	r3, r3, #3
 8002b9e:	4910      	ldr	r1, [pc, #64]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002ba4:	f000 f824 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b0d      	ldr	r3, [pc, #52]	; (8002be0 <HAL_RCC_ClockConfig+0x1f0>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	091b      	lsrs	r3, r3, #4
 8002bb0:	f003 030f 	and.w	r3, r3, #15
 8002bb4:	490b      	ldr	r1, [pc, #44]	; (8002be4 <HAL_RCC_ClockConfig+0x1f4>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
 8002bc0:	4a09      	ldr	r2, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1f8>)
 8002bc2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002bc4:	4b09      	ldr	r3, [pc, #36]	; (8002bec <HAL_RCC_ClockConfig+0x1fc>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7fe ff09 	bl	80019e0 <HAL_InitTick>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	72fb      	strb	r3, [r7, #11]

  return status;
 8002bd2:	7afb      	ldrb	r3, [r7, #11]
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	3710      	adds	r7, #16
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	bd80      	pop	{r7, pc}
 8002bdc:	40022000 	.word	0x40022000
 8002be0:	40021000 	.word	0x40021000
 8002be4:	080066dc 	.word	0x080066dc
 8002be8:	20000000 	.word	0x20000000
 8002bec:	20000004 	.word	0x20000004

08002bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b089      	sub	sp, #36	; 0x24
 8002bf4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfe:	4b3e      	ldr	r3, [pc, #248]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c08:	4b3b      	ldr	r3, [pc, #236]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c0a:	68db      	ldr	r3, [r3, #12]
 8002c0c:	f003 0303 	and.w	r3, r3, #3
 8002c10:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d005      	beq.n	8002c24 <HAL_RCC_GetSysClockFreq+0x34>
 8002c18:	693b      	ldr	r3, [r7, #16]
 8002c1a:	2b0c      	cmp	r3, #12
 8002c1c:	d121      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d11e      	bne.n	8002c62 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002c24:	4b34      	ldr	r3, [pc, #208]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f003 0308 	and.w	r3, r3, #8
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d107      	bne.n	8002c40 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002c36:	0a1b      	lsrs	r3, r3, #8
 8002c38:	f003 030f 	and.w	r3, r3, #15
 8002c3c:	61fb      	str	r3, [r7, #28]
 8002c3e:	e005      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002c40:	4b2d      	ldr	r3, [pc, #180]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	091b      	lsrs	r3, r3, #4
 8002c46:	f003 030f 	and.w	r3, r3, #15
 8002c4a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002c4c:	4a2b      	ldr	r2, [pc, #172]	; (8002cfc <HAL_RCC_GetSysClockFreq+0x10c>)
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c54:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d10d      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c5c:	69fb      	ldr	r3, [r7, #28]
 8002c5e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c60:	e00a      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	2b04      	cmp	r3, #4
 8002c66:	d102      	bne.n	8002c6e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c68:	4b25      	ldr	r3, [pc, #148]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c6a:	61bb      	str	r3, [r7, #24]
 8002c6c:	e004      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d101      	bne.n	8002c78 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c74:	4b23      	ldr	r3, [pc, #140]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c76:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	2b0c      	cmp	r3, #12
 8002c7c:	d134      	bne.n	8002ce8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c7e:	4b1e      	ldr	r3, [pc, #120]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d003      	beq.n	8002c96 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	2b03      	cmp	r3, #3
 8002c92:	d003      	beq.n	8002c9c <HAL_RCC_GetSysClockFreq+0xac>
 8002c94:	e005      	b.n	8002ca2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c96:	4b1a      	ldr	r3, [pc, #104]	; (8002d00 <HAL_RCC_GetSysClockFreq+0x110>)
 8002c98:	617b      	str	r3, [r7, #20]
      break;
 8002c9a:	e005      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c9e:	617b      	str	r3, [r7, #20]
      break;
 8002ca0:	e002      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	617b      	str	r3, [r7, #20]
      break;
 8002ca6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ca8:	4b13      	ldr	r3, [pc, #76]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	091b      	lsrs	r3, r3, #4
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002cb6:	4b10      	ldr	r3, [pc, #64]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	0a1b      	lsrs	r3, r3, #8
 8002cbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002cc0:	697a      	ldr	r2, [r7, #20]
 8002cc2:	fb02 f203 	mul.w	r2, r2, r3
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ccc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	0e5b      	lsrs	r3, r3, #25
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	3301      	adds	r3, #1
 8002cda:	005b      	lsls	r3, r3, #1
 8002cdc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ce8:	69bb      	ldr	r3, [r7, #24]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3724      	adds	r7, #36	; 0x24
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr
 8002cf6:	bf00      	nop
 8002cf8:	40021000 	.word	0x40021000
 8002cfc:	080066f4 	.word	0x080066f4
 8002d00:	00f42400 	.word	0x00f42400
 8002d04:	007a1200 	.word	0x007a1200

08002d08 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d0c:	4b03      	ldr	r3, [pc, #12]	; (8002d1c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000000 	.word	0x20000000

08002d20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002d24:	f7ff fff0 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	4b06      	ldr	r3, [pc, #24]	; (8002d44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	0a1b      	lsrs	r3, r3, #8
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	4904      	ldr	r1, [pc, #16]	; (8002d48 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d36:	5ccb      	ldrb	r3, [r1, r3]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	40021000 	.word	0x40021000
 8002d48:	080066ec 	.word	0x080066ec

08002d4c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002d50:	f7ff ffda 	bl	8002d08 <HAL_RCC_GetHCLKFreq>
 8002d54:	4602      	mov	r2, r0
 8002d56:	4b06      	ldr	r3, [pc, #24]	; (8002d70 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d58:	689b      	ldr	r3, [r3, #8]
 8002d5a:	0adb      	lsrs	r3, r3, #11
 8002d5c:	f003 0307 	and.w	r3, r3, #7
 8002d60:	4904      	ldr	r1, [pc, #16]	; (8002d74 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d62:	5ccb      	ldrb	r3, [r1, r3]
 8002d64:	f003 031f 	and.w	r3, r3, #31
 8002d68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40021000 	.word	0x40021000
 8002d74:	080066ec 	.word	0x080066ec

08002d78 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d80:	2300      	movs	r3, #0
 8002d82:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d84:	4b2a      	ldr	r3, [pc, #168]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d003      	beq.n	8002d98 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d90:	f7ff f9b8 	bl	8002104 <HAL_PWREx_GetVoltageRange>
 8002d94:	6178      	str	r0, [r7, #20]
 8002d96:	e014      	b.n	8002dc2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b25      	ldr	r3, [pc, #148]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a24      	ldr	r2, [pc, #144]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b22      	ldr	r3, [pc, #136]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60fb      	str	r3, [r7, #12]
 8002dae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002db0:	f7ff f9a8 	bl	8002104 <HAL_PWREx_GetVoltageRange>
 8002db4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002db6:	4b1e      	ldr	r3, [pc, #120]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dba:	4a1d      	ldr	r2, [pc, #116]	; (8002e30 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dc0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002dc8:	d10b      	bne.n	8002de2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2b80      	cmp	r3, #128	; 0x80
 8002dce:	d919      	bls.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2ba0      	cmp	r3, #160	; 0xa0
 8002dd4:	d902      	bls.n	8002ddc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	613b      	str	r3, [r7, #16]
 8002dda:	e013      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002ddc:	2301      	movs	r3, #1
 8002dde:	613b      	str	r3, [r7, #16]
 8002de0:	e010      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2b80      	cmp	r3, #128	; 0x80
 8002de6:	d902      	bls.n	8002dee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002de8:	2303      	movs	r3, #3
 8002dea:	613b      	str	r3, [r7, #16]
 8002dec:	e00a      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2b80      	cmp	r3, #128	; 0x80
 8002df2:	d102      	bne.n	8002dfa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002df4:	2302      	movs	r3, #2
 8002df6:	613b      	str	r3, [r7, #16]
 8002df8:	e004      	b.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b70      	cmp	r3, #112	; 0x70
 8002dfe:	d101      	bne.n	8002e04 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002e00:	2301      	movs	r3, #1
 8002e02:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002e04:	4b0b      	ldr	r3, [pc, #44]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f023 0207 	bic.w	r2, r3, #7
 8002e0c:	4909      	ldr	r1, [pc, #36]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002e14:	4b07      	ldr	r3, [pc, #28]	; (8002e34 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0307 	and.w	r3, r3, #7
 8002e1c:	693a      	ldr	r2, [r7, #16]
 8002e1e:	429a      	cmp	r2, r3
 8002e20:	d001      	beq.n	8002e26 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e000      	b.n	8002e28 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002e26:	2300      	movs	r3, #0
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40022000 	.word	0x40022000

08002e38 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002e40:	2300      	movs	r3, #0
 8002e42:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002e44:	2300      	movs	r3, #0
 8002e46:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d031      	beq.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e58:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e5c:	d01a      	beq.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e5e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e62:	d814      	bhi.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d009      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e6c:	d10f      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e6e:	4bac      	ldr	r3, [pc, #688]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	4aab      	ldr	r2, [pc, #684]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e78:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e7a:	e00c      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	3304      	adds	r3, #4
 8002e80:	2100      	movs	r1, #0
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f9cc 	bl	8003220 <RCCEx_PLLSAI1_Config>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e8c:	e003      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	74fb      	strb	r3, [r7, #19]
      break;
 8002e92:	e000      	b.n	8002e96 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e94:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e96:	7cfb      	ldrb	r3, [r7, #19]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d10b      	bne.n	8002eb4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e9c:	4ba0      	ldr	r3, [pc, #640]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002eaa:	499d      	ldr	r1, [pc, #628]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002eb2:	e001      	b.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002eb4:	7cfb      	ldrb	r3, [r7, #19]
 8002eb6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	f000 8099 	beq.w	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002eca:	4b95      	ldr	r3, [pc, #596]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ece:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e000      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002eda:	2300      	movs	r3, #0
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d00d      	beq.n	8002efc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ee0:	4b8f      	ldr	r3, [pc, #572]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee4:	4a8e      	ldr	r2, [pc, #568]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ee6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eea:	6593      	str	r3, [r2, #88]	; 0x58
 8002eec:	4b8c      	ldr	r3, [pc, #560]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ef4:	60bb      	str	r3, [r7, #8]
 8002ef6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002efc:	4b89      	ldr	r3, [pc, #548]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	4a88      	ldr	r2, [pc, #544]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f06:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f08:	f7fe fdba 	bl	8001a80 <HAL_GetTick>
 8002f0c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f0e:	e009      	b.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f10:	f7fe fdb6 	bl	8001a80 <HAL_GetTick>
 8002f14:	4602      	mov	r2, r0
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	1ad3      	subs	r3, r2, r3
 8002f1a:	2b02      	cmp	r3, #2
 8002f1c:	d902      	bls.n	8002f24 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	74fb      	strb	r3, [r7, #19]
        break;
 8002f22:	e005      	b.n	8002f30 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002f24:	4b7f      	ldr	r3, [pc, #508]	; (8003124 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d0ef      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002f30:	7cfb      	ldrb	r3, [r7, #19]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d155      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f36:	4b7a      	ldr	r3, [pc, #488]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f40:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d01e      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f4c:	697a      	ldr	r2, [r7, #20]
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	d019      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f52:	4b73      	ldr	r3, [pc, #460]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f5e:	4b70      	ldr	r3, [pc, #448]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f64:	4a6e      	ldr	r2, [pc, #440]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f66:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f6e:	4b6c      	ldr	r3, [pc, #432]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f74:	4a6a      	ldr	r2, [pc, #424]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f76:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f7e:	4a68      	ldr	r2, [pc, #416]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f003 0301 	and.w	r3, r3, #1
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d016      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f90:	f7fe fd76 	bl	8001a80 <HAL_GetTick>
 8002f94:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f98:	f7fe fd72 	bl	8001a80 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d902      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	74fb      	strb	r3, [r7, #19]
            break;
 8002fae:	e006      	b.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fb0:	4b5b      	ldr	r3, [pc, #364]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d0ec      	beq.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002fbe:	7cfb      	ldrb	r3, [r7, #19]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fc4:	4b56      	ldr	r3, [pc, #344]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fd2:	4953      	ldr	r1, [pc, #332]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002fda:	e004      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002fdc:	7cfb      	ldrb	r3, [r7, #19]
 8002fde:	74bb      	strb	r3, [r7, #18]
 8002fe0:	e001      	b.n	8002fe6 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fe2:	7cfb      	ldrb	r3, [r7, #19]
 8002fe4:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fe6:	7c7b      	ldrb	r3, [r7, #17]
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d105      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fec:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002fee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ff0:	4a4b      	ldr	r2, [pc, #300]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8002ff2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ff6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f003 0301 	and.w	r3, r3, #1
 8003000:	2b00      	cmp	r3, #0
 8003002:	d00a      	beq.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003004:	4b46      	ldr	r3, [pc, #280]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	4943      	ldr	r1, [pc, #268]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003014:	4313      	orrs	r3, r2
 8003016:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003026:	4b3e      	ldr	r3, [pc, #248]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003028:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800302c:	f023 020c 	bic.w	r2, r3, #12
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003034:	493a      	ldr	r1, [pc, #232]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003036:	4313      	orrs	r3, r2
 8003038:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0320 	and.w	r3, r3, #32
 8003044:	2b00      	cmp	r3, #0
 8003046:	d00a      	beq.n	800305e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003048:	4b35      	ldr	r3, [pc, #212]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800304a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800304e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003056:	4932      	ldr	r1, [pc, #200]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003058:	4313      	orrs	r3, r2
 800305a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003066:	2b00      	cmp	r3, #0
 8003068:	d00a      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306a:	4b2d      	ldr	r3, [pc, #180]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800306c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003070:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003078:	4929      	ldr	r1, [pc, #164]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003088:	2b00      	cmp	r3, #0
 800308a:	d00a      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800308e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003092:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	4921      	ldr	r1, [pc, #132]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 800309c:	4313      	orrs	r3, r2
 800309e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d00a      	beq.n	80030c4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80030ae:	4b1c      	ldr	r3, [pc, #112]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030b4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030bc:	4918      	ldr	r1, [pc, #96]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030be:	4313      	orrs	r3, r2
 80030c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d00a      	beq.n	80030e6 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030de:	4910      	ldr	r1, [pc, #64]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030e0:	4313      	orrs	r3, r2
 80030e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d02c      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030f2:	4b0b      	ldr	r3, [pc, #44]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 80030f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	4907      	ldr	r1, [pc, #28]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003102:	4313      	orrs	r3, r2
 8003104:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003110:	d10a      	bne.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003112:	4b03      	ldr	r3, [pc, #12]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	4a02      	ldr	r2, [pc, #8]	; (8003120 <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8003118:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800311c:	60d3      	str	r3, [r2, #12]
 800311e:	e015      	b.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x314>
 8003120:	40021000 	.word	0x40021000
 8003124:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003130:	d10c      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	3304      	adds	r3, #4
 8003136:	2101      	movs	r1, #1
 8003138:	4618      	mov	r0, r3
 800313a:	f000 f871 	bl	8003220 <RCCEx_PLLSAI1_Config>
 800313e:	4603      	mov	r3, r0
 8003140:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003142:	7cfb      	ldrb	r3, [r7, #19]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8003148:	7cfb      	ldrb	r3, [r7, #19]
 800314a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d028      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003158:	4b30      	ldr	r3, [pc, #192]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003166:	492d      	ldr	r1, [pc, #180]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003168:	4313      	orrs	r3, r2
 800316a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003172:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003176:	d106      	bne.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003178:	4b28      	ldr	r3, [pc, #160]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	4a27      	ldr	r2, [pc, #156]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800317e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003182:	60d3      	str	r3, [r2, #12]
 8003184:	e011      	b.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800318e:	d10c      	bne.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	3304      	adds	r3, #4
 8003194:	2101      	movs	r1, #1
 8003196:	4618      	mov	r0, r3
 8003198:	f000 f842 	bl	8003220 <RCCEx_PLLSAI1_Config>
 800319c:	4603      	mov	r3, r0
 800319e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031a0:	7cfb      	ldrb	r3, [r7, #19]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 80031a6:	7cfb      	ldrb	r3, [r7, #19]
 80031a8:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d01c      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80031b6:	4b19      	ldr	r3, [pc, #100]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031bc:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031c4:	4915      	ldr	r1, [pc, #84]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031d4:	d10c      	bne.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	3304      	adds	r3, #4
 80031da:	2102      	movs	r1, #2
 80031dc:	4618      	mov	r0, r3
 80031de:	f000 f81f 	bl	8003220 <RCCEx_PLLSAI1_Config>
 80031e2:	4603      	mov	r3, r0
 80031e4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80031e6:	7cfb      	ldrb	r3, [r7, #19]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d001      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 80031ec:	7cfb      	ldrb	r3, [r7, #19]
 80031ee:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d00a      	beq.n	8003212 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031fc:	4b07      	ldr	r3, [pc, #28]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80031fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003202:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800320a:	4904      	ldr	r1, [pc, #16]	; (800321c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800320c:	4313      	orrs	r3, r2
 800320e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003212:	7cbb      	ldrb	r3, [r7, #18]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}
 800321c:	40021000 	.word	0x40021000

08003220 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b084      	sub	sp, #16
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
 8003228:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800322e:	4b74      	ldr	r3, [pc, #464]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b00      	cmp	r3, #0
 8003238:	d018      	beq.n	800326c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800323a:	4b71      	ldr	r3, [pc, #452]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800323c:	68db      	ldr	r3, [r3, #12]
 800323e:	f003 0203 	and.w	r2, r3, #3
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	429a      	cmp	r2, r3
 8003248:	d10d      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
       ||
 800324e:	2b00      	cmp	r3, #0
 8003250:	d009      	beq.n	8003266 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003252:	4b6b      	ldr	r3, [pc, #428]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	091b      	lsrs	r3, r3, #4
 8003258:	f003 0307 	and.w	r3, r3, #7
 800325c:	1c5a      	adds	r2, r3, #1
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
       ||
 8003262:	429a      	cmp	r2, r3
 8003264:	d047      	beq.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
 800326a:	e044      	b.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d018      	beq.n	80032a6 <RCCEx_PLLSAI1_Config+0x86>
 8003274:	2b03      	cmp	r3, #3
 8003276:	d825      	bhi.n	80032c4 <RCCEx_PLLSAI1_Config+0xa4>
 8003278:	2b01      	cmp	r3, #1
 800327a:	d002      	beq.n	8003282 <RCCEx_PLLSAI1_Config+0x62>
 800327c:	2b02      	cmp	r3, #2
 800327e:	d009      	beq.n	8003294 <RCCEx_PLLSAI1_Config+0x74>
 8003280:	e020      	b.n	80032c4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003282:	4b5f      	ldr	r3, [pc, #380]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d11d      	bne.n	80032ca <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003292:	e01a      	b.n	80032ca <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003294:	4b5a      	ldr	r3, [pc, #360]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800329c:	2b00      	cmp	r3, #0
 800329e:	d116      	bne.n	80032ce <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80032a4:	e013      	b.n	80032ce <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80032a6:	4b56      	ldr	r3, [pc, #344]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d10f      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80032b2:	4b53      	ldr	r3, [pc, #332]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d109      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80032c2:	e006      	b.n	80032d2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80032c4:	2301      	movs	r3, #1
 80032c6:	73fb      	strb	r3, [r7, #15]
      break;
 80032c8:	e004      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ca:	bf00      	nop
 80032cc:	e002      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032ce:	bf00      	nop
 80032d0:	e000      	b.n	80032d4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032d2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d10d      	bne.n	80032f6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032da:	4b49      	ldr	r3, [pc, #292]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032dc:	68db      	ldr	r3, [r3, #12]
 80032de:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6819      	ldr	r1, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	3b01      	subs	r3, #1
 80032ec:	011b      	lsls	r3, r3, #4
 80032ee:	430b      	orrs	r3, r1
 80032f0:	4943      	ldr	r1, [pc, #268]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032f6:	7bfb      	ldrb	r3, [r7, #15]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d17c      	bne.n	80033f6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032fc:	4b40      	ldr	r3, [pc, #256]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a3f      	ldr	r2, [pc, #252]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003302:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003306:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003308:	f7fe fbba 	bl	8001a80 <HAL_GetTick>
 800330c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800330e:	e009      	b.n	8003324 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003310:	f7fe fbb6 	bl	8001a80 <HAL_GetTick>
 8003314:	4602      	mov	r2, r0
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	1ad3      	subs	r3, r2, r3
 800331a:	2b02      	cmp	r3, #2
 800331c:	d902      	bls.n	8003324 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800331e:	2303      	movs	r3, #3
 8003320:	73fb      	strb	r3, [r7, #15]
        break;
 8003322:	e005      	b.n	8003330 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003324:	4b36      	ldr	r3, [pc, #216]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800332c:	2b00      	cmp	r3, #0
 800332e:	d1ef      	bne.n	8003310 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003330:	7bfb      	ldrb	r3, [r7, #15]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d15f      	bne.n	80033f6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d110      	bne.n	800335e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800333c:	4b30      	ldr	r3, [pc, #192]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003344:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	6892      	ldr	r2, [r2, #8]
 800334c:	0211      	lsls	r1, r2, #8
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	68d2      	ldr	r2, [r2, #12]
 8003352:	06d2      	lsls	r2, r2, #27
 8003354:	430a      	orrs	r2, r1
 8003356:	492a      	ldr	r1, [pc, #168]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003358:	4313      	orrs	r3, r2
 800335a:	610b      	str	r3, [r1, #16]
 800335c:	e027      	b.n	80033ae <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d112      	bne.n	800338a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003364:	4b26      	ldr	r3, [pc, #152]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003366:	691b      	ldr	r3, [r3, #16]
 8003368:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800336c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6892      	ldr	r2, [r2, #8]
 8003374:	0211      	lsls	r1, r2, #8
 8003376:	687a      	ldr	r2, [r7, #4]
 8003378:	6912      	ldr	r2, [r2, #16]
 800337a:	0852      	lsrs	r2, r2, #1
 800337c:	3a01      	subs	r2, #1
 800337e:	0552      	lsls	r2, r2, #21
 8003380:	430a      	orrs	r2, r1
 8003382:	491f      	ldr	r1, [pc, #124]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	4313      	orrs	r3, r2
 8003386:	610b      	str	r3, [r1, #16]
 8003388:	e011      	b.n	80033ae <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800338a:	4b1d      	ldr	r3, [pc, #116]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003392:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	6892      	ldr	r2, [r2, #8]
 800339a:	0211      	lsls	r1, r2, #8
 800339c:	687a      	ldr	r2, [r7, #4]
 800339e:	6952      	ldr	r2, [r2, #20]
 80033a0:	0852      	lsrs	r2, r2, #1
 80033a2:	3a01      	subs	r2, #1
 80033a4:	0652      	lsls	r2, r2, #25
 80033a6:	430a      	orrs	r2, r1
 80033a8:	4915      	ldr	r1, [pc, #84]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80033ae:	4b14      	ldr	r3, [pc, #80]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a13      	ldr	r2, [pc, #76]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033b4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80033b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fe fb61 	bl	8001a80 <HAL_GetTick>
 80033be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033c0:	e009      	b.n	80033d6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80033c2:	f7fe fb5d 	bl	8001a80 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d902      	bls.n	80033d6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	73fb      	strb	r3, [r7, #15]
          break;
 80033d4:	e005      	b.n	80033e2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033d6:	4b0a      	ldr	r3, [pc, #40]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ef      	beq.n	80033c2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033e2:	7bfb      	ldrb	r3, [r7, #15]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d106      	bne.n	80033f6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033e8:	4b05      	ldr	r3, [pc, #20]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ea:	691a      	ldr	r2, [r3, #16]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	699b      	ldr	r3, [r3, #24]
 80033f0:	4903      	ldr	r1, [pc, #12]	; (8003400 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	3710      	adds	r7, #16
 80033fc:	46bd      	mov	sp, r7
 80033fe:	bd80      	pop	{r7, pc}
 8003400:	40021000 	.word	0x40021000

08003404 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d101      	bne.n	8003416 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	e095      	b.n	8003542 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341a:	2b00      	cmp	r3, #0
 800341c:	d108      	bne.n	8003430 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003426:	d009      	beq.n	800343c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	61da      	str	r2, [r3, #28]
 800342e:	e005      	b.n	800343c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2200      	movs	r2, #0
 8003440:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003448:	b2db      	uxtb	r3, r3
 800344a:	2b00      	cmp	r3, #0
 800344c:	d106      	bne.n	800345c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f7fe f8b2 	bl	80015c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2202      	movs	r2, #2
 8003460:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003472:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68db      	ldr	r3, [r3, #12]
 8003478:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800347c:	d902      	bls.n	8003484 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	e002      	b.n	800348a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003484:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003488:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	68db      	ldr	r3, [r3, #12]
 800348e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003492:	d007      	beq.n	80034a4 <HAL_SPI_Init+0xa0>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800349c:	d002      	beq.n	80034a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80034b4:	431a      	orrs	r2, r3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	691b      	ldr	r3, [r3, #16]
 80034ba:	f003 0302 	and.w	r3, r3, #2
 80034be:	431a      	orrs	r2, r3
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	695b      	ldr	r3, [r3, #20]
 80034c4:	f003 0301 	and.w	r3, r3, #1
 80034c8:	431a      	orrs	r2, r3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034d2:	431a      	orrs	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	69db      	ldr	r3, [r3, #28]
 80034d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e6:	ea42 0103 	orr.w	r1, r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	430a      	orrs	r2, r1
 80034f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	699b      	ldr	r3, [r3, #24]
 80034fe:	0c1b      	lsrs	r3, r3, #16
 8003500:	f003 0204 	and.w	r2, r3, #4
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	f003 0310 	and.w	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003512:	f003 0308 	and.w	r3, r3, #8
 8003516:	431a      	orrs	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003520:	ea42 0103 	orr.w	r1, r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b08a      	sub	sp, #40	; 0x28
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
 8003556:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003558:	2301      	movs	r3, #1
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800355c:	2300      	movs	r3, #0
 800355e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003568:	2b01      	cmp	r3, #1
 800356a:	d101      	bne.n	8003570 <HAL_SPI_TransmitReceive+0x26>
 800356c:	2302      	movs	r3, #2
 800356e:	e1fb      	b.n	8003968 <HAL_SPI_TransmitReceive+0x41e>
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003578:	f7fe fa82 	bl	8001a80 <HAL_GetTick>
 800357c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003584:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003590:	887b      	ldrh	r3, [r7, #2]
 8003592:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003594:	7efb      	ldrb	r3, [r7, #27]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d00e      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x6e>
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035a0:	d106      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d102      	bne.n	80035b0 <HAL_SPI_TransmitReceive+0x66>
 80035aa:	7efb      	ldrb	r3, [r7, #27]
 80035ac:	2b04      	cmp	r3, #4
 80035ae:	d003      	beq.n	80035b8 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80035b0:	2302      	movs	r3, #2
 80035b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035b6:	e1cd      	b.n	8003954 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d005      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x80>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d002      	beq.n	80035ca <HAL_SPI_TransmitReceive+0x80>
 80035c4:	887b      	ldrh	r3, [r7, #2]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d103      	bne.n	80035d2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80035d0:	e1c0      	b.n	8003954 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b04      	cmp	r3, #4
 80035dc:	d003      	beq.n	80035e6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	2205      	movs	r2, #5
 80035e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2200      	movs	r2, #0
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	887a      	ldrh	r2, [r7, #2]
 80035f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	887a      	ldrh	r2, [r7, #2]
 80035fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	887a      	ldrh	r2, [r7, #2]
 8003612:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2200      	movs	r2, #0
 8003618:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2200      	movs	r2, #0
 800361e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	68db      	ldr	r3, [r3, #12]
 8003624:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003628:	d802      	bhi.n	8003630 <HAL_SPI_TransmitReceive+0xe6>
 800362a:	8a3b      	ldrh	r3, [r7, #16]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d908      	bls.n	8003642 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	685a      	ldr	r2, [r3, #4]
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800363e:	605a      	str	r2, [r3, #4]
 8003640:	e007      	b.n	8003652 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	685a      	ldr	r2, [r3, #4]
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003650:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365c:	2b40      	cmp	r3, #64	; 0x40
 800365e:	d007      	beq.n	8003670 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800366e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003678:	d97c      	bls.n	8003774 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <HAL_SPI_TransmitReceive+0x13e>
 8003682:	8a7b      	ldrh	r3, [r7, #18]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d169      	bne.n	800375c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	881a      	ldrh	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003698:	1c9a      	adds	r2, r3, #2
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	3b01      	subs	r3, #1
 80036a6:	b29a      	uxth	r2, r3
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036ac:	e056      	b.n	800375c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0302 	and.w	r3, r3, #2
 80036b8:	2b02      	cmp	r3, #2
 80036ba:	d11b      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x1aa>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d016      	beq.n	80036f4 <HAL_SPI_TransmitReceive+0x1aa>
 80036c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c8:	2b01      	cmp	r3, #1
 80036ca:	d113      	bne.n	80036f4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036d0:	881a      	ldrh	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80036dc:	1c9a      	adds	r2, r3, #2
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f0:	2300      	movs	r3, #0
 80036f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d11c      	bne.n	800373c <HAL_SPI_TransmitReceive+0x1f2>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003708:	b29b      	uxth	r3, r3
 800370a:	2b00      	cmp	r3, #0
 800370c:	d016      	beq.n	800373c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003718:	b292      	uxth	r2, r2
 800371a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003720:	1c9a      	adds	r2, r3, #2
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800372c:	b29b      	uxth	r3, r3
 800372e:	3b01      	subs	r3, #1
 8003730:	b29a      	uxth	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800373c:	f7fe f9a0 	bl	8001a80 <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	69fb      	ldr	r3, [r7, #28]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003748:	429a      	cmp	r2, r3
 800374a:	d807      	bhi.n	800375c <HAL_SPI_TransmitReceive+0x212>
 800374c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d003      	beq.n	800375c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800375a:	e0fb      	b.n	8003954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003760:	b29b      	uxth	r3, r3
 8003762:	2b00      	cmp	r3, #0
 8003764:	d1a3      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x164>
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d19d      	bne.n	80036ae <HAL_SPI_TransmitReceive+0x164>
 8003772:	e0df      	b.n	8003934 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d003      	beq.n	8003784 <HAL_SPI_TransmitReceive+0x23a>
 800377c:	8a7b      	ldrh	r3, [r7, #18]
 800377e:	2b01      	cmp	r3, #1
 8003780:	f040 80cb 	bne.w	800391a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b01      	cmp	r3, #1
 800378c:	d912      	bls.n	80037b4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003792:	881a      	ldrh	r2, [r3, #0]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379e:	1c9a      	adds	r2, r3, #2
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	3b02      	subs	r3, #2
 80037ac:	b29a      	uxth	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80037b2:	e0b2      	b.n	800391a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	330c      	adds	r3, #12
 80037be:	7812      	ldrb	r2, [r2, #0]
 80037c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037d0:	b29b      	uxth	r3, r3
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037da:	e09e      	b.n	800391a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b02      	cmp	r3, #2
 80037e8:	d134      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x30a>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d02f      	beq.n	8003854 <HAL_SPI_TransmitReceive+0x30a>
 80037f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d12c      	bne.n	8003854 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80037fe:	b29b      	uxth	r3, r3
 8003800:	2b01      	cmp	r3, #1
 8003802:	d912      	bls.n	800382a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003808:	881a      	ldrh	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	1c9a      	adds	r2, r3, #2
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800381e:	b29b      	uxth	r3, r3
 8003820:	3b02      	subs	r3, #2
 8003822:	b29a      	uxth	r2, r3
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003828:	e012      	b.n	8003850 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	330c      	adds	r3, #12
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	1c5a      	adds	r2, r3, #1
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003846:	b29b      	uxth	r3, r3
 8003848:	3b01      	subs	r3, #1
 800384a:	b29a      	uxth	r2, r3
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 0301 	and.w	r3, r3, #1
 800385e:	2b01      	cmp	r3, #1
 8003860:	d148      	bne.n	80038f4 <HAL_SPI_TransmitReceive+0x3aa>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003868:	b29b      	uxth	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d042      	beq.n	80038f4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b01      	cmp	r3, #1
 8003878:	d923      	bls.n	80038c2 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	68da      	ldr	r2, [r3, #12]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003884:	b292      	uxth	r2, r2
 8003886:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	1c9a      	adds	r2, r3, #2
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003898:	b29b      	uxth	r3, r3
 800389a:	3b02      	subs	r3, #2
 800389c:	b29a      	uxth	r2, r3
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d81f      	bhi.n	80038f0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80038be:	605a      	str	r2, [r3, #4]
 80038c0:	e016      	b.n	80038f0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f103 020c 	add.w	r2, r3, #12
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	7812      	ldrb	r2, [r2, #0]
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	3b01      	subs	r3, #1
 80038e8:	b29a      	uxth	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038f0:	2301      	movs	r3, #1
 80038f2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038f4:	f7fe f8c4 	bl	8001a80 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003900:	429a      	cmp	r2, r3
 8003902:	d803      	bhi.n	800390c <HAL_SPI_TransmitReceive+0x3c2>
 8003904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800390a:	d102      	bne.n	8003912 <HAL_SPI_TransmitReceive+0x3c8>
 800390c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8003918:	e01c      	b.n	8003954 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391e:	b29b      	uxth	r3, r3
 8003920:	2b00      	cmp	r3, #0
 8003922:	f47f af5b 	bne.w	80037dc <HAL_SPI_TransmitReceive+0x292>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800392c:	b29b      	uxth	r3, r3
 800392e:	2b00      	cmp	r3, #0
 8003930:	f47f af54 	bne.w	80037dc <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003934:	69fa      	ldr	r2, [r7, #28]
 8003936:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f937 	bl	8003bac <SPI_EndRxTxTransaction>
 800393e:	4603      	mov	r3, r0
 8003940:	2b00      	cmp	r3, #0
 8003942:	d006      	beq.n	8003952 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8003944:	2301      	movs	r3, #1
 8003946:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	661a      	str	r2, [r3, #96]	; 0x60
 8003950:	e000      	b.n	8003954 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8003952:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2200      	movs	r2, #0
 8003960:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003964:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8003968:	4618      	mov	r0, r3
 800396a:	3728      	adds	r7, #40	; 0x28
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af00      	add	r7, sp, #0
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	60b9      	str	r1, [r7, #8]
 800397a:	603b      	str	r3, [r7, #0]
 800397c:	4613      	mov	r3, r2
 800397e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003980:	f7fe f87e 	bl	8001a80 <HAL_GetTick>
 8003984:	4602      	mov	r2, r0
 8003986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003988:	1a9b      	subs	r3, r3, r2
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	4413      	add	r3, r2
 800398e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003990:	f7fe f876 	bl	8001a80 <HAL_GetTick>
 8003994:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003996:	4b39      	ldr	r3, [pc, #228]	; (8003a7c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	015b      	lsls	r3, r3, #5
 800399c:	0d1b      	lsrs	r3, r3, #20
 800399e:	69fa      	ldr	r2, [r7, #28]
 80039a0:	fb02 f303 	mul.w	r3, r2, r3
 80039a4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039a6:	e054      	b.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039ae:	d050      	beq.n	8003a52 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039b0:	f7fe f866 	bl	8001a80 <HAL_GetTick>
 80039b4:	4602      	mov	r2, r0
 80039b6:	69bb      	ldr	r3, [r7, #24]
 80039b8:	1ad3      	subs	r3, r2, r3
 80039ba:	69fa      	ldr	r2, [r7, #28]
 80039bc:	429a      	cmp	r2, r3
 80039be:	d902      	bls.n	80039c6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039c0:	69fb      	ldr	r3, [r7, #28]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d13d      	bne.n	8003a42 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	685a      	ldr	r2, [r3, #4]
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039d4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039de:	d111      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e8:	d004      	beq.n	80039f4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f2:	d107      	bne.n	8003a04 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a02:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a08:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a0c:	d10f      	bne.n	8003a2e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	681a      	ldr	r2, [r3, #0]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a2c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e017      	b.n	8003a72 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a42:	697b      	ldr	r3, [r7, #20]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	689a      	ldr	r2, [r3, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	68ba      	ldr	r2, [r7, #8]
 8003a5e:	429a      	cmp	r2, r3
 8003a60:	bf0c      	ite	eq
 8003a62:	2301      	moveq	r3, #1
 8003a64:	2300      	movne	r3, #0
 8003a66:	b2db      	uxtb	r3, r3
 8003a68:	461a      	mov	r2, r3
 8003a6a:	79fb      	ldrb	r3, [r7, #7]
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d19b      	bne.n	80039a8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a70:	2300      	movs	r3, #0
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3720      	adds	r7, #32
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000000 	.word	0x20000000

08003a80 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b08a      	sub	sp, #40	; 0x28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	60f8      	str	r0, [r7, #12]
 8003a88:	60b9      	str	r1, [r7, #8]
 8003a8a:	607a      	str	r2, [r7, #4]
 8003a8c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003a92:	f7fd fff5 	bl	8001a80 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003aa2:	f7fd ffed 	bl	8001a80 <HAL_GetTick>
 8003aa6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	330c      	adds	r3, #12
 8003aae:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ab0:	4b3d      	ldr	r3, [pc, #244]	; (8003ba8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	4413      	add	r3, r2
 8003aba:	00da      	lsls	r2, r3, #3
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	0d1b      	lsrs	r3, r3, #20
 8003ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ac2:	fb02 f303 	mul.w	r3, r2, r3
 8003ac6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003ac8:	e060      	b.n	8003b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003ad0:	d107      	bne.n	8003ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d104      	bne.n	8003ae2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	781b      	ldrb	r3, [r3, #0]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003ae0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae8:	d050      	beq.n	8003b8c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003aea:	f7fd ffc9 	bl	8001a80 <HAL_GetTick>
 8003aee:	4602      	mov	r2, r0
 8003af0:	6a3b      	ldr	r3, [r7, #32]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003af6:	429a      	cmp	r2, r3
 8003af8:	d902      	bls.n	8003b00 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d13d      	bne.n	8003b7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685a      	ldr	r2, [r3, #4]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b0e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b18:	d111      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b22:	d004      	beq.n	8003b2e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d107      	bne.n	8003b3e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b3c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b46:	d10f      	bne.n	8003b68 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b56:	601a      	str	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b66:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e010      	b.n	8003b9e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d101      	bne.n	8003b86 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003b82:	2300      	movs	r3, #0
 8003b84:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003b86:	69bb      	ldr	r3, [r7, #24]
 8003b88:	3b01      	subs	r3, #1
 8003b8a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	689a      	ldr	r2, [r3, #8]
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	4013      	ands	r3, r2
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d196      	bne.n	8003aca <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3728      	adds	r7, #40	; 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	20000000 	.word	0x20000000

08003bac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b086      	sub	sp, #24
 8003bb0:	af02      	add	r7, sp, #8
 8003bb2:	60f8      	str	r0, [r7, #12]
 8003bb4:	60b9      	str	r1, [r7, #8]
 8003bb6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	9300      	str	r3, [sp, #0]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f7ff ff5b 	bl	8003a80 <SPI_WaitFifoStateUntilTimeout>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d007      	beq.n	8003be0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bd4:	f043 0220 	orr.w	r2, r3, #32
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003bdc:	2303      	movs	r3, #3
 8003bde:	e027      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	9300      	str	r3, [sp, #0]
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	2200      	movs	r2, #0
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	68f8      	ldr	r0, [r7, #12]
 8003bec:	f7ff fec0 	bl	8003970 <SPI_WaitFlagStateUntilTimeout>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d007      	beq.n	8003c06 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bfa:	f043 0220 	orr.w	r2, r3, #32
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c02:	2303      	movs	r3, #3
 8003c04:	e014      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	9300      	str	r3, [sp, #0]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c12:	68f8      	ldr	r0, [r7, #12]
 8003c14:	f7ff ff34 	bl	8003a80 <SPI_WaitFifoStateUntilTimeout>
 8003c18:	4603      	mov	r3, r0
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d007      	beq.n	8003c2e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c22:	f043 0220 	orr.w	r2, r3, #32
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e000      	b.n	8003c30 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b082      	sub	sp, #8
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	e040      	b.n	8003ccc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f7fd fcf4 	bl	8001648 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2224      	movs	r2, #36	; 0x24
 8003c64:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f022 0201 	bic.w	r2, r2, #1
 8003c74:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 fc18 	bl	80044ac <UART_SetConfig>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d101      	bne.n	8003c86 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	e022      	b.n	8003ccc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 fe16 	bl	80048c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	685a      	ldr	r2, [r3, #4]
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003ca2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cb2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cc4:	6878      	ldr	r0, [r7, #4]
 8003cc6:	f000 fe9d 	bl	8004a04 <UART_CheckIdleState>
 8003cca:	4603      	mov	r3, r0
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	3708      	adds	r7, #8
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}

08003cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b08a      	sub	sp, #40	; 0x28
 8003cd8:	af02      	add	r7, sp, #8
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	603b      	str	r3, [r7, #0]
 8003ce0:	4613      	mov	r3, r2
 8003ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ce8:	2b20      	cmp	r3, #32
 8003cea:	f040 8082 	bne.w	8003df2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d002      	beq.n	8003cfa <HAL_UART_Transmit+0x26>
 8003cf4:	88fb      	ldrh	r3, [r7, #6]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e07a      	b.n	8003df4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d101      	bne.n	8003d0c <HAL_UART_Transmit+0x38>
 8003d08:	2302      	movs	r3, #2
 8003d0a:	e073      	b.n	8003df4 <HAL_UART_Transmit+0x120>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	2200      	movs	r2, #0
 8003d18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2221      	movs	r2, #33	; 0x21
 8003d20:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d22:	f7fd fead 	bl	8001a80 <HAL_GetTick>
 8003d26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	88fa      	ldrh	r2, [r7, #6]
 8003d2c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	88fa      	ldrh	r2, [r7, #6]
 8003d34:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	689b      	ldr	r3, [r3, #8]
 8003d3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d40:	d108      	bne.n	8003d54 <HAL_UART_Transmit+0x80>
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	691b      	ldr	r3, [r3, #16]
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d104      	bne.n	8003d54 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	61bb      	str	r3, [r7, #24]
 8003d52:	e003      	b.n	8003d5c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003d54:	68bb      	ldr	r3, [r7, #8]
 8003d56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d58:	2300      	movs	r3, #0
 8003d5a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2200      	movs	r2, #0
 8003d60:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003d64:	e02d      	b.n	8003dc2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	9300      	str	r3, [sp, #0]
 8003d6a:	697b      	ldr	r3, [r7, #20]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	2180      	movs	r1, #128	; 0x80
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fe90 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d001      	beq.n	8003d80 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003d7c:	2303      	movs	r3, #3
 8003d7e:	e039      	b.n	8003df4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d10b      	bne.n	8003d9e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d86:	69bb      	ldr	r3, [r7, #24]
 8003d88:	881a      	ldrh	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d92:	b292      	uxth	r2, r2
 8003d94:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3302      	adds	r3, #2
 8003d9a:	61bb      	str	r3, [r7, #24]
 8003d9c:	e008      	b.n	8003db0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	781a      	ldrb	r2, [r3, #0]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	b292      	uxth	r2, r2
 8003da8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3301      	adds	r3, #1
 8003dae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003db6:	b29b      	uxth	r3, r3
 8003db8:	3b01      	subs	r3, #1
 8003dba:	b29a      	uxth	r2, r3
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003dc8:	b29b      	uxth	r3, r3
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1cb      	bne.n	8003d66 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	9300      	str	r3, [sp, #0]
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	2140      	movs	r1, #64	; 0x40
 8003dd8:	68f8      	ldr	r0, [r7, #12]
 8003dda:	f000 fe5c 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e005      	b.n	8003df4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003dee:	2300      	movs	r3, #0
 8003df0:	e000      	b.n	8003df4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8003df2:	2302      	movs	r3, #2
  }
}
 8003df4:	4618      	mov	r0, r3
 8003df6:	3720      	adds	r7, #32
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b08a      	sub	sp, #40	; 0x28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	60f8      	str	r0, [r7, #12]
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	4613      	mov	r3, r2
 8003e08:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e0e:	2b20      	cmp	r3, #32
 8003e10:	d142      	bne.n	8003e98 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d002      	beq.n	8003e1e <HAL_UART_Receive_IT+0x22>
 8003e18:	88fb      	ldrh	r3, [r7, #6]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d101      	bne.n	8003e22 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e03b      	b.n	8003e9a <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003e28:	2b01      	cmp	r3, #1
 8003e2a:	d101      	bne.n	8003e30 <HAL_UART_Receive_IT+0x34>
 8003e2c:	2302      	movs	r3, #2
 8003e2e:	e034      	b.n	8003e9a <HAL_UART_Receive_IT+0x9e>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a18      	ldr	r2, [pc, #96]	; (8003ea4 <HAL_UART_Receive_IT+0xa8>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d01f      	beq.n	8003e88 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d018      	beq.n	8003e88 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	613b      	str	r3, [r7, #16]
   return(result);
 8003e64:	693b      	ldr	r3, [r7, #16]
 8003e66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	461a      	mov	r2, r3
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	623b      	str	r3, [r7, #32]
 8003e76:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e78:	69f9      	ldr	r1, [r7, #28]
 8003e7a:	6a3a      	ldr	r2, [r7, #32]
 8003e7c:	e841 2300 	strex	r3, r2, [r1]
 8003e80:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e82:	69bb      	ldr	r3, [r7, #24]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d1e6      	bne.n	8003e56 <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003e88:	88fb      	ldrh	r3, [r7, #6]
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	68b9      	ldr	r1, [r7, #8]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fec6 	bl	8004c20 <UART_Start_Receive_IT>
 8003e94:	4603      	mov	r3, r0
 8003e96:	e000      	b.n	8003e9a <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8003e98:	2302      	movs	r3, #2
  }
}
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	3728      	adds	r7, #40	; 0x28
 8003e9e:	46bd      	mov	sp, r7
 8003ea0:	bd80      	pop	{r7, pc}
 8003ea2:	bf00      	nop
 8003ea4:	40008000 	.word	0x40008000

08003ea8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b0ba      	sub	sp, #232	; 0xe8
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	689b      	ldr	r3, [r3, #8]
 8003eca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ece:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003ed2:	f640 030f 	movw	r3, #2063	; 0x80f
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003edc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d115      	bne.n	8003f10 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ee8:	f003 0320 	and.w	r3, r3, #32
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d00f      	beq.n	8003f10 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ef4:	f003 0320 	and.w	r3, r3, #32
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d009      	beq.n	8003f10 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 82a6 	beq.w	8004452 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	4798      	blx	r3
      }
      return;
 8003f0e:	e2a0      	b.n	8004452 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003f10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8117 	beq.w	8004148 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003f1a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d106      	bne.n	8003f34 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003f26:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003f2a:	4b85      	ldr	r3, [pc, #532]	; (8004140 <HAL_UART_IRQHandler+0x298>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 810a 	beq.w	8004148 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003f34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f38:	f003 0301 	and.w	r3, r3, #1
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d011      	beq.n	8003f64 <HAL_UART_IRQHandler+0xbc>
 8003f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00b      	beq.n	8003f64 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2201      	movs	r2, #1
 8003f52:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f5a:	f043 0201 	orr.w	r2, r3, #1
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f68:	f003 0302 	and.w	r3, r3, #2
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d011      	beq.n	8003f94 <HAL_UART_IRQHandler+0xec>
 8003f70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003f74:	f003 0301 	and.w	r3, r3, #1
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2202      	movs	r2, #2
 8003f82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f8a:	f043 0204 	orr.w	r2, r3, #4
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003f94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d011      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x11c>
 8003fa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d00b      	beq.n	8003fc4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	2204      	movs	r2, #4
 8003fb2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003fba:	f043 0202 	orr.w	r2, r3, #2
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003fc8:	f003 0308 	and.w	r3, r3, #8
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d017      	beq.n	8004000 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003fd4:	f003 0320 	and.w	r3, r3, #32
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003fdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003fe0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00b      	beq.n	8004000 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2208      	movs	r2, #8
 8003fee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ff6:	f043 0208 	orr.w	r2, r3, #8
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004000:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	2b00      	cmp	r3, #0
 800400a:	d012      	beq.n	8004032 <HAL_UART_IRQHandler+0x18a>
 800400c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004010:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d00c      	beq.n	8004032 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004020:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004028:	f043 0220 	orr.w	r2, r3, #32
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004038:	2b00      	cmp	r3, #0
 800403a:	f000 820c 	beq.w	8004456 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800403e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800404a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800404e:	f003 0320 	and.w	r3, r3, #32
 8004052:	2b00      	cmp	r3, #0
 8004054:	d007      	beq.n	8004066 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800406c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800407a:	2b40      	cmp	r3, #64	; 0x40
 800407c:	d005      	beq.n	800408a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800407e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004082:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004086:	2b00      	cmp	r3, #0
 8004088:	d04f      	beq.n	800412a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f000 fe92 	bl	8004db4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409a:	2b40      	cmp	r3, #64	; 0x40
 800409c:	d141      	bne.n	8004122 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80040ac:	e853 3f00 	ldrex	r3, [r3]
 80040b0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80040b4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80040b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040bc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	3308      	adds	r3, #8
 80040c6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80040ca:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80040ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040d2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80040d6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80040da:	e841 2300 	strex	r3, r2, [r1]
 80040de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80040e2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d1d9      	bne.n	800409e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d013      	beq.n	800411a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040f6:	4a13      	ldr	r2, [pc, #76]	; (8004144 <HAL_UART_IRQHandler+0x29c>)
 80040f8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fe:	4618      	mov	r0, r3
 8004100:	f7fd fe3d 	bl	8001d7e <HAL_DMA_Abort_IT>
 8004104:	4603      	mov	r3, r0
 8004106:	2b00      	cmp	r3, #0
 8004108:	d017      	beq.n	800413a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8004114:	4610      	mov	r0, r2
 8004116:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004118:	e00f      	b.n	800413a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800411a:	6878      	ldr	r0, [r7, #4]
 800411c:	f000 f9b0 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004120:	e00b      	b.n	800413a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f000 f9ac 	bl	8004480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004128:	e007      	b.n	800413a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f9a8 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8004138:	e18d      	b.n	8004456 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800413a:	bf00      	nop
    return;
 800413c:	e18b      	b.n	8004456 <HAL_UART_IRQHandler+0x5ae>
 800413e:	bf00      	nop
 8004140:	04000120 	.word	0x04000120
 8004144:	08004e7b 	.word	0x08004e7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800414c:	2b01      	cmp	r3, #1
 800414e:	f040 8146 	bne.w	80043de <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004156:	f003 0310 	and.w	r3, r3, #16
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 813f 	beq.w	80043de <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004160:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004164:	f003 0310 	and.w	r3, r3, #16
 8004168:	2b00      	cmp	r3, #0
 800416a:	f000 8138 	beq.w	80043de <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	2210      	movs	r2, #16
 8004174:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004180:	2b40      	cmp	r3, #64	; 0x40
 8004182:	f040 80b4 	bne.w	80042ee <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004192:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004196:	2b00      	cmp	r3, #0
 8004198:	f000 815f 	beq.w	800445a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80041a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041a6:	429a      	cmp	r2, r3
 80041a8:	f080 8157 	bcs.w	800445a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80041b2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0320 	and.w	r3, r3, #32
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	f040 8085 	bne.w	80042d2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80041d4:	e853 3f00 	ldrex	r3, [r3]
 80041d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80041dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80041e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	461a      	mov	r2, r3
 80041ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80041f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041f6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80041fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004202:	e841 2300 	strex	r3, r2, [r1]
 8004206:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800420a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1da      	bne.n	80041c8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004222:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004236:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800423a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800423e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e1      	bne.n	8004212 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3308      	adds	r3, #8
 8004254:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800425e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004264:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3308      	adds	r3, #8
 800426e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004274:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004276:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004278:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800427a:	e841 2300 	strex	r3, r2, [r1]
 800427e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004280:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004282:	2b00      	cmp	r3, #0
 8004284:	d1e3      	bne.n	800424e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2220      	movs	r2, #32
 800428a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004298:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800429a:	e853 3f00 	ldrex	r3, [r3]
 800429e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80042a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a2:	f023 0310 	bic.w	r3, r3, #16
 80042a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	461a      	mov	r2, r3
 80042b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80042b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80042b6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80042ba:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80042bc:	e841 2300 	strex	r3, r2, [r1]
 80042c0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80042c2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d1e4      	bne.n	8004292 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042cc:	4618      	mov	r0, r3
 80042ce:	f7fd fd18 	bl	8001d02 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042de:	b29b      	uxth	r3, r3
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	4619      	mov	r1, r3
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f000 f8d4 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80042ec:	e0b5      	b.n	800445a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004308:	b29b      	uxth	r3, r3
 800430a:	2b00      	cmp	r3, #0
 800430c:	f000 80a7 	beq.w	800445e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8004310:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 80a2 	beq.w	800445e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004322:	e853 3f00 	ldrex	r3, [r3]
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800432e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	461a      	mov	r2, r3
 8004338:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800433c:	647b      	str	r3, [r7, #68]	; 0x44
 800433e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004340:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004342:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004344:	e841 2300 	strex	r3, r2, [r1]
 8004348:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800434a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1e4      	bne.n	800431a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	3308      	adds	r3, #8
 8004356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435a:	e853 3f00 	ldrex	r3, [r3]
 800435e:	623b      	str	r3, [r7, #32]
   return(result);
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	f023 0301 	bic.w	r3, r3, #1
 8004366:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	3308      	adds	r3, #8
 8004370:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004374:	633a      	str	r2, [r7, #48]	; 0x30
 8004376:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004378:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800437a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800437c:	e841 2300 	strex	r3, r2, [r1]
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004384:	2b00      	cmp	r3, #0
 8004386:	d1e3      	bne.n	8004350 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2200      	movs	r2, #0
 8004392:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f023 0310 	bic.w	r3, r3, #16
 80043ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	461a      	mov	r2, r3
 80043b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80043bc:	61fb      	str	r3, [r7, #28]
 80043be:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c0:	69b9      	ldr	r1, [r7, #24]
 80043c2:	69fa      	ldr	r2, [r7, #28]
 80043c4:	e841 2300 	strex	r3, r2, [r1]
 80043c8:	617b      	str	r3, [r7, #20]
   return(result);
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d1e4      	bne.n	800439a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80043d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043d4:	4619      	mov	r1, r3
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f85c 	bl	8004494 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80043dc:	e03f      	b.n	800445e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80043de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80043e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d00e      	beq.n	8004408 <HAL_UART_IRQHandler+0x560>
 80043ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80043ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d008      	beq.n	8004408 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80043fe:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f000 feda 	bl	80051ba <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004406:	e02d      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800440c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004410:	2b00      	cmp	r3, #0
 8004412:	d00e      	beq.n	8004432 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800441c:	2b00      	cmp	r3, #0
 800441e:	d008      	beq.n	8004432 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004424:	2b00      	cmp	r3, #0
 8004426:	d01c      	beq.n	8004462 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	4798      	blx	r3
    }
    return;
 8004430:	e017      	b.n	8004462 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d012      	beq.n	8004464 <HAL_UART_IRQHandler+0x5bc>
 800443e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004442:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d00c      	beq.n	8004464 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fd2b 	bl	8004ea6 <UART_EndTransmit_IT>
    return;
 8004450:	e008      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
      return;
 8004452:	bf00      	nop
 8004454:	e006      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004456:	bf00      	nop
 8004458:	e004      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
      return;
 800445a:	bf00      	nop
 800445c:	e002      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
      return;
 800445e:	bf00      	nop
 8004460:	e000      	b.n	8004464 <HAL_UART_IRQHandler+0x5bc>
    return;
 8004462:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8004464:	37e8      	adds	r7, #232	; 0xe8
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop

0800446c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004480:	b480      	push	{r7}
 8004482:	b083      	sub	sp, #12
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004488:	bf00      	nop
 800448a:	370c      	adds	r7, #12
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	460b      	mov	r3, r1
 800449e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044a0:	bf00      	nop
 80044a2:	370c      	adds	r7, #12
 80044a4:	46bd      	mov	sp, r7
 80044a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044aa:	4770      	bx	lr

080044ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044ac:	b5b0      	push	{r4, r5, r7, lr}
 80044ae:	b088      	sub	sp, #32
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044b4:	2300      	movs	r3, #0
 80044b6:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689a      	ldr	r2, [r3, #8]
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	691b      	ldr	r3, [r3, #16]
 80044c0:	431a      	orrs	r2, r3
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	431a      	orrs	r2, r3
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	4baf      	ldr	r3, [pc, #700]	; (8004794 <UART_SetConfig+0x2e8>)
 80044d8:	4013      	ands	r3, r2
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	6812      	ldr	r2, [r2, #0]
 80044de:	69f9      	ldr	r1, [r7, #28]
 80044e0:	430b      	orrs	r3, r1
 80044e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	430a      	orrs	r2, r1
 80044f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4aa4      	ldr	r2, [pc, #656]	; (8004798 <UART_SetConfig+0x2ec>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	69fa      	ldr	r2, [r7, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	4a9b      	ldr	r2, [pc, #620]	; (800479c <UART_SetConfig+0x2f0>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d121      	bne.n	8004576 <UART_SetConfig+0xca>
 8004532:	4b9b      	ldr	r3, [pc, #620]	; (80047a0 <UART_SetConfig+0x2f4>)
 8004534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004538:	f003 0303 	and.w	r3, r3, #3
 800453c:	2b03      	cmp	r3, #3
 800453e:	d817      	bhi.n	8004570 <UART_SetConfig+0xc4>
 8004540:	a201      	add	r2, pc, #4	; (adr r2, 8004548 <UART_SetConfig+0x9c>)
 8004542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004546:	bf00      	nop
 8004548:	08004559 	.word	0x08004559
 800454c:	08004565 	.word	0x08004565
 8004550:	0800455f 	.word	0x0800455f
 8004554:	0800456b 	.word	0x0800456b
 8004558:	2301      	movs	r3, #1
 800455a:	76fb      	strb	r3, [r7, #27]
 800455c:	e070      	b.n	8004640 <UART_SetConfig+0x194>
 800455e:	2302      	movs	r3, #2
 8004560:	76fb      	strb	r3, [r7, #27]
 8004562:	e06d      	b.n	8004640 <UART_SetConfig+0x194>
 8004564:	2304      	movs	r3, #4
 8004566:	76fb      	strb	r3, [r7, #27]
 8004568:	e06a      	b.n	8004640 <UART_SetConfig+0x194>
 800456a:	2308      	movs	r3, #8
 800456c:	76fb      	strb	r3, [r7, #27]
 800456e:	e067      	b.n	8004640 <UART_SetConfig+0x194>
 8004570:	2310      	movs	r3, #16
 8004572:	76fb      	strb	r3, [r7, #27]
 8004574:	e064      	b.n	8004640 <UART_SetConfig+0x194>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a8a      	ldr	r2, [pc, #552]	; (80047a4 <UART_SetConfig+0x2f8>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d132      	bne.n	80045e6 <UART_SetConfig+0x13a>
 8004580:	4b87      	ldr	r3, [pc, #540]	; (80047a0 <UART_SetConfig+0x2f4>)
 8004582:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004586:	f003 030c 	and.w	r3, r3, #12
 800458a:	2b0c      	cmp	r3, #12
 800458c:	d828      	bhi.n	80045e0 <UART_SetConfig+0x134>
 800458e:	a201      	add	r2, pc, #4	; (adr r2, 8004594 <UART_SetConfig+0xe8>)
 8004590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004594:	080045c9 	.word	0x080045c9
 8004598:	080045e1 	.word	0x080045e1
 800459c:	080045e1 	.word	0x080045e1
 80045a0:	080045e1 	.word	0x080045e1
 80045a4:	080045d5 	.word	0x080045d5
 80045a8:	080045e1 	.word	0x080045e1
 80045ac:	080045e1 	.word	0x080045e1
 80045b0:	080045e1 	.word	0x080045e1
 80045b4:	080045cf 	.word	0x080045cf
 80045b8:	080045e1 	.word	0x080045e1
 80045bc:	080045e1 	.word	0x080045e1
 80045c0:	080045e1 	.word	0x080045e1
 80045c4:	080045db 	.word	0x080045db
 80045c8:	2300      	movs	r3, #0
 80045ca:	76fb      	strb	r3, [r7, #27]
 80045cc:	e038      	b.n	8004640 <UART_SetConfig+0x194>
 80045ce:	2302      	movs	r3, #2
 80045d0:	76fb      	strb	r3, [r7, #27]
 80045d2:	e035      	b.n	8004640 <UART_SetConfig+0x194>
 80045d4:	2304      	movs	r3, #4
 80045d6:	76fb      	strb	r3, [r7, #27]
 80045d8:	e032      	b.n	8004640 <UART_SetConfig+0x194>
 80045da:	2308      	movs	r3, #8
 80045dc:	76fb      	strb	r3, [r7, #27]
 80045de:	e02f      	b.n	8004640 <UART_SetConfig+0x194>
 80045e0:	2310      	movs	r3, #16
 80045e2:	76fb      	strb	r3, [r7, #27]
 80045e4:	e02c      	b.n	8004640 <UART_SetConfig+0x194>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	4a6b      	ldr	r2, [pc, #428]	; (8004798 <UART_SetConfig+0x2ec>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d125      	bne.n	800463c <UART_SetConfig+0x190>
 80045f0:	4b6b      	ldr	r3, [pc, #428]	; (80047a0 <UART_SetConfig+0x2f4>)
 80045f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045f6:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045fa:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045fe:	d017      	beq.n	8004630 <UART_SetConfig+0x184>
 8004600:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004604:	d817      	bhi.n	8004636 <UART_SetConfig+0x18a>
 8004606:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800460a:	d00b      	beq.n	8004624 <UART_SetConfig+0x178>
 800460c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004610:	d811      	bhi.n	8004636 <UART_SetConfig+0x18a>
 8004612:	2b00      	cmp	r3, #0
 8004614:	d003      	beq.n	800461e <UART_SetConfig+0x172>
 8004616:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800461a:	d006      	beq.n	800462a <UART_SetConfig+0x17e>
 800461c:	e00b      	b.n	8004636 <UART_SetConfig+0x18a>
 800461e:	2300      	movs	r3, #0
 8004620:	76fb      	strb	r3, [r7, #27]
 8004622:	e00d      	b.n	8004640 <UART_SetConfig+0x194>
 8004624:	2302      	movs	r3, #2
 8004626:	76fb      	strb	r3, [r7, #27]
 8004628:	e00a      	b.n	8004640 <UART_SetConfig+0x194>
 800462a:	2304      	movs	r3, #4
 800462c:	76fb      	strb	r3, [r7, #27]
 800462e:	e007      	b.n	8004640 <UART_SetConfig+0x194>
 8004630:	2308      	movs	r3, #8
 8004632:	76fb      	strb	r3, [r7, #27]
 8004634:	e004      	b.n	8004640 <UART_SetConfig+0x194>
 8004636:	2310      	movs	r3, #16
 8004638:	76fb      	strb	r3, [r7, #27]
 800463a:	e001      	b.n	8004640 <UART_SetConfig+0x194>
 800463c:	2310      	movs	r3, #16
 800463e:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a54      	ldr	r2, [pc, #336]	; (8004798 <UART_SetConfig+0x2ec>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d173      	bne.n	8004732 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800464a:	7efb      	ldrb	r3, [r7, #27]
 800464c:	2b08      	cmp	r3, #8
 800464e:	d824      	bhi.n	800469a <UART_SetConfig+0x1ee>
 8004650:	a201      	add	r2, pc, #4	; (adr r2, 8004658 <UART_SetConfig+0x1ac>)
 8004652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004656:	bf00      	nop
 8004658:	0800467d 	.word	0x0800467d
 800465c:	0800469b 	.word	0x0800469b
 8004660:	08004685 	.word	0x08004685
 8004664:	0800469b 	.word	0x0800469b
 8004668:	0800468b 	.word	0x0800468b
 800466c:	0800469b 	.word	0x0800469b
 8004670:	0800469b 	.word	0x0800469b
 8004674:	0800469b 	.word	0x0800469b
 8004678:	08004693 	.word	0x08004693
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800467c:	f7fe fb50 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004680:	6178      	str	r0, [r7, #20]
        break;
 8004682:	e00f      	b.n	80046a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004684:	4b48      	ldr	r3, [pc, #288]	; (80047a8 <UART_SetConfig+0x2fc>)
 8004686:	617b      	str	r3, [r7, #20]
        break;
 8004688:	e00c      	b.n	80046a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800468a:	f7fe fab1 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 800468e:	6178      	str	r0, [r7, #20]
        break;
 8004690:	e008      	b.n	80046a4 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004696:	617b      	str	r3, [r7, #20]
        break;
 8004698:	e004      	b.n	80046a4 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	76bb      	strb	r3, [r7, #26]
        break;
 80046a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80fc 	beq.w	80048a4 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	005b      	lsls	r3, r3, #1
 80046b4:	4413      	add	r3, r2
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	429a      	cmp	r2, r3
 80046ba:	d305      	bcc.n	80046c8 <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d902      	bls.n	80046ce <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	76bb      	strb	r3, [r7, #26]
 80046cc:	e0ea      	b.n	80048a4 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f04f 0100 	mov.w	r1, #0
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	020b      	lsls	r3, r1, #8
 80046e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80046e4:	0202      	lsls	r2, r0, #8
 80046e6:	6879      	ldr	r1, [r7, #4]
 80046e8:	6849      	ldr	r1, [r1, #4]
 80046ea:	0849      	lsrs	r1, r1, #1
 80046ec:	4608      	mov	r0, r1
 80046ee:	f04f 0100 	mov.w	r1, #0
 80046f2:	1814      	adds	r4, r2, r0
 80046f4:	eb43 0501 	adc.w	r5, r3, r1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685b      	ldr	r3, [r3, #4]
 80046fc:	461a      	mov	r2, r3
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	4620      	mov	r0, r4
 8004704:	4629      	mov	r1, r5
 8004706:	f7fb fdbb 	bl	8000280 <__aeabi_uldivmod>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4613      	mov	r3, r2
 8004710:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004718:	d308      	bcc.n	800472c <UART_SetConfig+0x280>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004720:	d204      	bcs.n	800472c <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	693a      	ldr	r2, [r7, #16]
 8004728:	60da      	str	r2, [r3, #12]
 800472a:	e0bb      	b.n	80048a4 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	76bb      	strb	r3, [r7, #26]
 8004730:	e0b8      	b.n	80048a4 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	69db      	ldr	r3, [r3, #28]
 8004736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800473a:	d167      	bne.n	800480c <UART_SetConfig+0x360>
  {
    switch (clocksource)
 800473c:	7efb      	ldrb	r3, [r7, #27]
 800473e:	2b08      	cmp	r3, #8
 8004740:	d834      	bhi.n	80047ac <UART_SetConfig+0x300>
 8004742:	a201      	add	r2, pc, #4	; (adr r2, 8004748 <UART_SetConfig+0x29c>)
 8004744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004748:	0800476d 	.word	0x0800476d
 800474c:	08004775 	.word	0x08004775
 8004750:	0800477d 	.word	0x0800477d
 8004754:	080047ad 	.word	0x080047ad
 8004758:	08004783 	.word	0x08004783
 800475c:	080047ad 	.word	0x080047ad
 8004760:	080047ad 	.word	0x080047ad
 8004764:	080047ad 	.word	0x080047ad
 8004768:	0800478b 	.word	0x0800478b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800476c:	f7fe fad8 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004770:	6178      	str	r0, [r7, #20]
        break;
 8004772:	e020      	b.n	80047b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004774:	f7fe faea 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8004778:	6178      	str	r0, [r7, #20]
        break;
 800477a:	e01c      	b.n	80047b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800477c:	4b0a      	ldr	r3, [pc, #40]	; (80047a8 <UART_SetConfig+0x2fc>)
 800477e:	617b      	str	r3, [r7, #20]
        break;
 8004780:	e019      	b.n	80047b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004782:	f7fe fa35 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8004786:	6178      	str	r0, [r7, #20]
        break;
 8004788:	e015      	b.n	80047b6 <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800478a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800478e:	617b      	str	r3, [r7, #20]
        break;
 8004790:	e011      	b.n	80047b6 <UART_SetConfig+0x30a>
 8004792:	bf00      	nop
 8004794:	efff69f3 	.word	0xefff69f3
 8004798:	40008000 	.word	0x40008000
 800479c:	40013800 	.word	0x40013800
 80047a0:	40021000 	.word	0x40021000
 80047a4:	40004400 	.word	0x40004400
 80047a8:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80047b0:	2301      	movs	r3, #1
 80047b2:	76bb      	strb	r3, [r7, #26]
        break;
 80047b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d073      	beq.n	80048a4 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	005a      	lsls	r2, r3, #1
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	085b      	lsrs	r3, r3, #1
 80047c6:	441a      	add	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d0:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b0f      	cmp	r3, #15
 80047d6:	d916      	bls.n	8004806 <UART_SetConfig+0x35a>
 80047d8:	693b      	ldr	r3, [r7, #16]
 80047da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047de:	d212      	bcs.n	8004806 <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047e0:	693b      	ldr	r3, [r7, #16]
 80047e2:	b29b      	uxth	r3, r3
 80047e4:	f023 030f 	bic.w	r3, r3, #15
 80047e8:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	085b      	lsrs	r3, r3, #1
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	b29a      	uxth	r2, r3
 80047f6:	89fb      	ldrh	r3, [r7, #14]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	89fa      	ldrh	r2, [r7, #14]
 8004802:	60da      	str	r2, [r3, #12]
 8004804:	e04e      	b.n	80048a4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8004806:	2301      	movs	r3, #1
 8004808:	76bb      	strb	r3, [r7, #26]
 800480a:	e04b      	b.n	80048a4 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 800480c:	7efb      	ldrb	r3, [r7, #27]
 800480e:	2b08      	cmp	r3, #8
 8004810:	d827      	bhi.n	8004862 <UART_SetConfig+0x3b6>
 8004812:	a201      	add	r2, pc, #4	; (adr r2, 8004818 <UART_SetConfig+0x36c>)
 8004814:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004818:	0800483d 	.word	0x0800483d
 800481c:	08004845 	.word	0x08004845
 8004820:	0800484d 	.word	0x0800484d
 8004824:	08004863 	.word	0x08004863
 8004828:	08004853 	.word	0x08004853
 800482c:	08004863 	.word	0x08004863
 8004830:	08004863 	.word	0x08004863
 8004834:	08004863 	.word	0x08004863
 8004838:	0800485b 	.word	0x0800485b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800483c:	f7fe fa70 	bl	8002d20 <HAL_RCC_GetPCLK1Freq>
 8004840:	6178      	str	r0, [r7, #20]
        break;
 8004842:	e013      	b.n	800486c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004844:	f7fe fa82 	bl	8002d4c <HAL_RCC_GetPCLK2Freq>
 8004848:	6178      	str	r0, [r7, #20]
        break;
 800484a:	e00f      	b.n	800486c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800484c:	4b1b      	ldr	r3, [pc, #108]	; (80048bc <UART_SetConfig+0x410>)
 800484e:	617b      	str	r3, [r7, #20]
        break;
 8004850:	e00c      	b.n	800486c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004852:	f7fe f9cd 	bl	8002bf0 <HAL_RCC_GetSysClockFreq>
 8004856:	6178      	str	r0, [r7, #20]
        break;
 8004858:	e008      	b.n	800486c <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800485a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800485e:	617b      	str	r3, [r7, #20]
        break;
 8004860:	e004      	b.n	800486c <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8004862:	2300      	movs	r3, #0
 8004864:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8004866:	2301      	movs	r3, #1
 8004868:	76bb      	strb	r3, [r7, #26]
        break;
 800486a:	bf00      	nop
    }

    if (pclk != 0U)
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d018      	beq.n	80048a4 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	085a      	lsrs	r2, r3, #1
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	441a      	add	r2, r3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	fbb2 f3f3 	udiv	r3, r2, r3
 8004884:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	2b0f      	cmp	r3, #15
 800488a:	d909      	bls.n	80048a0 <UART_SetConfig+0x3f4>
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004892:	d205      	bcs.n	80048a0 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	b29a      	uxth	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	60da      	str	r2, [r3, #12]
 800489e:	e001      	b.n	80048a4 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 80048a0:	2301      	movs	r3, #1
 80048a2:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2200      	movs	r2, #0
 80048ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80048b0:	7ebb      	ldrb	r3, [r7, #26]
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3720      	adds	r7, #32
 80048b6:	46bd      	mov	sp, r7
 80048b8:	bdb0      	pop	{r4, r5, r7, pc}
 80048ba:	bf00      	nop
 80048bc:	00f42400 	.word	0x00f42400

080048c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b083      	sub	sp, #12
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048cc:	f003 0301 	and.w	r3, r3, #1
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00a      	beq.n	80048ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	685b      	ldr	r3, [r3, #4]
 80048da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ee:	f003 0302 	and.w	r3, r3, #2
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d00a      	beq.n	800490c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	430a      	orrs	r2, r1
 800490a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d00a      	beq.n	800492e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	430a      	orrs	r2, r1
 800492c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d00a      	beq.n	8004950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	430a      	orrs	r2, r1
 800494e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004954:	f003 0310 	and.w	r3, r3, #16
 8004958:	2b00      	cmp	r3, #0
 800495a:	d00a      	beq.n	8004972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	689b      	ldr	r3, [r3, #8]
 8004962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	430a      	orrs	r2, r1
 8004970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	d00a      	beq.n	8004994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	430a      	orrs	r2, r1
 8004992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01a      	beq.n	80049d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	430a      	orrs	r2, r1
 80049b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049be:	d10a      	bne.n	80049d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	685b      	ldr	r3, [r3, #4]
 80049c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	430a      	orrs	r2, r1
 80049d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00a      	beq.n	80049f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	605a      	str	r2, [r3, #4]
  }
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b086      	sub	sp, #24
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a14:	f7fd f834 	bl	8001a80 <HAL_GetTick>
 8004a18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 0308 	and.w	r3, r3, #8
 8004a24:	2b08      	cmp	r3, #8
 8004a26:	d10e      	bne.n	8004a46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a2c:	9300      	str	r3, [sp, #0]
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f82d 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d001      	beq.n	8004a46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a42:	2303      	movs	r3, #3
 8004a44:	e023      	b.n	8004a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0304 	and.w	r3, r3, #4
 8004a50:	2b04      	cmp	r3, #4
 8004a52:	d10e      	bne.n	8004a72 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a54:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a58:	9300      	str	r3, [sp, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f000 f817 	bl	8004a96 <UART_WaitOnFlagUntilTimeout>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	e00d      	b.n	8004a8e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2220      	movs	r2, #32
 8004a76:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	2220      	movs	r2, #32
 8004a7c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
}
 8004a8e:	4618      	mov	r0, r3
 8004a90:	3710      	adds	r7, #16
 8004a92:	46bd      	mov	sp, r7
 8004a94:	bd80      	pop	{r7, pc}

08004a96 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a96:	b580      	push	{r7, lr}
 8004a98:	b09c      	sub	sp, #112	; 0x70
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	60f8      	str	r0, [r7, #12]
 8004a9e:	60b9      	str	r1, [r7, #8]
 8004aa0:	603b      	str	r3, [r7, #0]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004aa6:	e0a5      	b.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aa8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004aaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aae:	f000 80a1 	beq.w	8004bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ab2:	f7fc ffe5 	bl	8001a80 <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d302      	bcc.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x32>
 8004ac2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d13e      	bne.n	8004b46 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ace:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad0:	e853 3f00 	ldrex	r3, [r3]
 8004ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004ad6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ad8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004adc:	667b      	str	r3, [r7, #100]	; 0x64
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004ae6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004ae8:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004aec:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004aee:	e841 2300 	strex	r3, r2, [r1]
 8004af2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d1e6      	bne.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	3308      	adds	r3, #8
 8004b00:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b02:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b04:	e853 3f00 	ldrex	r3, [r3]
 8004b08:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	663b      	str	r3, [r7, #96]	; 0x60
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	3308      	adds	r3, #8
 8004b18:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004b1a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004b1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004b20:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b22:	e841 2300 	strex	r3, r2, [r1]
 8004b26:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004b28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1e5      	bne.n	8004afa <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2220      	movs	r2, #32
 8004b32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2220      	movs	r2, #32
 8004b38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e067      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0304 	and.w	r3, r3, #4
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d04f      	beq.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	69db      	ldr	r3, [r3, #28]
 8004b5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d147      	bne.n	8004bf4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b6c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b76:	e853 3f00 	ldrex	r3, [r3]
 8004b7a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004b82:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	461a      	mov	r2, r3
 8004b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b8e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004b92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e6      	bne.n	8004b6e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3308      	adds	r3, #8
 8004ba6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	e853 3f00 	ldrex	r3, [r3]
 8004bae:	613b      	str	r3, [r7, #16]
   return(result);
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	f023 0301 	bic.w	r3, r3, #1
 8004bb6:	66bb      	str	r3, [r7, #104]	; 0x68
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	3308      	adds	r3, #8
 8004bbe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004bc0:	623a      	str	r2, [r7, #32]
 8004bc2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	69f9      	ldr	r1, [r7, #28]
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	61bb      	str	r3, [r7, #24]
   return(result);
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e5      	bne.n	8004ba0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2220      	movs	r2, #32
 8004bd8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	2220      	movs	r2, #32
 8004bde:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2220      	movs	r2, #32
 8004be4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	2200      	movs	r2, #0
 8004bec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e010      	b.n	8004c16 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	69da      	ldr	r2, [r3, #28]
 8004bfa:	68bb      	ldr	r3, [r7, #8]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	bf0c      	ite	eq
 8004c04:	2301      	moveq	r3, #1
 8004c06:	2300      	movne	r3, #0
 8004c08:	b2db      	uxtb	r3, r3
 8004c0a:	461a      	mov	r2, r3
 8004c0c:	79fb      	ldrb	r3, [r7, #7]
 8004c0e:	429a      	cmp	r2, r3
 8004c10:	f43f af4a 	beq.w	8004aa8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3770      	adds	r7, #112	; 0x70
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
	...

08004c20 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b097      	sub	sp, #92	; 0x5c
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	60f8      	str	r0, [r7, #12]
 8004c28:	60b9      	str	r1, [r7, #8]
 8004c2a:	4613      	mov	r3, r2
 8004c2c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68ba      	ldr	r2, [r7, #8]
 8004c32:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	88fa      	ldrh	r2, [r7, #6]
 8004c38:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	88fa      	ldrh	r2, [r7, #6]
 8004c40:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2200      	movs	r2, #0
 8004c48:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d10e      	bne.n	8004c72 <UART_Start_Receive_IT+0x52>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d105      	bne.n	8004c68 <UART_Start_Receive_IT+0x48>
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004c62:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c66:	e02d      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	22ff      	movs	r2, #255	; 0xff
 8004c6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c70:	e028      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d10d      	bne.n	8004c96 <UART_Start_Receive_IT+0x76>
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	691b      	ldr	r3, [r3, #16]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d104      	bne.n	8004c8c <UART_Start_Receive_IT+0x6c>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	22ff      	movs	r2, #255	; 0xff
 8004c86:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c8a:	e01b      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	227f      	movs	r2, #127	; 0x7f
 8004c90:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004c94:	e016      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004c9e:	d10d      	bne.n	8004cbc <UART_Start_Receive_IT+0x9c>
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d104      	bne.n	8004cb2 <UART_Start_Receive_IT+0x92>
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	227f      	movs	r2, #127	; 0x7f
 8004cac:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cb0:	e008      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	223f      	movs	r2, #63	; 0x3f
 8004cb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004cba:	e003      	b.n	8004cc4 <UART_Start_Receive_IT+0xa4>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	2222      	movs	r2, #34	; 0x22
 8004cd0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	3308      	adds	r3, #8
 8004cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cdc:	e853 3f00 	ldrex	r3, [r3]
 8004ce0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce4:	f043 0301 	orr.w	r3, r3, #1
 8004ce8:	657b      	str	r3, [r7, #84]	; 0x54
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	3308      	adds	r3, #8
 8004cf0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004cf2:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cf4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cfa:	e841 2300 	strex	r3, r2, [r1]
 8004cfe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004d00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d1e5      	bne.n	8004cd2 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d0e:	d107      	bne.n	8004d20 <UART_Start_Receive_IT+0x100>
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	691b      	ldr	r3, [r3, #16]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d103      	bne.n	8004d20 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	4a24      	ldr	r2, [pc, #144]	; (8004dac <UART_Start_Receive_IT+0x18c>)
 8004d1c:	665a      	str	r2, [r3, #100]	; 0x64
 8004d1e:	e002      	b.n	8004d26 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	4a23      	ldr	r2, [pc, #140]	; (8004db0 <UART_Start_Receive_IT+0x190>)
 8004d24:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d019      	beq.n	8004d6a <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d3e:	e853 3f00 	ldrex	r3, [r3]
 8004d42:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d46:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004d4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	461a      	mov	r2, r3
 8004d52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d54:	637b      	str	r3, [r7, #52]	; 0x34
 8004d56:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d58:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d5c:	e841 2300 	strex	r3, r2, [r1]
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d1e6      	bne.n	8004d36 <UART_Start_Receive_IT+0x116>
 8004d68:	e018      	b.n	8004d9c <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	e853 3f00 	ldrex	r3, [r3]
 8004d76:	613b      	str	r3, [r7, #16]
   return(result);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	f043 0320 	orr.w	r3, r3, #32
 8004d7e:	653b      	str	r3, [r7, #80]	; 0x50
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	461a      	mov	r2, r3
 8004d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	69f9      	ldr	r1, [r7, #28]
 8004d8e:	6a3a      	ldr	r2, [r7, #32]
 8004d90:	e841 2300 	strex	r3, r2, [r1]
 8004d94:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d96:	69bb      	ldr	r3, [r7, #24]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d1e6      	bne.n	8004d6a <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004d9c:	2300      	movs	r3, #0
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	375c      	adds	r7, #92	; 0x5c
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	0800505b 	.word	0x0800505b
 8004db0:	08004efb 	.word	0x08004efb

08004db4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b095      	sub	sp, #84	; 0x54
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dc4:	e853 3f00 	ldrex	r3, [r3]
 8004dc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dcc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dda:	643b      	str	r3, [r7, #64]	; 0x40
 8004ddc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004de0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004de2:	e841 2300 	strex	r3, r2, [r1]
 8004de6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1e6      	bne.n	8004dbc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3308      	adds	r3, #8
 8004df4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6a3b      	ldr	r3, [r7, #32]
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004dfe:	69fb      	ldr	r3, [r7, #28]
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	3308      	adds	r3, #8
 8004e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e16:	e841 2300 	strex	r3, r2, [r1]
 8004e1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d1e5      	bne.n	8004dee <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d118      	bne.n	8004e5c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	e853 3f00 	ldrex	r3, [r3]
 8004e36:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f023 0310 	bic.w	r3, r3, #16
 8004e3e:	647b      	str	r3, [r7, #68]	; 0x44
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	461a      	mov	r2, r3
 8004e46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e48:	61bb      	str	r3, [r7, #24]
 8004e4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4c:	6979      	ldr	r1, [r7, #20]
 8004e4e:	69ba      	ldr	r2, [r7, #24]
 8004e50:	e841 2300 	strex	r3, r2, [r1]
 8004e54:	613b      	str	r3, [r7, #16]
   return(result);
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d1e6      	bne.n	8004e2a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2220      	movs	r2, #32
 8004e60:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004e6e:	bf00      	nop
 8004e70:	3754      	adds	r7, #84	; 0x54
 8004e72:	46bd      	mov	sp, r7
 8004e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e78:	4770      	bx	lr

08004e7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e7a:	b580      	push	{r7, lr}
 8004e7c:	b084      	sub	sp, #16
 8004e7e:	af00      	add	r7, sp, #0
 8004e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f7ff faf1 	bl	8004480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e9e:	bf00      	nop
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b088      	sub	sp, #32
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	61bb      	str	r3, [r7, #24]
 8004ece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6979      	ldr	r1, [r7, #20]
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e6      	bne.n	8004eae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004eec:	6878      	ldr	r0, [r7, #4]
 8004eee:	f7ff fabd 	bl	800446c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ef2:	bf00      	nop
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b096      	sub	sp, #88	; 0x58
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004f08:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004f10:	2b22      	cmp	r3, #34	; 0x22
 8004f12:	f040 8094 	bne.w	800503e <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004f1c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004f20:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8004f24:	b2d9      	uxtb	r1, r3
 8004f26:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004f2a:	b2da      	uxtb	r2, r3
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f30:	400a      	ands	r2, r1
 8004f32:	b2d2      	uxtb	r2, r2
 8004f34:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f3a:	1c5a      	adds	r2, r3, #1
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f46:	b29b      	uxth	r3, r3
 8004f48:	3b01      	subs	r3, #1
 8004f4a:	b29a      	uxth	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d179      	bne.n	8005052 <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f72:	653b      	str	r3, [r7, #80]	; 0x50
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004f7e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f80:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f82:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f84:	e841 2300 	strex	r3, r2, [r1]
 8004f88:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1e6      	bne.n	8004f5e <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	3308      	adds	r3, #8
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f023 0301 	bic.w	r3, r3, #1
 8004fa6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3308      	adds	r3, #8
 8004fae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004fb0:	633a      	str	r2, [r7, #48]	; 0x30
 8004fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e5      	bne.n	8004f90 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2220      	movs	r2, #32
 8004fc8:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d12e      	bne.n	8005036 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	e853 3f00 	ldrex	r3, [r3]
 8004fea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	f023 0310 	bic.w	r3, r3, #16
 8004ff2:	64bb      	str	r3, [r7, #72]	; 0x48
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004ffc:	61fb      	str	r3, [r7, #28]
 8004ffe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005000:	69b9      	ldr	r1, [r7, #24]
 8005002:	69fa      	ldr	r2, [r7, #28]
 8005004:	e841 2300 	strex	r3, r2, [r1]
 8005008:	617b      	str	r3, [r7, #20]
   return(result);
 800500a:	697b      	ldr	r3, [r7, #20]
 800500c:	2b00      	cmp	r3, #0
 800500e:	d1e6      	bne.n	8004fde <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	69db      	ldr	r3, [r3, #28]
 8005016:	f003 0310 	and.w	r3, r3, #16
 800501a:	2b10      	cmp	r3, #16
 800501c:	d103      	bne.n	8005026 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2210      	movs	r2, #16
 8005024:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800502c:	4619      	mov	r1, r3
 800502e:	6878      	ldr	r0, [r7, #4]
 8005030:	f7ff fa30 	bl	8004494 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005034:	e00d      	b.n	8005052 <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f7fb fe0e 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 800503c:	e009      	b.n	8005052 <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	8b1b      	ldrh	r3, [r3, #24]
 8005044:	b29a      	uxth	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f042 0208 	orr.w	r2, r2, #8
 800504e:	b292      	uxth	r2, r2
 8005050:	831a      	strh	r2, [r3, #24]
}
 8005052:	bf00      	nop
 8005054:	3758      	adds	r7, #88	; 0x58
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}

0800505a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800505a:	b580      	push	{r7, lr}
 800505c:	b096      	sub	sp, #88	; 0x58
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005068:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005070:	2b22      	cmp	r3, #34	; 0x22
 8005072:	f040 8094 	bne.w	800519e <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800507c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005084:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005086:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800508a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800508e:	4013      	ands	r3, r2
 8005090:	b29a      	uxth	r2, r3
 8005092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005094:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800509a:	1c9a      	adds	r2, r3, #2
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050a6:	b29b      	uxth	r3, r3
 80050a8:	3b01      	subs	r3, #1
 80050aa:	b29a      	uxth	r2, r3
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d179      	bne.n	80051b2 <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050dc:	643b      	str	r3, [r7, #64]	; 0x40
 80050de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	3308      	adds	r3, #8
 80050f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f023 0301 	bic.w	r3, r3, #1
 8005106:	64bb      	str	r3, [r7, #72]	; 0x48
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	3308      	adds	r3, #8
 800510e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005110:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005112:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e5      	bne.n	80050f0 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2220      	movs	r2, #32
 8005128:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005134:	2b01      	cmp	r3, #1
 8005136:	d12e      	bne.n	8005196 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2200      	movs	r2, #0
 800513c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	e853 3f00 	ldrex	r3, [r3]
 800514a:	60bb      	str	r3, [r7, #8]
   return(result);
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	f023 0310 	bic.w	r3, r3, #16
 8005152:	647b      	str	r3, [r7, #68]	; 0x44
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	461a      	mov	r2, r3
 800515a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800515c:	61bb      	str	r3, [r7, #24]
 800515e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005160:	6979      	ldr	r1, [r7, #20]
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	e841 2300 	strex	r3, r2, [r1]
 8005168:	613b      	str	r3, [r7, #16]
   return(result);
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d1e6      	bne.n	800513e <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	69db      	ldr	r3, [r3, #28]
 8005176:	f003 0310 	and.w	r3, r3, #16
 800517a:	2b10      	cmp	r3, #16
 800517c:	d103      	bne.n	8005186 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2210      	movs	r2, #16
 8005184:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800518c:	4619      	mov	r1, r3
 800518e:	6878      	ldr	r0, [r7, #4]
 8005190:	f7ff f980 	bl	8004494 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005194:	e00d      	b.n	80051b2 <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f7fb fd5e 	bl	8000c58 <HAL_UART_RxCpltCallback>
}
 800519c:	e009      	b.n	80051b2 <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	8b1b      	ldrh	r3, [r3, #24]
 80051a4:	b29a      	uxth	r2, r3
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0208 	orr.w	r2, r2, #8
 80051ae:	b292      	uxth	r2, r2
 80051b0:	831a      	strh	r2, [r3, #24]
}
 80051b2:	bf00      	nop
 80051b4:	3758      	adds	r7, #88	; 0x58
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}

080051ba <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80051ba:	b480      	push	{r7}
 80051bc:	b083      	sub	sp, #12
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80051c2:	bf00      	nop
 80051c4:	370c      	adds	r7, #12
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
	...

080051d0 <__errno>:
 80051d0:	4b01      	ldr	r3, [pc, #4]	; (80051d8 <__errno+0x8>)
 80051d2:	6818      	ldr	r0, [r3, #0]
 80051d4:	4770      	bx	lr
 80051d6:	bf00      	nop
 80051d8:	2000000c 	.word	0x2000000c

080051dc <__libc_init_array>:
 80051dc:	b570      	push	{r4, r5, r6, lr}
 80051de:	4d0d      	ldr	r5, [pc, #52]	; (8005214 <__libc_init_array+0x38>)
 80051e0:	4c0d      	ldr	r4, [pc, #52]	; (8005218 <__libc_init_array+0x3c>)
 80051e2:	1b64      	subs	r4, r4, r5
 80051e4:	10a4      	asrs	r4, r4, #2
 80051e6:	2600      	movs	r6, #0
 80051e8:	42a6      	cmp	r6, r4
 80051ea:	d109      	bne.n	8005200 <__libc_init_array+0x24>
 80051ec:	4d0b      	ldr	r5, [pc, #44]	; (800521c <__libc_init_array+0x40>)
 80051ee:	4c0c      	ldr	r4, [pc, #48]	; (8005220 <__libc_init_array+0x44>)
 80051f0:	f001 f948 	bl	8006484 <_init>
 80051f4:	1b64      	subs	r4, r4, r5
 80051f6:	10a4      	asrs	r4, r4, #2
 80051f8:	2600      	movs	r6, #0
 80051fa:	42a6      	cmp	r6, r4
 80051fc:	d105      	bne.n	800520a <__libc_init_array+0x2e>
 80051fe:	bd70      	pop	{r4, r5, r6, pc}
 8005200:	f855 3b04 	ldr.w	r3, [r5], #4
 8005204:	4798      	blx	r3
 8005206:	3601      	adds	r6, #1
 8005208:	e7ee      	b.n	80051e8 <__libc_init_array+0xc>
 800520a:	f855 3b04 	ldr.w	r3, [r5], #4
 800520e:	4798      	blx	r3
 8005210:	3601      	adds	r6, #1
 8005212:	e7f2      	b.n	80051fa <__libc_init_array+0x1e>
 8005214:	080067c4 	.word	0x080067c4
 8005218:	080067c4 	.word	0x080067c4
 800521c:	080067c4 	.word	0x080067c4
 8005220:	080067c8 	.word	0x080067c8

08005224 <memset>:
 8005224:	4402      	add	r2, r0
 8005226:	4603      	mov	r3, r0
 8005228:	4293      	cmp	r3, r2
 800522a:	d100      	bne.n	800522e <memset+0xa>
 800522c:	4770      	bx	lr
 800522e:	f803 1b01 	strb.w	r1, [r3], #1
 8005232:	e7f9      	b.n	8005228 <memset+0x4>

08005234 <iprintf>:
 8005234:	b40f      	push	{r0, r1, r2, r3}
 8005236:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <iprintf+0x2c>)
 8005238:	b513      	push	{r0, r1, r4, lr}
 800523a:	681c      	ldr	r4, [r3, #0]
 800523c:	b124      	cbz	r4, 8005248 <iprintf+0x14>
 800523e:	69a3      	ldr	r3, [r4, #24]
 8005240:	b913      	cbnz	r3, 8005248 <iprintf+0x14>
 8005242:	4620      	mov	r0, r4
 8005244:	f000 f886 	bl	8005354 <__sinit>
 8005248:	ab05      	add	r3, sp, #20
 800524a:	9a04      	ldr	r2, [sp, #16]
 800524c:	68a1      	ldr	r1, [r4, #8]
 800524e:	9301      	str	r3, [sp, #4]
 8005250:	4620      	mov	r0, r4
 8005252:	f000 faff 	bl	8005854 <_vfiprintf_r>
 8005256:	b002      	add	sp, #8
 8005258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800525c:	b004      	add	sp, #16
 800525e:	4770      	bx	lr
 8005260:	2000000c 	.word	0x2000000c

08005264 <siprintf>:
 8005264:	b40e      	push	{r1, r2, r3}
 8005266:	b500      	push	{lr}
 8005268:	b09c      	sub	sp, #112	; 0x70
 800526a:	ab1d      	add	r3, sp, #116	; 0x74
 800526c:	9002      	str	r0, [sp, #8]
 800526e:	9006      	str	r0, [sp, #24]
 8005270:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005274:	4809      	ldr	r0, [pc, #36]	; (800529c <siprintf+0x38>)
 8005276:	9107      	str	r1, [sp, #28]
 8005278:	9104      	str	r1, [sp, #16]
 800527a:	4909      	ldr	r1, [pc, #36]	; (80052a0 <siprintf+0x3c>)
 800527c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005280:	9105      	str	r1, [sp, #20]
 8005282:	6800      	ldr	r0, [r0, #0]
 8005284:	9301      	str	r3, [sp, #4]
 8005286:	a902      	add	r1, sp, #8
 8005288:	f000 f9ba 	bl	8005600 <_svfiprintf_r>
 800528c:	9b02      	ldr	r3, [sp, #8]
 800528e:	2200      	movs	r2, #0
 8005290:	701a      	strb	r2, [r3, #0]
 8005292:	b01c      	add	sp, #112	; 0x70
 8005294:	f85d eb04 	ldr.w	lr, [sp], #4
 8005298:	b003      	add	sp, #12
 800529a:	4770      	bx	lr
 800529c:	2000000c 	.word	0x2000000c
 80052a0:	ffff0208 	.word	0xffff0208

080052a4 <std>:
 80052a4:	2300      	movs	r3, #0
 80052a6:	b510      	push	{r4, lr}
 80052a8:	4604      	mov	r4, r0
 80052aa:	e9c0 3300 	strd	r3, r3, [r0]
 80052ae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80052b2:	6083      	str	r3, [r0, #8]
 80052b4:	8181      	strh	r1, [r0, #12]
 80052b6:	6643      	str	r3, [r0, #100]	; 0x64
 80052b8:	81c2      	strh	r2, [r0, #14]
 80052ba:	6183      	str	r3, [r0, #24]
 80052bc:	4619      	mov	r1, r3
 80052be:	2208      	movs	r2, #8
 80052c0:	305c      	adds	r0, #92	; 0x5c
 80052c2:	f7ff ffaf 	bl	8005224 <memset>
 80052c6:	4b05      	ldr	r3, [pc, #20]	; (80052dc <std+0x38>)
 80052c8:	6263      	str	r3, [r4, #36]	; 0x24
 80052ca:	4b05      	ldr	r3, [pc, #20]	; (80052e0 <std+0x3c>)
 80052cc:	62a3      	str	r3, [r4, #40]	; 0x28
 80052ce:	4b05      	ldr	r3, [pc, #20]	; (80052e4 <std+0x40>)
 80052d0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80052d2:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <std+0x44>)
 80052d4:	6224      	str	r4, [r4, #32]
 80052d6:	6323      	str	r3, [r4, #48]	; 0x30
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	bf00      	nop
 80052dc:	08005dfd 	.word	0x08005dfd
 80052e0:	08005e1f 	.word	0x08005e1f
 80052e4:	08005e57 	.word	0x08005e57
 80052e8:	08005e7b 	.word	0x08005e7b

080052ec <_cleanup_r>:
 80052ec:	4901      	ldr	r1, [pc, #4]	; (80052f4 <_cleanup_r+0x8>)
 80052ee:	f000 b8af 	b.w	8005450 <_fwalk_reent>
 80052f2:	bf00      	nop
 80052f4:	08006155 	.word	0x08006155

080052f8 <__sfmoreglue>:
 80052f8:	b570      	push	{r4, r5, r6, lr}
 80052fa:	1e4a      	subs	r2, r1, #1
 80052fc:	2568      	movs	r5, #104	; 0x68
 80052fe:	4355      	muls	r5, r2
 8005300:	460e      	mov	r6, r1
 8005302:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005306:	f000 f8c5 	bl	8005494 <_malloc_r>
 800530a:	4604      	mov	r4, r0
 800530c:	b140      	cbz	r0, 8005320 <__sfmoreglue+0x28>
 800530e:	2100      	movs	r1, #0
 8005310:	e9c0 1600 	strd	r1, r6, [r0]
 8005314:	300c      	adds	r0, #12
 8005316:	60a0      	str	r0, [r4, #8]
 8005318:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800531c:	f7ff ff82 	bl	8005224 <memset>
 8005320:	4620      	mov	r0, r4
 8005322:	bd70      	pop	{r4, r5, r6, pc}

08005324 <__sfp_lock_acquire>:
 8005324:	4801      	ldr	r0, [pc, #4]	; (800532c <__sfp_lock_acquire+0x8>)
 8005326:	f000 b8b3 	b.w	8005490 <__retarget_lock_acquire_recursive>
 800532a:	bf00      	nop
 800532c:	20000218 	.word	0x20000218

08005330 <__sfp_lock_release>:
 8005330:	4801      	ldr	r0, [pc, #4]	; (8005338 <__sfp_lock_release+0x8>)
 8005332:	f000 b8ae 	b.w	8005492 <__retarget_lock_release_recursive>
 8005336:	bf00      	nop
 8005338:	20000218 	.word	0x20000218

0800533c <__sinit_lock_acquire>:
 800533c:	4801      	ldr	r0, [pc, #4]	; (8005344 <__sinit_lock_acquire+0x8>)
 800533e:	f000 b8a7 	b.w	8005490 <__retarget_lock_acquire_recursive>
 8005342:	bf00      	nop
 8005344:	20000213 	.word	0x20000213

08005348 <__sinit_lock_release>:
 8005348:	4801      	ldr	r0, [pc, #4]	; (8005350 <__sinit_lock_release+0x8>)
 800534a:	f000 b8a2 	b.w	8005492 <__retarget_lock_release_recursive>
 800534e:	bf00      	nop
 8005350:	20000213 	.word	0x20000213

08005354 <__sinit>:
 8005354:	b510      	push	{r4, lr}
 8005356:	4604      	mov	r4, r0
 8005358:	f7ff fff0 	bl	800533c <__sinit_lock_acquire>
 800535c:	69a3      	ldr	r3, [r4, #24]
 800535e:	b11b      	cbz	r3, 8005368 <__sinit+0x14>
 8005360:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005364:	f7ff bff0 	b.w	8005348 <__sinit_lock_release>
 8005368:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800536c:	6523      	str	r3, [r4, #80]	; 0x50
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <__sinit+0x68>)
 8005370:	4a13      	ldr	r2, [pc, #76]	; (80053c0 <__sinit+0x6c>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	62a2      	str	r2, [r4, #40]	; 0x28
 8005376:	42a3      	cmp	r3, r4
 8005378:	bf04      	itt	eq
 800537a:	2301      	moveq	r3, #1
 800537c:	61a3      	streq	r3, [r4, #24]
 800537e:	4620      	mov	r0, r4
 8005380:	f000 f820 	bl	80053c4 <__sfp>
 8005384:	6060      	str	r0, [r4, #4]
 8005386:	4620      	mov	r0, r4
 8005388:	f000 f81c 	bl	80053c4 <__sfp>
 800538c:	60a0      	str	r0, [r4, #8]
 800538e:	4620      	mov	r0, r4
 8005390:	f000 f818 	bl	80053c4 <__sfp>
 8005394:	2200      	movs	r2, #0
 8005396:	60e0      	str	r0, [r4, #12]
 8005398:	2104      	movs	r1, #4
 800539a:	6860      	ldr	r0, [r4, #4]
 800539c:	f7ff ff82 	bl	80052a4 <std>
 80053a0:	68a0      	ldr	r0, [r4, #8]
 80053a2:	2201      	movs	r2, #1
 80053a4:	2109      	movs	r1, #9
 80053a6:	f7ff ff7d 	bl	80052a4 <std>
 80053aa:	68e0      	ldr	r0, [r4, #12]
 80053ac:	2202      	movs	r2, #2
 80053ae:	2112      	movs	r1, #18
 80053b0:	f7ff ff78 	bl	80052a4 <std>
 80053b4:	2301      	movs	r3, #1
 80053b6:	61a3      	str	r3, [r4, #24]
 80053b8:	e7d2      	b.n	8005360 <__sinit+0xc>
 80053ba:	bf00      	nop
 80053bc:	08006724 	.word	0x08006724
 80053c0:	080052ed 	.word	0x080052ed

080053c4 <__sfp>:
 80053c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80053c6:	4607      	mov	r7, r0
 80053c8:	f7ff ffac 	bl	8005324 <__sfp_lock_acquire>
 80053cc:	4b1e      	ldr	r3, [pc, #120]	; (8005448 <__sfp+0x84>)
 80053ce:	681e      	ldr	r6, [r3, #0]
 80053d0:	69b3      	ldr	r3, [r6, #24]
 80053d2:	b913      	cbnz	r3, 80053da <__sfp+0x16>
 80053d4:	4630      	mov	r0, r6
 80053d6:	f7ff ffbd 	bl	8005354 <__sinit>
 80053da:	3648      	adds	r6, #72	; 0x48
 80053dc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	d503      	bpl.n	80053ec <__sfp+0x28>
 80053e4:	6833      	ldr	r3, [r6, #0]
 80053e6:	b30b      	cbz	r3, 800542c <__sfp+0x68>
 80053e8:	6836      	ldr	r6, [r6, #0]
 80053ea:	e7f7      	b.n	80053dc <__sfp+0x18>
 80053ec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80053f0:	b9d5      	cbnz	r5, 8005428 <__sfp+0x64>
 80053f2:	4b16      	ldr	r3, [pc, #88]	; (800544c <__sfp+0x88>)
 80053f4:	60e3      	str	r3, [r4, #12]
 80053f6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80053fa:	6665      	str	r5, [r4, #100]	; 0x64
 80053fc:	f000 f847 	bl	800548e <__retarget_lock_init_recursive>
 8005400:	f7ff ff96 	bl	8005330 <__sfp_lock_release>
 8005404:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8005408:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800540c:	6025      	str	r5, [r4, #0]
 800540e:	61a5      	str	r5, [r4, #24]
 8005410:	2208      	movs	r2, #8
 8005412:	4629      	mov	r1, r5
 8005414:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005418:	f7ff ff04 	bl	8005224 <memset>
 800541c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005420:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005424:	4620      	mov	r0, r4
 8005426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005428:	3468      	adds	r4, #104	; 0x68
 800542a:	e7d9      	b.n	80053e0 <__sfp+0x1c>
 800542c:	2104      	movs	r1, #4
 800542e:	4638      	mov	r0, r7
 8005430:	f7ff ff62 	bl	80052f8 <__sfmoreglue>
 8005434:	4604      	mov	r4, r0
 8005436:	6030      	str	r0, [r6, #0]
 8005438:	2800      	cmp	r0, #0
 800543a:	d1d5      	bne.n	80053e8 <__sfp+0x24>
 800543c:	f7ff ff78 	bl	8005330 <__sfp_lock_release>
 8005440:	230c      	movs	r3, #12
 8005442:	603b      	str	r3, [r7, #0]
 8005444:	e7ee      	b.n	8005424 <__sfp+0x60>
 8005446:	bf00      	nop
 8005448:	08006724 	.word	0x08006724
 800544c:	ffff0001 	.word	0xffff0001

08005450 <_fwalk_reent>:
 8005450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005454:	4606      	mov	r6, r0
 8005456:	4688      	mov	r8, r1
 8005458:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800545c:	2700      	movs	r7, #0
 800545e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005462:	f1b9 0901 	subs.w	r9, r9, #1
 8005466:	d505      	bpl.n	8005474 <_fwalk_reent+0x24>
 8005468:	6824      	ldr	r4, [r4, #0]
 800546a:	2c00      	cmp	r4, #0
 800546c:	d1f7      	bne.n	800545e <_fwalk_reent+0xe>
 800546e:	4638      	mov	r0, r7
 8005470:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005474:	89ab      	ldrh	r3, [r5, #12]
 8005476:	2b01      	cmp	r3, #1
 8005478:	d907      	bls.n	800548a <_fwalk_reent+0x3a>
 800547a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800547e:	3301      	adds	r3, #1
 8005480:	d003      	beq.n	800548a <_fwalk_reent+0x3a>
 8005482:	4629      	mov	r1, r5
 8005484:	4630      	mov	r0, r6
 8005486:	47c0      	blx	r8
 8005488:	4307      	orrs	r7, r0
 800548a:	3568      	adds	r5, #104	; 0x68
 800548c:	e7e9      	b.n	8005462 <_fwalk_reent+0x12>

0800548e <__retarget_lock_init_recursive>:
 800548e:	4770      	bx	lr

08005490 <__retarget_lock_acquire_recursive>:
 8005490:	4770      	bx	lr

08005492 <__retarget_lock_release_recursive>:
 8005492:	4770      	bx	lr

08005494 <_malloc_r>:
 8005494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005496:	1ccd      	adds	r5, r1, #3
 8005498:	f025 0503 	bic.w	r5, r5, #3
 800549c:	3508      	adds	r5, #8
 800549e:	2d0c      	cmp	r5, #12
 80054a0:	bf38      	it	cc
 80054a2:	250c      	movcc	r5, #12
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	4606      	mov	r6, r0
 80054a8:	db01      	blt.n	80054ae <_malloc_r+0x1a>
 80054aa:	42a9      	cmp	r1, r5
 80054ac:	d903      	bls.n	80054b6 <_malloc_r+0x22>
 80054ae:	230c      	movs	r3, #12
 80054b0:	6033      	str	r3, [r6, #0]
 80054b2:	2000      	movs	r0, #0
 80054b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80054b6:	f000 ff27 	bl	8006308 <__malloc_lock>
 80054ba:	4921      	ldr	r1, [pc, #132]	; (8005540 <_malloc_r+0xac>)
 80054bc:	680a      	ldr	r2, [r1, #0]
 80054be:	4614      	mov	r4, r2
 80054c0:	b99c      	cbnz	r4, 80054ea <_malloc_r+0x56>
 80054c2:	4f20      	ldr	r7, [pc, #128]	; (8005544 <_malloc_r+0xb0>)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	b923      	cbnz	r3, 80054d2 <_malloc_r+0x3e>
 80054c8:	4621      	mov	r1, r4
 80054ca:	4630      	mov	r0, r6
 80054cc:	f000 fc86 	bl	8005ddc <_sbrk_r>
 80054d0:	6038      	str	r0, [r7, #0]
 80054d2:	4629      	mov	r1, r5
 80054d4:	4630      	mov	r0, r6
 80054d6:	f000 fc81 	bl	8005ddc <_sbrk_r>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d123      	bne.n	8005526 <_malloc_r+0x92>
 80054de:	230c      	movs	r3, #12
 80054e0:	6033      	str	r3, [r6, #0]
 80054e2:	4630      	mov	r0, r6
 80054e4:	f000 ff16 	bl	8006314 <__malloc_unlock>
 80054e8:	e7e3      	b.n	80054b2 <_malloc_r+0x1e>
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	1b5b      	subs	r3, r3, r5
 80054ee:	d417      	bmi.n	8005520 <_malloc_r+0x8c>
 80054f0:	2b0b      	cmp	r3, #11
 80054f2:	d903      	bls.n	80054fc <_malloc_r+0x68>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	441c      	add	r4, r3
 80054f8:	6025      	str	r5, [r4, #0]
 80054fa:	e004      	b.n	8005506 <_malloc_r+0x72>
 80054fc:	6863      	ldr	r3, [r4, #4]
 80054fe:	42a2      	cmp	r2, r4
 8005500:	bf0c      	ite	eq
 8005502:	600b      	streq	r3, [r1, #0]
 8005504:	6053      	strne	r3, [r2, #4]
 8005506:	4630      	mov	r0, r6
 8005508:	f000 ff04 	bl	8006314 <__malloc_unlock>
 800550c:	f104 000b 	add.w	r0, r4, #11
 8005510:	1d23      	adds	r3, r4, #4
 8005512:	f020 0007 	bic.w	r0, r0, #7
 8005516:	1ac2      	subs	r2, r0, r3
 8005518:	d0cc      	beq.n	80054b4 <_malloc_r+0x20>
 800551a:	1a1b      	subs	r3, r3, r0
 800551c:	50a3      	str	r3, [r4, r2]
 800551e:	e7c9      	b.n	80054b4 <_malloc_r+0x20>
 8005520:	4622      	mov	r2, r4
 8005522:	6864      	ldr	r4, [r4, #4]
 8005524:	e7cc      	b.n	80054c0 <_malloc_r+0x2c>
 8005526:	1cc4      	adds	r4, r0, #3
 8005528:	f024 0403 	bic.w	r4, r4, #3
 800552c:	42a0      	cmp	r0, r4
 800552e:	d0e3      	beq.n	80054f8 <_malloc_r+0x64>
 8005530:	1a21      	subs	r1, r4, r0
 8005532:	4630      	mov	r0, r6
 8005534:	f000 fc52 	bl	8005ddc <_sbrk_r>
 8005538:	3001      	adds	r0, #1
 800553a:	d1dd      	bne.n	80054f8 <_malloc_r+0x64>
 800553c:	e7cf      	b.n	80054de <_malloc_r+0x4a>
 800553e:	bf00      	nop
 8005540:	20000094 	.word	0x20000094
 8005544:	20000098 	.word	0x20000098

08005548 <__ssputs_r>:
 8005548:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800554c:	688e      	ldr	r6, [r1, #8]
 800554e:	429e      	cmp	r6, r3
 8005550:	4682      	mov	sl, r0
 8005552:	460c      	mov	r4, r1
 8005554:	4690      	mov	r8, r2
 8005556:	461f      	mov	r7, r3
 8005558:	d838      	bhi.n	80055cc <__ssputs_r+0x84>
 800555a:	898a      	ldrh	r2, [r1, #12]
 800555c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005560:	d032      	beq.n	80055c8 <__ssputs_r+0x80>
 8005562:	6825      	ldr	r5, [r4, #0]
 8005564:	6909      	ldr	r1, [r1, #16]
 8005566:	eba5 0901 	sub.w	r9, r5, r1
 800556a:	6965      	ldr	r5, [r4, #20]
 800556c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005570:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005574:	3301      	adds	r3, #1
 8005576:	444b      	add	r3, r9
 8005578:	106d      	asrs	r5, r5, #1
 800557a:	429d      	cmp	r5, r3
 800557c:	bf38      	it	cc
 800557e:	461d      	movcc	r5, r3
 8005580:	0553      	lsls	r3, r2, #21
 8005582:	d531      	bpl.n	80055e8 <__ssputs_r+0xa0>
 8005584:	4629      	mov	r1, r5
 8005586:	f7ff ff85 	bl	8005494 <_malloc_r>
 800558a:	4606      	mov	r6, r0
 800558c:	b950      	cbnz	r0, 80055a4 <__ssputs_r+0x5c>
 800558e:	230c      	movs	r3, #12
 8005590:	f8ca 3000 	str.w	r3, [sl]
 8005594:	89a3      	ldrh	r3, [r4, #12]
 8005596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800559a:	81a3      	strh	r3, [r4, #12]
 800559c:	f04f 30ff 	mov.w	r0, #4294967295
 80055a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80055a4:	6921      	ldr	r1, [r4, #16]
 80055a6:	464a      	mov	r2, r9
 80055a8:	f000 fe86 	bl	80062b8 <memcpy>
 80055ac:	89a3      	ldrh	r3, [r4, #12]
 80055ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80055b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055b6:	81a3      	strh	r3, [r4, #12]
 80055b8:	6126      	str	r6, [r4, #16]
 80055ba:	6165      	str	r5, [r4, #20]
 80055bc:	444e      	add	r6, r9
 80055be:	eba5 0509 	sub.w	r5, r5, r9
 80055c2:	6026      	str	r6, [r4, #0]
 80055c4:	60a5      	str	r5, [r4, #8]
 80055c6:	463e      	mov	r6, r7
 80055c8:	42be      	cmp	r6, r7
 80055ca:	d900      	bls.n	80055ce <__ssputs_r+0x86>
 80055cc:	463e      	mov	r6, r7
 80055ce:	4632      	mov	r2, r6
 80055d0:	6820      	ldr	r0, [r4, #0]
 80055d2:	4641      	mov	r1, r8
 80055d4:	f000 fe7e 	bl	80062d4 <memmove>
 80055d8:	68a3      	ldr	r3, [r4, #8]
 80055da:	6822      	ldr	r2, [r4, #0]
 80055dc:	1b9b      	subs	r3, r3, r6
 80055de:	4432      	add	r2, r6
 80055e0:	60a3      	str	r3, [r4, #8]
 80055e2:	6022      	str	r2, [r4, #0]
 80055e4:	2000      	movs	r0, #0
 80055e6:	e7db      	b.n	80055a0 <__ssputs_r+0x58>
 80055e8:	462a      	mov	r2, r5
 80055ea:	f000 fee9 	bl	80063c0 <_realloc_r>
 80055ee:	4606      	mov	r6, r0
 80055f0:	2800      	cmp	r0, #0
 80055f2:	d1e1      	bne.n	80055b8 <__ssputs_r+0x70>
 80055f4:	6921      	ldr	r1, [r4, #16]
 80055f6:	4650      	mov	r0, sl
 80055f8:	f000 fe92 	bl	8006320 <_free_r>
 80055fc:	e7c7      	b.n	800558e <__ssputs_r+0x46>
	...

08005600 <_svfiprintf_r>:
 8005600:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005604:	4698      	mov	r8, r3
 8005606:	898b      	ldrh	r3, [r1, #12]
 8005608:	061b      	lsls	r3, r3, #24
 800560a:	b09d      	sub	sp, #116	; 0x74
 800560c:	4607      	mov	r7, r0
 800560e:	460d      	mov	r5, r1
 8005610:	4614      	mov	r4, r2
 8005612:	d50e      	bpl.n	8005632 <_svfiprintf_r+0x32>
 8005614:	690b      	ldr	r3, [r1, #16]
 8005616:	b963      	cbnz	r3, 8005632 <_svfiprintf_r+0x32>
 8005618:	2140      	movs	r1, #64	; 0x40
 800561a:	f7ff ff3b 	bl	8005494 <_malloc_r>
 800561e:	6028      	str	r0, [r5, #0]
 8005620:	6128      	str	r0, [r5, #16]
 8005622:	b920      	cbnz	r0, 800562e <_svfiprintf_r+0x2e>
 8005624:	230c      	movs	r3, #12
 8005626:	603b      	str	r3, [r7, #0]
 8005628:	f04f 30ff 	mov.w	r0, #4294967295
 800562c:	e0d1      	b.n	80057d2 <_svfiprintf_r+0x1d2>
 800562e:	2340      	movs	r3, #64	; 0x40
 8005630:	616b      	str	r3, [r5, #20]
 8005632:	2300      	movs	r3, #0
 8005634:	9309      	str	r3, [sp, #36]	; 0x24
 8005636:	2320      	movs	r3, #32
 8005638:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800563c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005640:	2330      	movs	r3, #48	; 0x30
 8005642:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80057ec <_svfiprintf_r+0x1ec>
 8005646:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800564a:	f04f 0901 	mov.w	r9, #1
 800564e:	4623      	mov	r3, r4
 8005650:	469a      	mov	sl, r3
 8005652:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005656:	b10a      	cbz	r2, 800565c <_svfiprintf_r+0x5c>
 8005658:	2a25      	cmp	r2, #37	; 0x25
 800565a:	d1f9      	bne.n	8005650 <_svfiprintf_r+0x50>
 800565c:	ebba 0b04 	subs.w	fp, sl, r4
 8005660:	d00b      	beq.n	800567a <_svfiprintf_r+0x7a>
 8005662:	465b      	mov	r3, fp
 8005664:	4622      	mov	r2, r4
 8005666:	4629      	mov	r1, r5
 8005668:	4638      	mov	r0, r7
 800566a:	f7ff ff6d 	bl	8005548 <__ssputs_r>
 800566e:	3001      	adds	r0, #1
 8005670:	f000 80aa 	beq.w	80057c8 <_svfiprintf_r+0x1c8>
 8005674:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005676:	445a      	add	r2, fp
 8005678:	9209      	str	r2, [sp, #36]	; 0x24
 800567a:	f89a 3000 	ldrb.w	r3, [sl]
 800567e:	2b00      	cmp	r3, #0
 8005680:	f000 80a2 	beq.w	80057c8 <_svfiprintf_r+0x1c8>
 8005684:	2300      	movs	r3, #0
 8005686:	f04f 32ff 	mov.w	r2, #4294967295
 800568a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800568e:	f10a 0a01 	add.w	sl, sl, #1
 8005692:	9304      	str	r3, [sp, #16]
 8005694:	9307      	str	r3, [sp, #28]
 8005696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800569a:	931a      	str	r3, [sp, #104]	; 0x68
 800569c:	4654      	mov	r4, sl
 800569e:	2205      	movs	r2, #5
 80056a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80056a4:	4851      	ldr	r0, [pc, #324]	; (80057ec <_svfiprintf_r+0x1ec>)
 80056a6:	f7fa fd9b 	bl	80001e0 <memchr>
 80056aa:	9a04      	ldr	r2, [sp, #16]
 80056ac:	b9d8      	cbnz	r0, 80056e6 <_svfiprintf_r+0xe6>
 80056ae:	06d0      	lsls	r0, r2, #27
 80056b0:	bf44      	itt	mi
 80056b2:	2320      	movmi	r3, #32
 80056b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056b8:	0711      	lsls	r1, r2, #28
 80056ba:	bf44      	itt	mi
 80056bc:	232b      	movmi	r3, #43	; 0x2b
 80056be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80056c2:	f89a 3000 	ldrb.w	r3, [sl]
 80056c6:	2b2a      	cmp	r3, #42	; 0x2a
 80056c8:	d015      	beq.n	80056f6 <_svfiprintf_r+0xf6>
 80056ca:	9a07      	ldr	r2, [sp, #28]
 80056cc:	4654      	mov	r4, sl
 80056ce:	2000      	movs	r0, #0
 80056d0:	f04f 0c0a 	mov.w	ip, #10
 80056d4:	4621      	mov	r1, r4
 80056d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80056da:	3b30      	subs	r3, #48	; 0x30
 80056dc:	2b09      	cmp	r3, #9
 80056de:	d94e      	bls.n	800577e <_svfiprintf_r+0x17e>
 80056e0:	b1b0      	cbz	r0, 8005710 <_svfiprintf_r+0x110>
 80056e2:	9207      	str	r2, [sp, #28]
 80056e4:	e014      	b.n	8005710 <_svfiprintf_r+0x110>
 80056e6:	eba0 0308 	sub.w	r3, r0, r8
 80056ea:	fa09 f303 	lsl.w	r3, r9, r3
 80056ee:	4313      	orrs	r3, r2
 80056f0:	9304      	str	r3, [sp, #16]
 80056f2:	46a2      	mov	sl, r4
 80056f4:	e7d2      	b.n	800569c <_svfiprintf_r+0x9c>
 80056f6:	9b03      	ldr	r3, [sp, #12]
 80056f8:	1d19      	adds	r1, r3, #4
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	9103      	str	r1, [sp, #12]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	bfbb      	ittet	lt
 8005702:	425b      	neglt	r3, r3
 8005704:	f042 0202 	orrlt.w	r2, r2, #2
 8005708:	9307      	strge	r3, [sp, #28]
 800570a:	9307      	strlt	r3, [sp, #28]
 800570c:	bfb8      	it	lt
 800570e:	9204      	strlt	r2, [sp, #16]
 8005710:	7823      	ldrb	r3, [r4, #0]
 8005712:	2b2e      	cmp	r3, #46	; 0x2e
 8005714:	d10c      	bne.n	8005730 <_svfiprintf_r+0x130>
 8005716:	7863      	ldrb	r3, [r4, #1]
 8005718:	2b2a      	cmp	r3, #42	; 0x2a
 800571a:	d135      	bne.n	8005788 <_svfiprintf_r+0x188>
 800571c:	9b03      	ldr	r3, [sp, #12]
 800571e:	1d1a      	adds	r2, r3, #4
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	9203      	str	r2, [sp, #12]
 8005724:	2b00      	cmp	r3, #0
 8005726:	bfb8      	it	lt
 8005728:	f04f 33ff 	movlt.w	r3, #4294967295
 800572c:	3402      	adds	r4, #2
 800572e:	9305      	str	r3, [sp, #20]
 8005730:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80057fc <_svfiprintf_r+0x1fc>
 8005734:	7821      	ldrb	r1, [r4, #0]
 8005736:	2203      	movs	r2, #3
 8005738:	4650      	mov	r0, sl
 800573a:	f7fa fd51 	bl	80001e0 <memchr>
 800573e:	b140      	cbz	r0, 8005752 <_svfiprintf_r+0x152>
 8005740:	2340      	movs	r3, #64	; 0x40
 8005742:	eba0 000a 	sub.w	r0, r0, sl
 8005746:	fa03 f000 	lsl.w	r0, r3, r0
 800574a:	9b04      	ldr	r3, [sp, #16]
 800574c:	4303      	orrs	r3, r0
 800574e:	3401      	adds	r4, #1
 8005750:	9304      	str	r3, [sp, #16]
 8005752:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005756:	4826      	ldr	r0, [pc, #152]	; (80057f0 <_svfiprintf_r+0x1f0>)
 8005758:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800575c:	2206      	movs	r2, #6
 800575e:	f7fa fd3f 	bl	80001e0 <memchr>
 8005762:	2800      	cmp	r0, #0
 8005764:	d038      	beq.n	80057d8 <_svfiprintf_r+0x1d8>
 8005766:	4b23      	ldr	r3, [pc, #140]	; (80057f4 <_svfiprintf_r+0x1f4>)
 8005768:	bb1b      	cbnz	r3, 80057b2 <_svfiprintf_r+0x1b2>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	3307      	adds	r3, #7
 800576e:	f023 0307 	bic.w	r3, r3, #7
 8005772:	3308      	adds	r3, #8
 8005774:	9303      	str	r3, [sp, #12]
 8005776:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005778:	4433      	add	r3, r6
 800577a:	9309      	str	r3, [sp, #36]	; 0x24
 800577c:	e767      	b.n	800564e <_svfiprintf_r+0x4e>
 800577e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005782:	460c      	mov	r4, r1
 8005784:	2001      	movs	r0, #1
 8005786:	e7a5      	b.n	80056d4 <_svfiprintf_r+0xd4>
 8005788:	2300      	movs	r3, #0
 800578a:	3401      	adds	r4, #1
 800578c:	9305      	str	r3, [sp, #20]
 800578e:	4619      	mov	r1, r3
 8005790:	f04f 0c0a 	mov.w	ip, #10
 8005794:	4620      	mov	r0, r4
 8005796:	f810 2b01 	ldrb.w	r2, [r0], #1
 800579a:	3a30      	subs	r2, #48	; 0x30
 800579c:	2a09      	cmp	r2, #9
 800579e:	d903      	bls.n	80057a8 <_svfiprintf_r+0x1a8>
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d0c5      	beq.n	8005730 <_svfiprintf_r+0x130>
 80057a4:	9105      	str	r1, [sp, #20]
 80057a6:	e7c3      	b.n	8005730 <_svfiprintf_r+0x130>
 80057a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80057ac:	4604      	mov	r4, r0
 80057ae:	2301      	movs	r3, #1
 80057b0:	e7f0      	b.n	8005794 <_svfiprintf_r+0x194>
 80057b2:	ab03      	add	r3, sp, #12
 80057b4:	9300      	str	r3, [sp, #0]
 80057b6:	462a      	mov	r2, r5
 80057b8:	4b0f      	ldr	r3, [pc, #60]	; (80057f8 <_svfiprintf_r+0x1f8>)
 80057ba:	a904      	add	r1, sp, #16
 80057bc:	4638      	mov	r0, r7
 80057be:	f3af 8000 	nop.w
 80057c2:	1c42      	adds	r2, r0, #1
 80057c4:	4606      	mov	r6, r0
 80057c6:	d1d6      	bne.n	8005776 <_svfiprintf_r+0x176>
 80057c8:	89ab      	ldrh	r3, [r5, #12]
 80057ca:	065b      	lsls	r3, r3, #25
 80057cc:	f53f af2c 	bmi.w	8005628 <_svfiprintf_r+0x28>
 80057d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80057d2:	b01d      	add	sp, #116	; 0x74
 80057d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d8:	ab03      	add	r3, sp, #12
 80057da:	9300      	str	r3, [sp, #0]
 80057dc:	462a      	mov	r2, r5
 80057de:	4b06      	ldr	r3, [pc, #24]	; (80057f8 <_svfiprintf_r+0x1f8>)
 80057e0:	a904      	add	r1, sp, #16
 80057e2:	4638      	mov	r0, r7
 80057e4:	f000 f9d4 	bl	8005b90 <_printf_i>
 80057e8:	e7eb      	b.n	80057c2 <_svfiprintf_r+0x1c2>
 80057ea:	bf00      	nop
 80057ec:	08006788 	.word	0x08006788
 80057f0:	08006792 	.word	0x08006792
 80057f4:	00000000 	.word	0x00000000
 80057f8:	08005549 	.word	0x08005549
 80057fc:	0800678e 	.word	0x0800678e

08005800 <__sfputc_r>:
 8005800:	6893      	ldr	r3, [r2, #8]
 8005802:	3b01      	subs	r3, #1
 8005804:	2b00      	cmp	r3, #0
 8005806:	b410      	push	{r4}
 8005808:	6093      	str	r3, [r2, #8]
 800580a:	da08      	bge.n	800581e <__sfputc_r+0x1e>
 800580c:	6994      	ldr	r4, [r2, #24]
 800580e:	42a3      	cmp	r3, r4
 8005810:	db01      	blt.n	8005816 <__sfputc_r+0x16>
 8005812:	290a      	cmp	r1, #10
 8005814:	d103      	bne.n	800581e <__sfputc_r+0x1e>
 8005816:	f85d 4b04 	ldr.w	r4, [sp], #4
 800581a:	f000 bb33 	b.w	8005e84 <__swbuf_r>
 800581e:	6813      	ldr	r3, [r2, #0]
 8005820:	1c58      	adds	r0, r3, #1
 8005822:	6010      	str	r0, [r2, #0]
 8005824:	7019      	strb	r1, [r3, #0]
 8005826:	4608      	mov	r0, r1
 8005828:	f85d 4b04 	ldr.w	r4, [sp], #4
 800582c:	4770      	bx	lr

0800582e <__sfputs_r>:
 800582e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005830:	4606      	mov	r6, r0
 8005832:	460f      	mov	r7, r1
 8005834:	4614      	mov	r4, r2
 8005836:	18d5      	adds	r5, r2, r3
 8005838:	42ac      	cmp	r4, r5
 800583a:	d101      	bne.n	8005840 <__sfputs_r+0x12>
 800583c:	2000      	movs	r0, #0
 800583e:	e007      	b.n	8005850 <__sfputs_r+0x22>
 8005840:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005844:	463a      	mov	r2, r7
 8005846:	4630      	mov	r0, r6
 8005848:	f7ff ffda 	bl	8005800 <__sfputc_r>
 800584c:	1c43      	adds	r3, r0, #1
 800584e:	d1f3      	bne.n	8005838 <__sfputs_r+0xa>
 8005850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005854 <_vfiprintf_r>:
 8005854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005858:	460d      	mov	r5, r1
 800585a:	b09d      	sub	sp, #116	; 0x74
 800585c:	4614      	mov	r4, r2
 800585e:	4698      	mov	r8, r3
 8005860:	4606      	mov	r6, r0
 8005862:	b118      	cbz	r0, 800586c <_vfiprintf_r+0x18>
 8005864:	6983      	ldr	r3, [r0, #24]
 8005866:	b90b      	cbnz	r3, 800586c <_vfiprintf_r+0x18>
 8005868:	f7ff fd74 	bl	8005354 <__sinit>
 800586c:	4b89      	ldr	r3, [pc, #548]	; (8005a94 <_vfiprintf_r+0x240>)
 800586e:	429d      	cmp	r5, r3
 8005870:	d11b      	bne.n	80058aa <_vfiprintf_r+0x56>
 8005872:	6875      	ldr	r5, [r6, #4]
 8005874:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005876:	07d9      	lsls	r1, r3, #31
 8005878:	d405      	bmi.n	8005886 <_vfiprintf_r+0x32>
 800587a:	89ab      	ldrh	r3, [r5, #12]
 800587c:	059a      	lsls	r2, r3, #22
 800587e:	d402      	bmi.n	8005886 <_vfiprintf_r+0x32>
 8005880:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005882:	f7ff fe05 	bl	8005490 <__retarget_lock_acquire_recursive>
 8005886:	89ab      	ldrh	r3, [r5, #12]
 8005888:	071b      	lsls	r3, r3, #28
 800588a:	d501      	bpl.n	8005890 <_vfiprintf_r+0x3c>
 800588c:	692b      	ldr	r3, [r5, #16]
 800588e:	b9eb      	cbnz	r3, 80058cc <_vfiprintf_r+0x78>
 8005890:	4629      	mov	r1, r5
 8005892:	4630      	mov	r0, r6
 8005894:	f000 fb5a 	bl	8005f4c <__swsetup_r>
 8005898:	b1c0      	cbz	r0, 80058cc <_vfiprintf_r+0x78>
 800589a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800589c:	07dc      	lsls	r4, r3, #31
 800589e:	d50e      	bpl.n	80058be <_vfiprintf_r+0x6a>
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
 80058a4:	b01d      	add	sp, #116	; 0x74
 80058a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058aa:	4b7b      	ldr	r3, [pc, #492]	; (8005a98 <_vfiprintf_r+0x244>)
 80058ac:	429d      	cmp	r5, r3
 80058ae:	d101      	bne.n	80058b4 <_vfiprintf_r+0x60>
 80058b0:	68b5      	ldr	r5, [r6, #8]
 80058b2:	e7df      	b.n	8005874 <_vfiprintf_r+0x20>
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <_vfiprintf_r+0x248>)
 80058b6:	429d      	cmp	r5, r3
 80058b8:	bf08      	it	eq
 80058ba:	68f5      	ldreq	r5, [r6, #12]
 80058bc:	e7da      	b.n	8005874 <_vfiprintf_r+0x20>
 80058be:	89ab      	ldrh	r3, [r5, #12]
 80058c0:	0598      	lsls	r0, r3, #22
 80058c2:	d4ed      	bmi.n	80058a0 <_vfiprintf_r+0x4c>
 80058c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80058c6:	f7ff fde4 	bl	8005492 <__retarget_lock_release_recursive>
 80058ca:	e7e9      	b.n	80058a0 <_vfiprintf_r+0x4c>
 80058cc:	2300      	movs	r3, #0
 80058ce:	9309      	str	r3, [sp, #36]	; 0x24
 80058d0:	2320      	movs	r3, #32
 80058d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80058d6:	f8cd 800c 	str.w	r8, [sp, #12]
 80058da:	2330      	movs	r3, #48	; 0x30
 80058dc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8005aa0 <_vfiprintf_r+0x24c>
 80058e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80058e4:	f04f 0901 	mov.w	r9, #1
 80058e8:	4623      	mov	r3, r4
 80058ea:	469a      	mov	sl, r3
 80058ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 80058f0:	b10a      	cbz	r2, 80058f6 <_vfiprintf_r+0xa2>
 80058f2:	2a25      	cmp	r2, #37	; 0x25
 80058f4:	d1f9      	bne.n	80058ea <_vfiprintf_r+0x96>
 80058f6:	ebba 0b04 	subs.w	fp, sl, r4
 80058fa:	d00b      	beq.n	8005914 <_vfiprintf_r+0xc0>
 80058fc:	465b      	mov	r3, fp
 80058fe:	4622      	mov	r2, r4
 8005900:	4629      	mov	r1, r5
 8005902:	4630      	mov	r0, r6
 8005904:	f7ff ff93 	bl	800582e <__sfputs_r>
 8005908:	3001      	adds	r0, #1
 800590a:	f000 80aa 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800590e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005910:	445a      	add	r2, fp
 8005912:	9209      	str	r2, [sp, #36]	; 0x24
 8005914:	f89a 3000 	ldrb.w	r3, [sl]
 8005918:	2b00      	cmp	r3, #0
 800591a:	f000 80a2 	beq.w	8005a62 <_vfiprintf_r+0x20e>
 800591e:	2300      	movs	r3, #0
 8005920:	f04f 32ff 	mov.w	r2, #4294967295
 8005924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005928:	f10a 0a01 	add.w	sl, sl, #1
 800592c:	9304      	str	r3, [sp, #16]
 800592e:	9307      	str	r3, [sp, #28]
 8005930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005934:	931a      	str	r3, [sp, #104]	; 0x68
 8005936:	4654      	mov	r4, sl
 8005938:	2205      	movs	r2, #5
 800593a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800593e:	4858      	ldr	r0, [pc, #352]	; (8005aa0 <_vfiprintf_r+0x24c>)
 8005940:	f7fa fc4e 	bl	80001e0 <memchr>
 8005944:	9a04      	ldr	r2, [sp, #16]
 8005946:	b9d8      	cbnz	r0, 8005980 <_vfiprintf_r+0x12c>
 8005948:	06d1      	lsls	r1, r2, #27
 800594a:	bf44      	itt	mi
 800594c:	2320      	movmi	r3, #32
 800594e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005952:	0713      	lsls	r3, r2, #28
 8005954:	bf44      	itt	mi
 8005956:	232b      	movmi	r3, #43	; 0x2b
 8005958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800595c:	f89a 3000 	ldrb.w	r3, [sl]
 8005960:	2b2a      	cmp	r3, #42	; 0x2a
 8005962:	d015      	beq.n	8005990 <_vfiprintf_r+0x13c>
 8005964:	9a07      	ldr	r2, [sp, #28]
 8005966:	4654      	mov	r4, sl
 8005968:	2000      	movs	r0, #0
 800596a:	f04f 0c0a 	mov.w	ip, #10
 800596e:	4621      	mov	r1, r4
 8005970:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005974:	3b30      	subs	r3, #48	; 0x30
 8005976:	2b09      	cmp	r3, #9
 8005978:	d94e      	bls.n	8005a18 <_vfiprintf_r+0x1c4>
 800597a:	b1b0      	cbz	r0, 80059aa <_vfiprintf_r+0x156>
 800597c:	9207      	str	r2, [sp, #28]
 800597e:	e014      	b.n	80059aa <_vfiprintf_r+0x156>
 8005980:	eba0 0308 	sub.w	r3, r0, r8
 8005984:	fa09 f303 	lsl.w	r3, r9, r3
 8005988:	4313      	orrs	r3, r2
 800598a:	9304      	str	r3, [sp, #16]
 800598c:	46a2      	mov	sl, r4
 800598e:	e7d2      	b.n	8005936 <_vfiprintf_r+0xe2>
 8005990:	9b03      	ldr	r3, [sp, #12]
 8005992:	1d19      	adds	r1, r3, #4
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	9103      	str	r1, [sp, #12]
 8005998:	2b00      	cmp	r3, #0
 800599a:	bfbb      	ittet	lt
 800599c:	425b      	neglt	r3, r3
 800599e:	f042 0202 	orrlt.w	r2, r2, #2
 80059a2:	9307      	strge	r3, [sp, #28]
 80059a4:	9307      	strlt	r3, [sp, #28]
 80059a6:	bfb8      	it	lt
 80059a8:	9204      	strlt	r2, [sp, #16]
 80059aa:	7823      	ldrb	r3, [r4, #0]
 80059ac:	2b2e      	cmp	r3, #46	; 0x2e
 80059ae:	d10c      	bne.n	80059ca <_vfiprintf_r+0x176>
 80059b0:	7863      	ldrb	r3, [r4, #1]
 80059b2:	2b2a      	cmp	r3, #42	; 0x2a
 80059b4:	d135      	bne.n	8005a22 <_vfiprintf_r+0x1ce>
 80059b6:	9b03      	ldr	r3, [sp, #12]
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	9203      	str	r2, [sp, #12]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	bfb8      	it	lt
 80059c2:	f04f 33ff 	movlt.w	r3, #4294967295
 80059c6:	3402      	adds	r4, #2
 80059c8:	9305      	str	r3, [sp, #20]
 80059ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8005ab0 <_vfiprintf_r+0x25c>
 80059ce:	7821      	ldrb	r1, [r4, #0]
 80059d0:	2203      	movs	r2, #3
 80059d2:	4650      	mov	r0, sl
 80059d4:	f7fa fc04 	bl	80001e0 <memchr>
 80059d8:	b140      	cbz	r0, 80059ec <_vfiprintf_r+0x198>
 80059da:	2340      	movs	r3, #64	; 0x40
 80059dc:	eba0 000a 	sub.w	r0, r0, sl
 80059e0:	fa03 f000 	lsl.w	r0, r3, r0
 80059e4:	9b04      	ldr	r3, [sp, #16]
 80059e6:	4303      	orrs	r3, r0
 80059e8:	3401      	adds	r4, #1
 80059ea:	9304      	str	r3, [sp, #16]
 80059ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059f0:	482c      	ldr	r0, [pc, #176]	; (8005aa4 <_vfiprintf_r+0x250>)
 80059f2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80059f6:	2206      	movs	r2, #6
 80059f8:	f7fa fbf2 	bl	80001e0 <memchr>
 80059fc:	2800      	cmp	r0, #0
 80059fe:	d03f      	beq.n	8005a80 <_vfiprintf_r+0x22c>
 8005a00:	4b29      	ldr	r3, [pc, #164]	; (8005aa8 <_vfiprintf_r+0x254>)
 8005a02:	bb1b      	cbnz	r3, 8005a4c <_vfiprintf_r+0x1f8>
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	3307      	adds	r3, #7
 8005a08:	f023 0307 	bic.w	r3, r3, #7
 8005a0c:	3308      	adds	r3, #8
 8005a0e:	9303      	str	r3, [sp, #12]
 8005a10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a12:	443b      	add	r3, r7
 8005a14:	9309      	str	r3, [sp, #36]	; 0x24
 8005a16:	e767      	b.n	80058e8 <_vfiprintf_r+0x94>
 8005a18:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a1c:	460c      	mov	r4, r1
 8005a1e:	2001      	movs	r0, #1
 8005a20:	e7a5      	b.n	800596e <_vfiprintf_r+0x11a>
 8005a22:	2300      	movs	r3, #0
 8005a24:	3401      	adds	r4, #1
 8005a26:	9305      	str	r3, [sp, #20]
 8005a28:	4619      	mov	r1, r3
 8005a2a:	f04f 0c0a 	mov.w	ip, #10
 8005a2e:	4620      	mov	r0, r4
 8005a30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a34:	3a30      	subs	r2, #48	; 0x30
 8005a36:	2a09      	cmp	r2, #9
 8005a38:	d903      	bls.n	8005a42 <_vfiprintf_r+0x1ee>
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d0c5      	beq.n	80059ca <_vfiprintf_r+0x176>
 8005a3e:	9105      	str	r1, [sp, #20]
 8005a40:	e7c3      	b.n	80059ca <_vfiprintf_r+0x176>
 8005a42:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a46:	4604      	mov	r4, r0
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e7f0      	b.n	8005a2e <_vfiprintf_r+0x1da>
 8005a4c:	ab03      	add	r3, sp, #12
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	462a      	mov	r2, r5
 8005a52:	4b16      	ldr	r3, [pc, #88]	; (8005aac <_vfiprintf_r+0x258>)
 8005a54:	a904      	add	r1, sp, #16
 8005a56:	4630      	mov	r0, r6
 8005a58:	f3af 8000 	nop.w
 8005a5c:	4607      	mov	r7, r0
 8005a5e:	1c78      	adds	r0, r7, #1
 8005a60:	d1d6      	bne.n	8005a10 <_vfiprintf_r+0x1bc>
 8005a62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a64:	07d9      	lsls	r1, r3, #31
 8005a66:	d405      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a68:	89ab      	ldrh	r3, [r5, #12]
 8005a6a:	059a      	lsls	r2, r3, #22
 8005a6c:	d402      	bmi.n	8005a74 <_vfiprintf_r+0x220>
 8005a6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a70:	f7ff fd0f 	bl	8005492 <__retarget_lock_release_recursive>
 8005a74:	89ab      	ldrh	r3, [r5, #12]
 8005a76:	065b      	lsls	r3, r3, #25
 8005a78:	f53f af12 	bmi.w	80058a0 <_vfiprintf_r+0x4c>
 8005a7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a7e:	e711      	b.n	80058a4 <_vfiprintf_r+0x50>
 8005a80:	ab03      	add	r3, sp, #12
 8005a82:	9300      	str	r3, [sp, #0]
 8005a84:	462a      	mov	r2, r5
 8005a86:	4b09      	ldr	r3, [pc, #36]	; (8005aac <_vfiprintf_r+0x258>)
 8005a88:	a904      	add	r1, sp, #16
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	f000 f880 	bl	8005b90 <_printf_i>
 8005a90:	e7e4      	b.n	8005a5c <_vfiprintf_r+0x208>
 8005a92:	bf00      	nop
 8005a94:	08006748 	.word	0x08006748
 8005a98:	08006768 	.word	0x08006768
 8005a9c:	08006728 	.word	0x08006728
 8005aa0:	08006788 	.word	0x08006788
 8005aa4:	08006792 	.word	0x08006792
 8005aa8:	00000000 	.word	0x00000000
 8005aac:	0800582f 	.word	0x0800582f
 8005ab0:	0800678e 	.word	0x0800678e

08005ab4 <_printf_common>:
 8005ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ab8:	4616      	mov	r6, r2
 8005aba:	4699      	mov	r9, r3
 8005abc:	688a      	ldr	r2, [r1, #8]
 8005abe:	690b      	ldr	r3, [r1, #16]
 8005ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	bfb8      	it	lt
 8005ac8:	4613      	movlt	r3, r2
 8005aca:	6033      	str	r3, [r6, #0]
 8005acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	b10a      	cbz	r2, 8005ada <_printf_common+0x26>
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	6033      	str	r3, [r6, #0]
 8005ada:	6823      	ldr	r3, [r4, #0]
 8005adc:	0699      	lsls	r1, r3, #26
 8005ade:	bf42      	ittt	mi
 8005ae0:	6833      	ldrmi	r3, [r6, #0]
 8005ae2:	3302      	addmi	r3, #2
 8005ae4:	6033      	strmi	r3, [r6, #0]
 8005ae6:	6825      	ldr	r5, [r4, #0]
 8005ae8:	f015 0506 	ands.w	r5, r5, #6
 8005aec:	d106      	bne.n	8005afc <_printf_common+0x48>
 8005aee:	f104 0a19 	add.w	sl, r4, #25
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	6832      	ldr	r2, [r6, #0]
 8005af6:	1a9b      	subs	r3, r3, r2
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dc26      	bgt.n	8005b4a <_printf_common+0x96>
 8005afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005b00:	1e13      	subs	r3, r2, #0
 8005b02:	6822      	ldr	r2, [r4, #0]
 8005b04:	bf18      	it	ne
 8005b06:	2301      	movne	r3, #1
 8005b08:	0692      	lsls	r2, r2, #26
 8005b0a:	d42b      	bmi.n	8005b64 <_printf_common+0xb0>
 8005b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005b10:	4649      	mov	r1, r9
 8005b12:	4638      	mov	r0, r7
 8005b14:	47c0      	blx	r8
 8005b16:	3001      	adds	r0, #1
 8005b18:	d01e      	beq.n	8005b58 <_printf_common+0xa4>
 8005b1a:	6823      	ldr	r3, [r4, #0]
 8005b1c:	68e5      	ldr	r5, [r4, #12]
 8005b1e:	6832      	ldr	r2, [r6, #0]
 8005b20:	f003 0306 	and.w	r3, r3, #6
 8005b24:	2b04      	cmp	r3, #4
 8005b26:	bf08      	it	eq
 8005b28:	1aad      	subeq	r5, r5, r2
 8005b2a:	68a3      	ldr	r3, [r4, #8]
 8005b2c:	6922      	ldr	r2, [r4, #16]
 8005b2e:	bf0c      	ite	eq
 8005b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b34:	2500      	movne	r5, #0
 8005b36:	4293      	cmp	r3, r2
 8005b38:	bfc4      	itt	gt
 8005b3a:	1a9b      	subgt	r3, r3, r2
 8005b3c:	18ed      	addgt	r5, r5, r3
 8005b3e:	2600      	movs	r6, #0
 8005b40:	341a      	adds	r4, #26
 8005b42:	42b5      	cmp	r5, r6
 8005b44:	d11a      	bne.n	8005b7c <_printf_common+0xc8>
 8005b46:	2000      	movs	r0, #0
 8005b48:	e008      	b.n	8005b5c <_printf_common+0xa8>
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	4652      	mov	r2, sl
 8005b4e:	4649      	mov	r1, r9
 8005b50:	4638      	mov	r0, r7
 8005b52:	47c0      	blx	r8
 8005b54:	3001      	adds	r0, #1
 8005b56:	d103      	bne.n	8005b60 <_printf_common+0xac>
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295
 8005b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b60:	3501      	adds	r5, #1
 8005b62:	e7c6      	b.n	8005af2 <_printf_common+0x3e>
 8005b64:	18e1      	adds	r1, r4, r3
 8005b66:	1c5a      	adds	r2, r3, #1
 8005b68:	2030      	movs	r0, #48	; 0x30
 8005b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005b6e:	4422      	add	r2, r4
 8005b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005b78:	3302      	adds	r3, #2
 8005b7a:	e7c7      	b.n	8005b0c <_printf_common+0x58>
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	4622      	mov	r2, r4
 8005b80:	4649      	mov	r1, r9
 8005b82:	4638      	mov	r0, r7
 8005b84:	47c0      	blx	r8
 8005b86:	3001      	adds	r0, #1
 8005b88:	d0e6      	beq.n	8005b58 <_printf_common+0xa4>
 8005b8a:	3601      	adds	r6, #1
 8005b8c:	e7d9      	b.n	8005b42 <_printf_common+0x8e>
	...

08005b90 <_printf_i>:
 8005b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005b94:	460c      	mov	r4, r1
 8005b96:	4691      	mov	r9, r2
 8005b98:	7e27      	ldrb	r7, [r4, #24]
 8005b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005b9c:	2f78      	cmp	r7, #120	; 0x78
 8005b9e:	4680      	mov	r8, r0
 8005ba0:	469a      	mov	sl, r3
 8005ba2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005ba6:	d807      	bhi.n	8005bb8 <_printf_i+0x28>
 8005ba8:	2f62      	cmp	r7, #98	; 0x62
 8005baa:	d80a      	bhi.n	8005bc2 <_printf_i+0x32>
 8005bac:	2f00      	cmp	r7, #0
 8005bae:	f000 80d8 	beq.w	8005d62 <_printf_i+0x1d2>
 8005bb2:	2f58      	cmp	r7, #88	; 0x58
 8005bb4:	f000 80a3 	beq.w	8005cfe <_printf_i+0x16e>
 8005bb8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005bc0:	e03a      	b.n	8005c38 <_printf_i+0xa8>
 8005bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005bc6:	2b15      	cmp	r3, #21
 8005bc8:	d8f6      	bhi.n	8005bb8 <_printf_i+0x28>
 8005bca:	a001      	add	r0, pc, #4	; (adr r0, 8005bd0 <_printf_i+0x40>)
 8005bcc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005bd0:	08005c29 	.word	0x08005c29
 8005bd4:	08005c3d 	.word	0x08005c3d
 8005bd8:	08005bb9 	.word	0x08005bb9
 8005bdc:	08005bb9 	.word	0x08005bb9
 8005be0:	08005bb9 	.word	0x08005bb9
 8005be4:	08005bb9 	.word	0x08005bb9
 8005be8:	08005c3d 	.word	0x08005c3d
 8005bec:	08005bb9 	.word	0x08005bb9
 8005bf0:	08005bb9 	.word	0x08005bb9
 8005bf4:	08005bb9 	.word	0x08005bb9
 8005bf8:	08005bb9 	.word	0x08005bb9
 8005bfc:	08005d49 	.word	0x08005d49
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005d2b 	.word	0x08005d2b
 8005c08:	08005bb9 	.word	0x08005bb9
 8005c0c:	08005bb9 	.word	0x08005bb9
 8005c10:	08005d6b 	.word	0x08005d6b
 8005c14:	08005bb9 	.word	0x08005bb9
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005bb9 	.word	0x08005bb9
 8005c20:	08005bb9 	.word	0x08005bb9
 8005c24:	08005d33 	.word	0x08005d33
 8005c28:	680b      	ldr	r3, [r1, #0]
 8005c2a:	1d1a      	adds	r2, r3, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	600a      	str	r2, [r1, #0]
 8005c30:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005c38:	2301      	movs	r3, #1
 8005c3a:	e0a3      	b.n	8005d84 <_printf_i+0x1f4>
 8005c3c:	6825      	ldr	r5, [r4, #0]
 8005c3e:	6808      	ldr	r0, [r1, #0]
 8005c40:	062e      	lsls	r6, r5, #24
 8005c42:	f100 0304 	add.w	r3, r0, #4
 8005c46:	d50a      	bpl.n	8005c5e <_printf_i+0xce>
 8005c48:	6805      	ldr	r5, [r0, #0]
 8005c4a:	600b      	str	r3, [r1, #0]
 8005c4c:	2d00      	cmp	r5, #0
 8005c4e:	da03      	bge.n	8005c58 <_printf_i+0xc8>
 8005c50:	232d      	movs	r3, #45	; 0x2d
 8005c52:	426d      	negs	r5, r5
 8005c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005c58:	485e      	ldr	r0, [pc, #376]	; (8005dd4 <_printf_i+0x244>)
 8005c5a:	230a      	movs	r3, #10
 8005c5c:	e019      	b.n	8005c92 <_printf_i+0x102>
 8005c5e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005c62:	6805      	ldr	r5, [r0, #0]
 8005c64:	600b      	str	r3, [r1, #0]
 8005c66:	bf18      	it	ne
 8005c68:	b22d      	sxthne	r5, r5
 8005c6a:	e7ef      	b.n	8005c4c <_printf_i+0xbc>
 8005c6c:	680b      	ldr	r3, [r1, #0]
 8005c6e:	6825      	ldr	r5, [r4, #0]
 8005c70:	1d18      	adds	r0, r3, #4
 8005c72:	6008      	str	r0, [r1, #0]
 8005c74:	0628      	lsls	r0, r5, #24
 8005c76:	d501      	bpl.n	8005c7c <_printf_i+0xec>
 8005c78:	681d      	ldr	r5, [r3, #0]
 8005c7a:	e002      	b.n	8005c82 <_printf_i+0xf2>
 8005c7c:	0669      	lsls	r1, r5, #25
 8005c7e:	d5fb      	bpl.n	8005c78 <_printf_i+0xe8>
 8005c80:	881d      	ldrh	r5, [r3, #0]
 8005c82:	4854      	ldr	r0, [pc, #336]	; (8005dd4 <_printf_i+0x244>)
 8005c84:	2f6f      	cmp	r7, #111	; 0x6f
 8005c86:	bf0c      	ite	eq
 8005c88:	2308      	moveq	r3, #8
 8005c8a:	230a      	movne	r3, #10
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005c92:	6866      	ldr	r6, [r4, #4]
 8005c94:	60a6      	str	r6, [r4, #8]
 8005c96:	2e00      	cmp	r6, #0
 8005c98:	bfa2      	ittt	ge
 8005c9a:	6821      	ldrge	r1, [r4, #0]
 8005c9c:	f021 0104 	bicge.w	r1, r1, #4
 8005ca0:	6021      	strge	r1, [r4, #0]
 8005ca2:	b90d      	cbnz	r5, 8005ca8 <_printf_i+0x118>
 8005ca4:	2e00      	cmp	r6, #0
 8005ca6:	d04d      	beq.n	8005d44 <_printf_i+0x1b4>
 8005ca8:	4616      	mov	r6, r2
 8005caa:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cae:	fb03 5711 	mls	r7, r3, r1, r5
 8005cb2:	5dc7      	ldrb	r7, [r0, r7]
 8005cb4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005cb8:	462f      	mov	r7, r5
 8005cba:	42bb      	cmp	r3, r7
 8005cbc:	460d      	mov	r5, r1
 8005cbe:	d9f4      	bls.n	8005caa <_printf_i+0x11a>
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d10b      	bne.n	8005cdc <_printf_i+0x14c>
 8005cc4:	6823      	ldr	r3, [r4, #0]
 8005cc6:	07df      	lsls	r7, r3, #31
 8005cc8:	d508      	bpl.n	8005cdc <_printf_i+0x14c>
 8005cca:	6923      	ldr	r3, [r4, #16]
 8005ccc:	6861      	ldr	r1, [r4, #4]
 8005cce:	4299      	cmp	r1, r3
 8005cd0:	bfde      	ittt	le
 8005cd2:	2330      	movle	r3, #48	; 0x30
 8005cd4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005cd8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005cdc:	1b92      	subs	r2, r2, r6
 8005cde:	6122      	str	r2, [r4, #16]
 8005ce0:	f8cd a000 	str.w	sl, [sp]
 8005ce4:	464b      	mov	r3, r9
 8005ce6:	aa03      	add	r2, sp, #12
 8005ce8:	4621      	mov	r1, r4
 8005cea:	4640      	mov	r0, r8
 8005cec:	f7ff fee2 	bl	8005ab4 <_printf_common>
 8005cf0:	3001      	adds	r0, #1
 8005cf2:	d14c      	bne.n	8005d8e <_printf_i+0x1fe>
 8005cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8005cf8:	b004      	add	sp, #16
 8005cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005cfe:	4835      	ldr	r0, [pc, #212]	; (8005dd4 <_printf_i+0x244>)
 8005d00:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005d04:	6823      	ldr	r3, [r4, #0]
 8005d06:	680e      	ldr	r6, [r1, #0]
 8005d08:	061f      	lsls	r7, r3, #24
 8005d0a:	f856 5b04 	ldr.w	r5, [r6], #4
 8005d0e:	600e      	str	r6, [r1, #0]
 8005d10:	d514      	bpl.n	8005d3c <_printf_i+0x1ac>
 8005d12:	07d9      	lsls	r1, r3, #31
 8005d14:	bf44      	itt	mi
 8005d16:	f043 0320 	orrmi.w	r3, r3, #32
 8005d1a:	6023      	strmi	r3, [r4, #0]
 8005d1c:	b91d      	cbnz	r5, 8005d26 <_printf_i+0x196>
 8005d1e:	6823      	ldr	r3, [r4, #0]
 8005d20:	f023 0320 	bic.w	r3, r3, #32
 8005d24:	6023      	str	r3, [r4, #0]
 8005d26:	2310      	movs	r3, #16
 8005d28:	e7b0      	b.n	8005c8c <_printf_i+0xfc>
 8005d2a:	6823      	ldr	r3, [r4, #0]
 8005d2c:	f043 0320 	orr.w	r3, r3, #32
 8005d30:	6023      	str	r3, [r4, #0]
 8005d32:	2378      	movs	r3, #120	; 0x78
 8005d34:	4828      	ldr	r0, [pc, #160]	; (8005dd8 <_printf_i+0x248>)
 8005d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8005d3a:	e7e3      	b.n	8005d04 <_printf_i+0x174>
 8005d3c:	065e      	lsls	r6, r3, #25
 8005d3e:	bf48      	it	mi
 8005d40:	b2ad      	uxthmi	r5, r5
 8005d42:	e7e6      	b.n	8005d12 <_printf_i+0x182>
 8005d44:	4616      	mov	r6, r2
 8005d46:	e7bb      	b.n	8005cc0 <_printf_i+0x130>
 8005d48:	680b      	ldr	r3, [r1, #0]
 8005d4a:	6826      	ldr	r6, [r4, #0]
 8005d4c:	6960      	ldr	r0, [r4, #20]
 8005d4e:	1d1d      	adds	r5, r3, #4
 8005d50:	600d      	str	r5, [r1, #0]
 8005d52:	0635      	lsls	r5, r6, #24
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	d501      	bpl.n	8005d5c <_printf_i+0x1cc>
 8005d58:	6018      	str	r0, [r3, #0]
 8005d5a:	e002      	b.n	8005d62 <_printf_i+0x1d2>
 8005d5c:	0671      	lsls	r1, r6, #25
 8005d5e:	d5fb      	bpl.n	8005d58 <_printf_i+0x1c8>
 8005d60:	8018      	strh	r0, [r3, #0]
 8005d62:	2300      	movs	r3, #0
 8005d64:	6123      	str	r3, [r4, #16]
 8005d66:	4616      	mov	r6, r2
 8005d68:	e7ba      	b.n	8005ce0 <_printf_i+0x150>
 8005d6a:	680b      	ldr	r3, [r1, #0]
 8005d6c:	1d1a      	adds	r2, r3, #4
 8005d6e:	600a      	str	r2, [r1, #0]
 8005d70:	681e      	ldr	r6, [r3, #0]
 8005d72:	6862      	ldr	r2, [r4, #4]
 8005d74:	2100      	movs	r1, #0
 8005d76:	4630      	mov	r0, r6
 8005d78:	f7fa fa32 	bl	80001e0 <memchr>
 8005d7c:	b108      	cbz	r0, 8005d82 <_printf_i+0x1f2>
 8005d7e:	1b80      	subs	r0, r0, r6
 8005d80:	6060      	str	r0, [r4, #4]
 8005d82:	6863      	ldr	r3, [r4, #4]
 8005d84:	6123      	str	r3, [r4, #16]
 8005d86:	2300      	movs	r3, #0
 8005d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005d8c:	e7a8      	b.n	8005ce0 <_printf_i+0x150>
 8005d8e:	6923      	ldr	r3, [r4, #16]
 8005d90:	4632      	mov	r2, r6
 8005d92:	4649      	mov	r1, r9
 8005d94:	4640      	mov	r0, r8
 8005d96:	47d0      	blx	sl
 8005d98:	3001      	adds	r0, #1
 8005d9a:	d0ab      	beq.n	8005cf4 <_printf_i+0x164>
 8005d9c:	6823      	ldr	r3, [r4, #0]
 8005d9e:	079b      	lsls	r3, r3, #30
 8005da0:	d413      	bmi.n	8005dca <_printf_i+0x23a>
 8005da2:	68e0      	ldr	r0, [r4, #12]
 8005da4:	9b03      	ldr	r3, [sp, #12]
 8005da6:	4298      	cmp	r0, r3
 8005da8:	bfb8      	it	lt
 8005daa:	4618      	movlt	r0, r3
 8005dac:	e7a4      	b.n	8005cf8 <_printf_i+0x168>
 8005dae:	2301      	movs	r3, #1
 8005db0:	4632      	mov	r2, r6
 8005db2:	4649      	mov	r1, r9
 8005db4:	4640      	mov	r0, r8
 8005db6:	47d0      	blx	sl
 8005db8:	3001      	adds	r0, #1
 8005dba:	d09b      	beq.n	8005cf4 <_printf_i+0x164>
 8005dbc:	3501      	adds	r5, #1
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	9903      	ldr	r1, [sp, #12]
 8005dc2:	1a5b      	subs	r3, r3, r1
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dcf2      	bgt.n	8005dae <_printf_i+0x21e>
 8005dc8:	e7eb      	b.n	8005da2 <_printf_i+0x212>
 8005dca:	2500      	movs	r5, #0
 8005dcc:	f104 0619 	add.w	r6, r4, #25
 8005dd0:	e7f5      	b.n	8005dbe <_printf_i+0x22e>
 8005dd2:	bf00      	nop
 8005dd4:	08006799 	.word	0x08006799
 8005dd8:	080067aa 	.word	0x080067aa

08005ddc <_sbrk_r>:
 8005ddc:	b538      	push	{r3, r4, r5, lr}
 8005dde:	4d06      	ldr	r5, [pc, #24]	; (8005df8 <_sbrk_r+0x1c>)
 8005de0:	2300      	movs	r3, #0
 8005de2:	4604      	mov	r4, r0
 8005de4:	4608      	mov	r0, r1
 8005de6:	602b      	str	r3, [r5, #0]
 8005de8:	f7fb fd70 	bl	80018cc <_sbrk>
 8005dec:	1c43      	adds	r3, r0, #1
 8005dee:	d102      	bne.n	8005df6 <_sbrk_r+0x1a>
 8005df0:	682b      	ldr	r3, [r5, #0]
 8005df2:	b103      	cbz	r3, 8005df6 <_sbrk_r+0x1a>
 8005df4:	6023      	str	r3, [r4, #0]
 8005df6:	bd38      	pop	{r3, r4, r5, pc}
 8005df8:	2000021c 	.word	0x2000021c

08005dfc <__sread>:
 8005dfc:	b510      	push	{r4, lr}
 8005dfe:	460c      	mov	r4, r1
 8005e00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e04:	f000 fb02 	bl	800640c <_read_r>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	bfab      	itete	ge
 8005e0c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005e0e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e10:	181b      	addge	r3, r3, r0
 8005e12:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005e16:	bfac      	ite	ge
 8005e18:	6563      	strge	r3, [r4, #84]	; 0x54
 8005e1a:	81a3      	strhlt	r3, [r4, #12]
 8005e1c:	bd10      	pop	{r4, pc}

08005e1e <__swrite>:
 8005e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e22:	461f      	mov	r7, r3
 8005e24:	898b      	ldrh	r3, [r1, #12]
 8005e26:	05db      	lsls	r3, r3, #23
 8005e28:	4605      	mov	r5, r0
 8005e2a:	460c      	mov	r4, r1
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	d505      	bpl.n	8005e3c <__swrite+0x1e>
 8005e30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e34:	2302      	movs	r3, #2
 8005e36:	2200      	movs	r2, #0
 8005e38:	f000 f9c8 	bl	80061cc <_lseek_r>
 8005e3c:	89a3      	ldrh	r3, [r4, #12]
 8005e3e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e42:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005e46:	81a3      	strh	r3, [r4, #12]
 8005e48:	4632      	mov	r2, r6
 8005e4a:	463b      	mov	r3, r7
 8005e4c:	4628      	mov	r0, r5
 8005e4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005e52:	f000 b869 	b.w	8005f28 <_write_r>

08005e56 <__sseek>:
 8005e56:	b510      	push	{r4, lr}
 8005e58:	460c      	mov	r4, r1
 8005e5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e5e:	f000 f9b5 	bl	80061cc <_lseek_r>
 8005e62:	1c43      	adds	r3, r0, #1
 8005e64:	89a3      	ldrh	r3, [r4, #12]
 8005e66:	bf15      	itete	ne
 8005e68:	6560      	strne	r0, [r4, #84]	; 0x54
 8005e6a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005e6e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005e72:	81a3      	strheq	r3, [r4, #12]
 8005e74:	bf18      	it	ne
 8005e76:	81a3      	strhne	r3, [r4, #12]
 8005e78:	bd10      	pop	{r4, pc}

08005e7a <__sclose>:
 8005e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7e:	f000 b8d3 	b.w	8006028 <_close_r>
	...

08005e84 <__swbuf_r>:
 8005e84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e86:	460e      	mov	r6, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	4605      	mov	r5, r0
 8005e8c:	b118      	cbz	r0, 8005e96 <__swbuf_r+0x12>
 8005e8e:	6983      	ldr	r3, [r0, #24]
 8005e90:	b90b      	cbnz	r3, 8005e96 <__swbuf_r+0x12>
 8005e92:	f7ff fa5f 	bl	8005354 <__sinit>
 8005e96:	4b21      	ldr	r3, [pc, #132]	; (8005f1c <__swbuf_r+0x98>)
 8005e98:	429c      	cmp	r4, r3
 8005e9a:	d12b      	bne.n	8005ef4 <__swbuf_r+0x70>
 8005e9c:	686c      	ldr	r4, [r5, #4]
 8005e9e:	69a3      	ldr	r3, [r4, #24]
 8005ea0:	60a3      	str	r3, [r4, #8]
 8005ea2:	89a3      	ldrh	r3, [r4, #12]
 8005ea4:	071a      	lsls	r2, r3, #28
 8005ea6:	d52f      	bpl.n	8005f08 <__swbuf_r+0x84>
 8005ea8:	6923      	ldr	r3, [r4, #16]
 8005eaa:	b36b      	cbz	r3, 8005f08 <__swbuf_r+0x84>
 8005eac:	6923      	ldr	r3, [r4, #16]
 8005eae:	6820      	ldr	r0, [r4, #0]
 8005eb0:	1ac0      	subs	r0, r0, r3
 8005eb2:	6963      	ldr	r3, [r4, #20]
 8005eb4:	b2f6      	uxtb	r6, r6
 8005eb6:	4283      	cmp	r3, r0
 8005eb8:	4637      	mov	r7, r6
 8005eba:	dc04      	bgt.n	8005ec6 <__swbuf_r+0x42>
 8005ebc:	4621      	mov	r1, r4
 8005ebe:	4628      	mov	r0, r5
 8005ec0:	f000 f948 	bl	8006154 <_fflush_r>
 8005ec4:	bb30      	cbnz	r0, 8005f14 <__swbuf_r+0x90>
 8005ec6:	68a3      	ldr	r3, [r4, #8]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	60a3      	str	r3, [r4, #8]
 8005ecc:	6823      	ldr	r3, [r4, #0]
 8005ece:	1c5a      	adds	r2, r3, #1
 8005ed0:	6022      	str	r2, [r4, #0]
 8005ed2:	701e      	strb	r6, [r3, #0]
 8005ed4:	6963      	ldr	r3, [r4, #20]
 8005ed6:	3001      	adds	r0, #1
 8005ed8:	4283      	cmp	r3, r0
 8005eda:	d004      	beq.n	8005ee6 <__swbuf_r+0x62>
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	07db      	lsls	r3, r3, #31
 8005ee0:	d506      	bpl.n	8005ef0 <__swbuf_r+0x6c>
 8005ee2:	2e0a      	cmp	r6, #10
 8005ee4:	d104      	bne.n	8005ef0 <__swbuf_r+0x6c>
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	4628      	mov	r0, r5
 8005eea:	f000 f933 	bl	8006154 <_fflush_r>
 8005eee:	b988      	cbnz	r0, 8005f14 <__swbuf_r+0x90>
 8005ef0:	4638      	mov	r0, r7
 8005ef2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ef4:	4b0a      	ldr	r3, [pc, #40]	; (8005f20 <__swbuf_r+0x9c>)
 8005ef6:	429c      	cmp	r4, r3
 8005ef8:	d101      	bne.n	8005efe <__swbuf_r+0x7a>
 8005efa:	68ac      	ldr	r4, [r5, #8]
 8005efc:	e7cf      	b.n	8005e9e <__swbuf_r+0x1a>
 8005efe:	4b09      	ldr	r3, [pc, #36]	; (8005f24 <__swbuf_r+0xa0>)
 8005f00:	429c      	cmp	r4, r3
 8005f02:	bf08      	it	eq
 8005f04:	68ec      	ldreq	r4, [r5, #12]
 8005f06:	e7ca      	b.n	8005e9e <__swbuf_r+0x1a>
 8005f08:	4621      	mov	r1, r4
 8005f0a:	4628      	mov	r0, r5
 8005f0c:	f000 f81e 	bl	8005f4c <__swsetup_r>
 8005f10:	2800      	cmp	r0, #0
 8005f12:	d0cb      	beq.n	8005eac <__swbuf_r+0x28>
 8005f14:	f04f 37ff 	mov.w	r7, #4294967295
 8005f18:	e7ea      	b.n	8005ef0 <__swbuf_r+0x6c>
 8005f1a:	bf00      	nop
 8005f1c:	08006748 	.word	0x08006748
 8005f20:	08006768 	.word	0x08006768
 8005f24:	08006728 	.word	0x08006728

08005f28 <_write_r>:
 8005f28:	b538      	push	{r3, r4, r5, lr}
 8005f2a:	4d07      	ldr	r5, [pc, #28]	; (8005f48 <_write_r+0x20>)
 8005f2c:	4604      	mov	r4, r0
 8005f2e:	4608      	mov	r0, r1
 8005f30:	4611      	mov	r1, r2
 8005f32:	2200      	movs	r2, #0
 8005f34:	602a      	str	r2, [r5, #0]
 8005f36:	461a      	mov	r2, r3
 8005f38:	f7fb fc77 	bl	800182a <_write>
 8005f3c:	1c43      	adds	r3, r0, #1
 8005f3e:	d102      	bne.n	8005f46 <_write_r+0x1e>
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	b103      	cbz	r3, 8005f46 <_write_r+0x1e>
 8005f44:	6023      	str	r3, [r4, #0]
 8005f46:	bd38      	pop	{r3, r4, r5, pc}
 8005f48:	2000021c 	.word	0x2000021c

08005f4c <__swsetup_r>:
 8005f4c:	4b32      	ldr	r3, [pc, #200]	; (8006018 <__swsetup_r+0xcc>)
 8005f4e:	b570      	push	{r4, r5, r6, lr}
 8005f50:	681d      	ldr	r5, [r3, #0]
 8005f52:	4606      	mov	r6, r0
 8005f54:	460c      	mov	r4, r1
 8005f56:	b125      	cbz	r5, 8005f62 <__swsetup_r+0x16>
 8005f58:	69ab      	ldr	r3, [r5, #24]
 8005f5a:	b913      	cbnz	r3, 8005f62 <__swsetup_r+0x16>
 8005f5c:	4628      	mov	r0, r5
 8005f5e:	f7ff f9f9 	bl	8005354 <__sinit>
 8005f62:	4b2e      	ldr	r3, [pc, #184]	; (800601c <__swsetup_r+0xd0>)
 8005f64:	429c      	cmp	r4, r3
 8005f66:	d10f      	bne.n	8005f88 <__swsetup_r+0x3c>
 8005f68:	686c      	ldr	r4, [r5, #4]
 8005f6a:	89a3      	ldrh	r3, [r4, #12]
 8005f6c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005f70:	0719      	lsls	r1, r3, #28
 8005f72:	d42c      	bmi.n	8005fce <__swsetup_r+0x82>
 8005f74:	06dd      	lsls	r5, r3, #27
 8005f76:	d411      	bmi.n	8005f9c <__swsetup_r+0x50>
 8005f78:	2309      	movs	r3, #9
 8005f7a:	6033      	str	r3, [r6, #0]
 8005f7c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005f80:	81a3      	strh	r3, [r4, #12]
 8005f82:	f04f 30ff 	mov.w	r0, #4294967295
 8005f86:	e03e      	b.n	8006006 <__swsetup_r+0xba>
 8005f88:	4b25      	ldr	r3, [pc, #148]	; (8006020 <__swsetup_r+0xd4>)
 8005f8a:	429c      	cmp	r4, r3
 8005f8c:	d101      	bne.n	8005f92 <__swsetup_r+0x46>
 8005f8e:	68ac      	ldr	r4, [r5, #8]
 8005f90:	e7eb      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f92:	4b24      	ldr	r3, [pc, #144]	; (8006024 <__swsetup_r+0xd8>)
 8005f94:	429c      	cmp	r4, r3
 8005f96:	bf08      	it	eq
 8005f98:	68ec      	ldreq	r4, [r5, #12]
 8005f9a:	e7e6      	b.n	8005f6a <__swsetup_r+0x1e>
 8005f9c:	0758      	lsls	r0, r3, #29
 8005f9e:	d512      	bpl.n	8005fc6 <__swsetup_r+0x7a>
 8005fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005fa2:	b141      	cbz	r1, 8005fb6 <__swsetup_r+0x6a>
 8005fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005fa8:	4299      	cmp	r1, r3
 8005faa:	d002      	beq.n	8005fb2 <__swsetup_r+0x66>
 8005fac:	4630      	mov	r0, r6
 8005fae:	f000 f9b7 	bl	8006320 <_free_r>
 8005fb2:	2300      	movs	r3, #0
 8005fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8005fb6:	89a3      	ldrh	r3, [r4, #12]
 8005fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005fbc:	81a3      	strh	r3, [r4, #12]
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	6063      	str	r3, [r4, #4]
 8005fc2:	6923      	ldr	r3, [r4, #16]
 8005fc4:	6023      	str	r3, [r4, #0]
 8005fc6:	89a3      	ldrh	r3, [r4, #12]
 8005fc8:	f043 0308 	orr.w	r3, r3, #8
 8005fcc:	81a3      	strh	r3, [r4, #12]
 8005fce:	6923      	ldr	r3, [r4, #16]
 8005fd0:	b94b      	cbnz	r3, 8005fe6 <__swsetup_r+0x9a>
 8005fd2:	89a3      	ldrh	r3, [r4, #12]
 8005fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fdc:	d003      	beq.n	8005fe6 <__swsetup_r+0x9a>
 8005fde:	4621      	mov	r1, r4
 8005fe0:	4630      	mov	r0, r6
 8005fe2:	f000 f929 	bl	8006238 <__smakebuf_r>
 8005fe6:	89a0      	ldrh	r0, [r4, #12]
 8005fe8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005fec:	f010 0301 	ands.w	r3, r0, #1
 8005ff0:	d00a      	beq.n	8006008 <__swsetup_r+0xbc>
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	60a3      	str	r3, [r4, #8]
 8005ff6:	6963      	ldr	r3, [r4, #20]
 8005ff8:	425b      	negs	r3, r3
 8005ffa:	61a3      	str	r3, [r4, #24]
 8005ffc:	6923      	ldr	r3, [r4, #16]
 8005ffe:	b943      	cbnz	r3, 8006012 <__swsetup_r+0xc6>
 8006000:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006004:	d1ba      	bne.n	8005f7c <__swsetup_r+0x30>
 8006006:	bd70      	pop	{r4, r5, r6, pc}
 8006008:	0781      	lsls	r1, r0, #30
 800600a:	bf58      	it	pl
 800600c:	6963      	ldrpl	r3, [r4, #20]
 800600e:	60a3      	str	r3, [r4, #8]
 8006010:	e7f4      	b.n	8005ffc <__swsetup_r+0xb0>
 8006012:	2000      	movs	r0, #0
 8006014:	e7f7      	b.n	8006006 <__swsetup_r+0xba>
 8006016:	bf00      	nop
 8006018:	2000000c 	.word	0x2000000c
 800601c:	08006748 	.word	0x08006748
 8006020:	08006768 	.word	0x08006768
 8006024:	08006728 	.word	0x08006728

08006028 <_close_r>:
 8006028:	b538      	push	{r3, r4, r5, lr}
 800602a:	4d06      	ldr	r5, [pc, #24]	; (8006044 <_close_r+0x1c>)
 800602c:	2300      	movs	r3, #0
 800602e:	4604      	mov	r4, r0
 8006030:	4608      	mov	r0, r1
 8006032:	602b      	str	r3, [r5, #0]
 8006034:	f7fb fc15 	bl	8001862 <_close>
 8006038:	1c43      	adds	r3, r0, #1
 800603a:	d102      	bne.n	8006042 <_close_r+0x1a>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	b103      	cbz	r3, 8006042 <_close_r+0x1a>
 8006040:	6023      	str	r3, [r4, #0]
 8006042:	bd38      	pop	{r3, r4, r5, pc}
 8006044:	2000021c 	.word	0x2000021c

08006048 <__sflush_r>:
 8006048:	898a      	ldrh	r2, [r1, #12]
 800604a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800604e:	4605      	mov	r5, r0
 8006050:	0710      	lsls	r0, r2, #28
 8006052:	460c      	mov	r4, r1
 8006054:	d458      	bmi.n	8006108 <__sflush_r+0xc0>
 8006056:	684b      	ldr	r3, [r1, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	dc05      	bgt.n	8006068 <__sflush_r+0x20>
 800605c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	dc02      	bgt.n	8006068 <__sflush_r+0x20>
 8006062:	2000      	movs	r0, #0
 8006064:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006068:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800606a:	2e00      	cmp	r6, #0
 800606c:	d0f9      	beq.n	8006062 <__sflush_r+0x1a>
 800606e:	2300      	movs	r3, #0
 8006070:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006074:	682f      	ldr	r7, [r5, #0]
 8006076:	602b      	str	r3, [r5, #0]
 8006078:	d032      	beq.n	80060e0 <__sflush_r+0x98>
 800607a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800607c:	89a3      	ldrh	r3, [r4, #12]
 800607e:	075a      	lsls	r2, r3, #29
 8006080:	d505      	bpl.n	800608e <__sflush_r+0x46>
 8006082:	6863      	ldr	r3, [r4, #4]
 8006084:	1ac0      	subs	r0, r0, r3
 8006086:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006088:	b10b      	cbz	r3, 800608e <__sflush_r+0x46>
 800608a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800608c:	1ac0      	subs	r0, r0, r3
 800608e:	2300      	movs	r3, #0
 8006090:	4602      	mov	r2, r0
 8006092:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006094:	6a21      	ldr	r1, [r4, #32]
 8006096:	4628      	mov	r0, r5
 8006098:	47b0      	blx	r6
 800609a:	1c43      	adds	r3, r0, #1
 800609c:	89a3      	ldrh	r3, [r4, #12]
 800609e:	d106      	bne.n	80060ae <__sflush_r+0x66>
 80060a0:	6829      	ldr	r1, [r5, #0]
 80060a2:	291d      	cmp	r1, #29
 80060a4:	d82c      	bhi.n	8006100 <__sflush_r+0xb8>
 80060a6:	4a2a      	ldr	r2, [pc, #168]	; (8006150 <__sflush_r+0x108>)
 80060a8:	40ca      	lsrs	r2, r1
 80060aa:	07d6      	lsls	r6, r2, #31
 80060ac:	d528      	bpl.n	8006100 <__sflush_r+0xb8>
 80060ae:	2200      	movs	r2, #0
 80060b0:	6062      	str	r2, [r4, #4]
 80060b2:	04d9      	lsls	r1, r3, #19
 80060b4:	6922      	ldr	r2, [r4, #16]
 80060b6:	6022      	str	r2, [r4, #0]
 80060b8:	d504      	bpl.n	80060c4 <__sflush_r+0x7c>
 80060ba:	1c42      	adds	r2, r0, #1
 80060bc:	d101      	bne.n	80060c2 <__sflush_r+0x7a>
 80060be:	682b      	ldr	r3, [r5, #0]
 80060c0:	b903      	cbnz	r3, 80060c4 <__sflush_r+0x7c>
 80060c2:	6560      	str	r0, [r4, #84]	; 0x54
 80060c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060c6:	602f      	str	r7, [r5, #0]
 80060c8:	2900      	cmp	r1, #0
 80060ca:	d0ca      	beq.n	8006062 <__sflush_r+0x1a>
 80060cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060d0:	4299      	cmp	r1, r3
 80060d2:	d002      	beq.n	80060da <__sflush_r+0x92>
 80060d4:	4628      	mov	r0, r5
 80060d6:	f000 f923 	bl	8006320 <_free_r>
 80060da:	2000      	movs	r0, #0
 80060dc:	6360      	str	r0, [r4, #52]	; 0x34
 80060de:	e7c1      	b.n	8006064 <__sflush_r+0x1c>
 80060e0:	6a21      	ldr	r1, [r4, #32]
 80060e2:	2301      	movs	r3, #1
 80060e4:	4628      	mov	r0, r5
 80060e6:	47b0      	blx	r6
 80060e8:	1c41      	adds	r1, r0, #1
 80060ea:	d1c7      	bne.n	800607c <__sflush_r+0x34>
 80060ec:	682b      	ldr	r3, [r5, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d0c4      	beq.n	800607c <__sflush_r+0x34>
 80060f2:	2b1d      	cmp	r3, #29
 80060f4:	d001      	beq.n	80060fa <__sflush_r+0xb2>
 80060f6:	2b16      	cmp	r3, #22
 80060f8:	d101      	bne.n	80060fe <__sflush_r+0xb6>
 80060fa:	602f      	str	r7, [r5, #0]
 80060fc:	e7b1      	b.n	8006062 <__sflush_r+0x1a>
 80060fe:	89a3      	ldrh	r3, [r4, #12]
 8006100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006104:	81a3      	strh	r3, [r4, #12]
 8006106:	e7ad      	b.n	8006064 <__sflush_r+0x1c>
 8006108:	690f      	ldr	r7, [r1, #16]
 800610a:	2f00      	cmp	r7, #0
 800610c:	d0a9      	beq.n	8006062 <__sflush_r+0x1a>
 800610e:	0793      	lsls	r3, r2, #30
 8006110:	680e      	ldr	r6, [r1, #0]
 8006112:	bf08      	it	eq
 8006114:	694b      	ldreq	r3, [r1, #20]
 8006116:	600f      	str	r7, [r1, #0]
 8006118:	bf18      	it	ne
 800611a:	2300      	movne	r3, #0
 800611c:	eba6 0807 	sub.w	r8, r6, r7
 8006120:	608b      	str	r3, [r1, #8]
 8006122:	f1b8 0f00 	cmp.w	r8, #0
 8006126:	dd9c      	ble.n	8006062 <__sflush_r+0x1a>
 8006128:	6a21      	ldr	r1, [r4, #32]
 800612a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800612c:	4643      	mov	r3, r8
 800612e:	463a      	mov	r2, r7
 8006130:	4628      	mov	r0, r5
 8006132:	47b0      	blx	r6
 8006134:	2800      	cmp	r0, #0
 8006136:	dc06      	bgt.n	8006146 <__sflush_r+0xfe>
 8006138:	89a3      	ldrh	r3, [r4, #12]
 800613a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800613e:	81a3      	strh	r3, [r4, #12]
 8006140:	f04f 30ff 	mov.w	r0, #4294967295
 8006144:	e78e      	b.n	8006064 <__sflush_r+0x1c>
 8006146:	4407      	add	r7, r0
 8006148:	eba8 0800 	sub.w	r8, r8, r0
 800614c:	e7e9      	b.n	8006122 <__sflush_r+0xda>
 800614e:	bf00      	nop
 8006150:	20400001 	.word	0x20400001

08006154 <_fflush_r>:
 8006154:	b538      	push	{r3, r4, r5, lr}
 8006156:	690b      	ldr	r3, [r1, #16]
 8006158:	4605      	mov	r5, r0
 800615a:	460c      	mov	r4, r1
 800615c:	b913      	cbnz	r3, 8006164 <_fflush_r+0x10>
 800615e:	2500      	movs	r5, #0
 8006160:	4628      	mov	r0, r5
 8006162:	bd38      	pop	{r3, r4, r5, pc}
 8006164:	b118      	cbz	r0, 800616e <_fflush_r+0x1a>
 8006166:	6983      	ldr	r3, [r0, #24]
 8006168:	b90b      	cbnz	r3, 800616e <_fflush_r+0x1a>
 800616a:	f7ff f8f3 	bl	8005354 <__sinit>
 800616e:	4b14      	ldr	r3, [pc, #80]	; (80061c0 <_fflush_r+0x6c>)
 8006170:	429c      	cmp	r4, r3
 8006172:	d11b      	bne.n	80061ac <_fflush_r+0x58>
 8006174:	686c      	ldr	r4, [r5, #4]
 8006176:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d0ef      	beq.n	800615e <_fflush_r+0xa>
 800617e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006180:	07d0      	lsls	r0, r2, #31
 8006182:	d404      	bmi.n	800618e <_fflush_r+0x3a>
 8006184:	0599      	lsls	r1, r3, #22
 8006186:	d402      	bmi.n	800618e <_fflush_r+0x3a>
 8006188:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800618a:	f7ff f981 	bl	8005490 <__retarget_lock_acquire_recursive>
 800618e:	4628      	mov	r0, r5
 8006190:	4621      	mov	r1, r4
 8006192:	f7ff ff59 	bl	8006048 <__sflush_r>
 8006196:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006198:	07da      	lsls	r2, r3, #31
 800619a:	4605      	mov	r5, r0
 800619c:	d4e0      	bmi.n	8006160 <_fflush_r+0xc>
 800619e:	89a3      	ldrh	r3, [r4, #12]
 80061a0:	059b      	lsls	r3, r3, #22
 80061a2:	d4dd      	bmi.n	8006160 <_fflush_r+0xc>
 80061a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a6:	f7ff f974 	bl	8005492 <__retarget_lock_release_recursive>
 80061aa:	e7d9      	b.n	8006160 <_fflush_r+0xc>
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <_fflush_r+0x70>)
 80061ae:	429c      	cmp	r4, r3
 80061b0:	d101      	bne.n	80061b6 <_fflush_r+0x62>
 80061b2:	68ac      	ldr	r4, [r5, #8]
 80061b4:	e7df      	b.n	8006176 <_fflush_r+0x22>
 80061b6:	4b04      	ldr	r3, [pc, #16]	; (80061c8 <_fflush_r+0x74>)
 80061b8:	429c      	cmp	r4, r3
 80061ba:	bf08      	it	eq
 80061bc:	68ec      	ldreq	r4, [r5, #12]
 80061be:	e7da      	b.n	8006176 <_fflush_r+0x22>
 80061c0:	08006748 	.word	0x08006748
 80061c4:	08006768 	.word	0x08006768
 80061c8:	08006728 	.word	0x08006728

080061cc <_lseek_r>:
 80061cc:	b538      	push	{r3, r4, r5, lr}
 80061ce:	4d07      	ldr	r5, [pc, #28]	; (80061ec <_lseek_r+0x20>)
 80061d0:	4604      	mov	r4, r0
 80061d2:	4608      	mov	r0, r1
 80061d4:	4611      	mov	r1, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	602a      	str	r2, [r5, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	f7fb fb68 	bl	80018b0 <_lseek>
 80061e0:	1c43      	adds	r3, r0, #1
 80061e2:	d102      	bne.n	80061ea <_lseek_r+0x1e>
 80061e4:	682b      	ldr	r3, [r5, #0]
 80061e6:	b103      	cbz	r3, 80061ea <_lseek_r+0x1e>
 80061e8:	6023      	str	r3, [r4, #0]
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	2000021c 	.word	0x2000021c

080061f0 <__swhatbuf_r>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	460e      	mov	r6, r1
 80061f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061f8:	2900      	cmp	r1, #0
 80061fa:	b096      	sub	sp, #88	; 0x58
 80061fc:	4614      	mov	r4, r2
 80061fe:	461d      	mov	r5, r3
 8006200:	da07      	bge.n	8006212 <__swhatbuf_r+0x22>
 8006202:	2300      	movs	r3, #0
 8006204:	602b      	str	r3, [r5, #0]
 8006206:	89b3      	ldrh	r3, [r6, #12]
 8006208:	061a      	lsls	r2, r3, #24
 800620a:	d410      	bmi.n	800622e <__swhatbuf_r+0x3e>
 800620c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006210:	e00e      	b.n	8006230 <__swhatbuf_r+0x40>
 8006212:	466a      	mov	r2, sp
 8006214:	f000 f90c 	bl	8006430 <_fstat_r>
 8006218:	2800      	cmp	r0, #0
 800621a:	dbf2      	blt.n	8006202 <__swhatbuf_r+0x12>
 800621c:	9a01      	ldr	r2, [sp, #4]
 800621e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006222:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006226:	425a      	negs	r2, r3
 8006228:	415a      	adcs	r2, r3
 800622a:	602a      	str	r2, [r5, #0]
 800622c:	e7ee      	b.n	800620c <__swhatbuf_r+0x1c>
 800622e:	2340      	movs	r3, #64	; 0x40
 8006230:	2000      	movs	r0, #0
 8006232:	6023      	str	r3, [r4, #0]
 8006234:	b016      	add	sp, #88	; 0x58
 8006236:	bd70      	pop	{r4, r5, r6, pc}

08006238 <__smakebuf_r>:
 8006238:	898b      	ldrh	r3, [r1, #12]
 800623a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800623c:	079d      	lsls	r5, r3, #30
 800623e:	4606      	mov	r6, r0
 8006240:	460c      	mov	r4, r1
 8006242:	d507      	bpl.n	8006254 <__smakebuf_r+0x1c>
 8006244:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006248:	6023      	str	r3, [r4, #0]
 800624a:	6123      	str	r3, [r4, #16]
 800624c:	2301      	movs	r3, #1
 800624e:	6163      	str	r3, [r4, #20]
 8006250:	b002      	add	sp, #8
 8006252:	bd70      	pop	{r4, r5, r6, pc}
 8006254:	ab01      	add	r3, sp, #4
 8006256:	466a      	mov	r2, sp
 8006258:	f7ff ffca 	bl	80061f0 <__swhatbuf_r>
 800625c:	9900      	ldr	r1, [sp, #0]
 800625e:	4605      	mov	r5, r0
 8006260:	4630      	mov	r0, r6
 8006262:	f7ff f917 	bl	8005494 <_malloc_r>
 8006266:	b948      	cbnz	r0, 800627c <__smakebuf_r+0x44>
 8006268:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800626c:	059a      	lsls	r2, r3, #22
 800626e:	d4ef      	bmi.n	8006250 <__smakebuf_r+0x18>
 8006270:	f023 0303 	bic.w	r3, r3, #3
 8006274:	f043 0302 	orr.w	r3, r3, #2
 8006278:	81a3      	strh	r3, [r4, #12]
 800627a:	e7e3      	b.n	8006244 <__smakebuf_r+0xc>
 800627c:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <__smakebuf_r+0x7c>)
 800627e:	62b3      	str	r3, [r6, #40]	; 0x28
 8006280:	89a3      	ldrh	r3, [r4, #12]
 8006282:	6020      	str	r0, [r4, #0]
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	81a3      	strh	r3, [r4, #12]
 800628a:	9b00      	ldr	r3, [sp, #0]
 800628c:	6163      	str	r3, [r4, #20]
 800628e:	9b01      	ldr	r3, [sp, #4]
 8006290:	6120      	str	r0, [r4, #16]
 8006292:	b15b      	cbz	r3, 80062ac <__smakebuf_r+0x74>
 8006294:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006298:	4630      	mov	r0, r6
 800629a:	f000 f8db 	bl	8006454 <_isatty_r>
 800629e:	b128      	cbz	r0, 80062ac <__smakebuf_r+0x74>
 80062a0:	89a3      	ldrh	r3, [r4, #12]
 80062a2:	f023 0303 	bic.w	r3, r3, #3
 80062a6:	f043 0301 	orr.w	r3, r3, #1
 80062aa:	81a3      	strh	r3, [r4, #12]
 80062ac:	89a0      	ldrh	r0, [r4, #12]
 80062ae:	4305      	orrs	r5, r0
 80062b0:	81a5      	strh	r5, [r4, #12]
 80062b2:	e7cd      	b.n	8006250 <__smakebuf_r+0x18>
 80062b4:	080052ed 	.word	0x080052ed

080062b8 <memcpy>:
 80062b8:	440a      	add	r2, r1
 80062ba:	4291      	cmp	r1, r2
 80062bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80062c0:	d100      	bne.n	80062c4 <memcpy+0xc>
 80062c2:	4770      	bx	lr
 80062c4:	b510      	push	{r4, lr}
 80062c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ce:	4291      	cmp	r1, r2
 80062d0:	d1f9      	bne.n	80062c6 <memcpy+0xe>
 80062d2:	bd10      	pop	{r4, pc}

080062d4 <memmove>:
 80062d4:	4288      	cmp	r0, r1
 80062d6:	b510      	push	{r4, lr}
 80062d8:	eb01 0402 	add.w	r4, r1, r2
 80062dc:	d902      	bls.n	80062e4 <memmove+0x10>
 80062de:	4284      	cmp	r4, r0
 80062e0:	4623      	mov	r3, r4
 80062e2:	d807      	bhi.n	80062f4 <memmove+0x20>
 80062e4:	1e43      	subs	r3, r0, #1
 80062e6:	42a1      	cmp	r1, r4
 80062e8:	d008      	beq.n	80062fc <memmove+0x28>
 80062ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80062ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80062f2:	e7f8      	b.n	80062e6 <memmove+0x12>
 80062f4:	4402      	add	r2, r0
 80062f6:	4601      	mov	r1, r0
 80062f8:	428a      	cmp	r2, r1
 80062fa:	d100      	bne.n	80062fe <memmove+0x2a>
 80062fc:	bd10      	pop	{r4, pc}
 80062fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006302:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006306:	e7f7      	b.n	80062f8 <memmove+0x24>

08006308 <__malloc_lock>:
 8006308:	4801      	ldr	r0, [pc, #4]	; (8006310 <__malloc_lock+0x8>)
 800630a:	f7ff b8c1 	b.w	8005490 <__retarget_lock_acquire_recursive>
 800630e:	bf00      	nop
 8006310:	20000214 	.word	0x20000214

08006314 <__malloc_unlock>:
 8006314:	4801      	ldr	r0, [pc, #4]	; (800631c <__malloc_unlock+0x8>)
 8006316:	f7ff b8bc 	b.w	8005492 <__retarget_lock_release_recursive>
 800631a:	bf00      	nop
 800631c:	20000214 	.word	0x20000214

08006320 <_free_r>:
 8006320:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006322:	2900      	cmp	r1, #0
 8006324:	d048      	beq.n	80063b8 <_free_r+0x98>
 8006326:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800632a:	9001      	str	r0, [sp, #4]
 800632c:	2b00      	cmp	r3, #0
 800632e:	f1a1 0404 	sub.w	r4, r1, #4
 8006332:	bfb8      	it	lt
 8006334:	18e4      	addlt	r4, r4, r3
 8006336:	f7ff ffe7 	bl	8006308 <__malloc_lock>
 800633a:	4a20      	ldr	r2, [pc, #128]	; (80063bc <_free_r+0x9c>)
 800633c:	9801      	ldr	r0, [sp, #4]
 800633e:	6813      	ldr	r3, [r2, #0]
 8006340:	4615      	mov	r5, r2
 8006342:	b933      	cbnz	r3, 8006352 <_free_r+0x32>
 8006344:	6063      	str	r3, [r4, #4]
 8006346:	6014      	str	r4, [r2, #0]
 8006348:	b003      	add	sp, #12
 800634a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800634e:	f7ff bfe1 	b.w	8006314 <__malloc_unlock>
 8006352:	42a3      	cmp	r3, r4
 8006354:	d90b      	bls.n	800636e <_free_r+0x4e>
 8006356:	6821      	ldr	r1, [r4, #0]
 8006358:	1862      	adds	r2, r4, r1
 800635a:	4293      	cmp	r3, r2
 800635c:	bf04      	itt	eq
 800635e:	681a      	ldreq	r2, [r3, #0]
 8006360:	685b      	ldreq	r3, [r3, #4]
 8006362:	6063      	str	r3, [r4, #4]
 8006364:	bf04      	itt	eq
 8006366:	1852      	addeq	r2, r2, r1
 8006368:	6022      	streq	r2, [r4, #0]
 800636a:	602c      	str	r4, [r5, #0]
 800636c:	e7ec      	b.n	8006348 <_free_r+0x28>
 800636e:	461a      	mov	r2, r3
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b10b      	cbz	r3, 8006378 <_free_r+0x58>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d9fa      	bls.n	800636e <_free_r+0x4e>
 8006378:	6811      	ldr	r1, [r2, #0]
 800637a:	1855      	adds	r5, r2, r1
 800637c:	42a5      	cmp	r5, r4
 800637e:	d10b      	bne.n	8006398 <_free_r+0x78>
 8006380:	6824      	ldr	r4, [r4, #0]
 8006382:	4421      	add	r1, r4
 8006384:	1854      	adds	r4, r2, r1
 8006386:	42a3      	cmp	r3, r4
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	d1dd      	bne.n	8006348 <_free_r+0x28>
 800638c:	681c      	ldr	r4, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	6053      	str	r3, [r2, #4]
 8006392:	4421      	add	r1, r4
 8006394:	6011      	str	r1, [r2, #0]
 8006396:	e7d7      	b.n	8006348 <_free_r+0x28>
 8006398:	d902      	bls.n	80063a0 <_free_r+0x80>
 800639a:	230c      	movs	r3, #12
 800639c:	6003      	str	r3, [r0, #0]
 800639e:	e7d3      	b.n	8006348 <_free_r+0x28>
 80063a0:	6825      	ldr	r5, [r4, #0]
 80063a2:	1961      	adds	r1, r4, r5
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf04      	itt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	6063      	str	r3, [r4, #4]
 80063ae:	bf04      	itt	eq
 80063b0:	1949      	addeq	r1, r1, r5
 80063b2:	6021      	streq	r1, [r4, #0]
 80063b4:	6054      	str	r4, [r2, #4]
 80063b6:	e7c7      	b.n	8006348 <_free_r+0x28>
 80063b8:	b003      	add	sp, #12
 80063ba:	bd30      	pop	{r4, r5, pc}
 80063bc:	20000094 	.word	0x20000094

080063c0 <_realloc_r>:
 80063c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c2:	4607      	mov	r7, r0
 80063c4:	4614      	mov	r4, r2
 80063c6:	460e      	mov	r6, r1
 80063c8:	b921      	cbnz	r1, 80063d4 <_realloc_r+0x14>
 80063ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80063ce:	4611      	mov	r1, r2
 80063d0:	f7ff b860 	b.w	8005494 <_malloc_r>
 80063d4:	b922      	cbnz	r2, 80063e0 <_realloc_r+0x20>
 80063d6:	f7ff ffa3 	bl	8006320 <_free_r>
 80063da:	4625      	mov	r5, r4
 80063dc:	4628      	mov	r0, r5
 80063de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063e0:	f000 f848 	bl	8006474 <_malloc_usable_size_r>
 80063e4:	42a0      	cmp	r0, r4
 80063e6:	d20f      	bcs.n	8006408 <_realloc_r+0x48>
 80063e8:	4621      	mov	r1, r4
 80063ea:	4638      	mov	r0, r7
 80063ec:	f7ff f852 	bl	8005494 <_malloc_r>
 80063f0:	4605      	mov	r5, r0
 80063f2:	2800      	cmp	r0, #0
 80063f4:	d0f2      	beq.n	80063dc <_realloc_r+0x1c>
 80063f6:	4631      	mov	r1, r6
 80063f8:	4622      	mov	r2, r4
 80063fa:	f7ff ff5d 	bl	80062b8 <memcpy>
 80063fe:	4631      	mov	r1, r6
 8006400:	4638      	mov	r0, r7
 8006402:	f7ff ff8d 	bl	8006320 <_free_r>
 8006406:	e7e9      	b.n	80063dc <_realloc_r+0x1c>
 8006408:	4635      	mov	r5, r6
 800640a:	e7e7      	b.n	80063dc <_realloc_r+0x1c>

0800640c <_read_r>:
 800640c:	b538      	push	{r3, r4, r5, lr}
 800640e:	4d07      	ldr	r5, [pc, #28]	; (800642c <_read_r+0x20>)
 8006410:	4604      	mov	r4, r0
 8006412:	4608      	mov	r0, r1
 8006414:	4611      	mov	r1, r2
 8006416:	2200      	movs	r2, #0
 8006418:	602a      	str	r2, [r5, #0]
 800641a:	461a      	mov	r2, r3
 800641c:	f7fb f9e8 	bl	80017f0 <_read>
 8006420:	1c43      	adds	r3, r0, #1
 8006422:	d102      	bne.n	800642a <_read_r+0x1e>
 8006424:	682b      	ldr	r3, [r5, #0]
 8006426:	b103      	cbz	r3, 800642a <_read_r+0x1e>
 8006428:	6023      	str	r3, [r4, #0]
 800642a:	bd38      	pop	{r3, r4, r5, pc}
 800642c:	2000021c 	.word	0x2000021c

08006430 <_fstat_r>:
 8006430:	b538      	push	{r3, r4, r5, lr}
 8006432:	4d07      	ldr	r5, [pc, #28]	; (8006450 <_fstat_r+0x20>)
 8006434:	2300      	movs	r3, #0
 8006436:	4604      	mov	r4, r0
 8006438:	4608      	mov	r0, r1
 800643a:	4611      	mov	r1, r2
 800643c:	602b      	str	r3, [r5, #0]
 800643e:	f7fb fa1c 	bl	800187a <_fstat>
 8006442:	1c43      	adds	r3, r0, #1
 8006444:	d102      	bne.n	800644c <_fstat_r+0x1c>
 8006446:	682b      	ldr	r3, [r5, #0]
 8006448:	b103      	cbz	r3, 800644c <_fstat_r+0x1c>
 800644a:	6023      	str	r3, [r4, #0]
 800644c:	bd38      	pop	{r3, r4, r5, pc}
 800644e:	bf00      	nop
 8006450:	2000021c 	.word	0x2000021c

08006454 <_isatty_r>:
 8006454:	b538      	push	{r3, r4, r5, lr}
 8006456:	4d06      	ldr	r5, [pc, #24]	; (8006470 <_isatty_r+0x1c>)
 8006458:	2300      	movs	r3, #0
 800645a:	4604      	mov	r4, r0
 800645c:	4608      	mov	r0, r1
 800645e:	602b      	str	r3, [r5, #0]
 8006460:	f7fb fa1b 	bl	800189a <_isatty>
 8006464:	1c43      	adds	r3, r0, #1
 8006466:	d102      	bne.n	800646e <_isatty_r+0x1a>
 8006468:	682b      	ldr	r3, [r5, #0]
 800646a:	b103      	cbz	r3, 800646e <_isatty_r+0x1a>
 800646c:	6023      	str	r3, [r4, #0]
 800646e:	bd38      	pop	{r3, r4, r5, pc}
 8006470:	2000021c 	.word	0x2000021c

08006474 <_malloc_usable_size_r>:
 8006474:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006478:	1f18      	subs	r0, r3, #4
 800647a:	2b00      	cmp	r3, #0
 800647c:	bfbc      	itt	lt
 800647e:	580b      	ldrlt	r3, [r1, r0]
 8006480:	18c0      	addlt	r0, r0, r3
 8006482:	4770      	bx	lr

08006484 <_init>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr

08006490 <_fini>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr
